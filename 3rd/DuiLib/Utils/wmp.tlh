// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (b08d7783).
//
// wmp.tlh
//
// C++ source equivalent of Win32 type library wmp.dll
// compiler-generated file created 07/31/11 at 23:01:11 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace WMPLib {

//
// Forward references and typedefs
//

struct __declspec(uuid("6bf52a50-394a-11d3-b153-00c04f79faa6"))
/* LIBID */ __WMPLib;
struct __declspec(uuid("19a6627b-da9e-47c1-bb23-00b5e668236a"))
/* interface */ IWMPEvents;
enum WMPPlaylistChangeEventType;
struct __declspec(uuid("1e7601fa-47ea-4107-9ea9-9004ed9684ff"))
/* interface */ IWMPEvents2;
struct __declspec(uuid("82a2986c-0293-4fd0-b279-b21b86c058be"))
/* interface */ IWMPSyncDevice;
enum WMPDeviceStatus;
enum WMPSyncState;
struct __declspec(uuid("1f504270-a66b-4223-8e96-26a06c63d69f"))
/* interface */ IWMPEvents3;
struct __declspec(uuid("56e2294f-69ed-4629-a869-aea72c0dcc2c"))
/* interface */ IWMPCdromRip;
enum WMPRipState;
struct __declspec(uuid("bd94dbeb-417f-4928-aa06-087d56ed9b59"))
/* interface */ IWMPCdromBurn;
enum WMPBurnFormat;
struct __declspec(uuid("d5f0f4f1-130c-11d3-b14e-00c04f79faa6"))
/* dual interface */ IWMPPlaylist;
struct __declspec(uuid("94d55e95-3fac-11d3-b155-00c04f79faa6"))
/* dual interface */ IWMPMedia;
enum WMPBurnState;
struct __declspec(uuid("3df47861-7df1-4c1f-a81b-4c26f0f7a7c6"))
/* interface */ IWMPLibrary;
enum WMPLibraryType;
struct __declspec(uuid("8363bc22-b4b4-4b19-989d-1cd765749dd1"))
/* dual interface */ IWMPMediaCollection;
struct __declspec(uuid("4a976298-8c0d-11d3-b389-00c04f68574b"))
/* dual interface */ IWMPStringCollection;
enum WMPFolderScanState;
enum WMPStringCollectionChangeEventType;
struct __declspec(uuid("26dabcfa-306b-404d-9a6f-630a8405048d"))
/* interface */ IWMPEvents4;
struct __declspec(uuid("6bf52a51-394a-11d3-b153-00c04f79faa6"))
/* dispinterface */ _WMPOCXEvents;
struct /* coclass */ WindowsMediaPlayer;
struct __declspec(uuid("6c497d62-8919-413c-82db-e935fb3ec584"))
/* dual interface */ IWMPPlayer4;
struct __declspec(uuid("7587c667-628f-499f-88e7-6a6f4e888464"))
/* dual interface */ IWMPCore3;
struct __declspec(uuid("bc17e5b7-7561-4c18-bb90-17d485775659"))
/* dual interface */ IWMPCore2;
struct __declspec(uuid("d84cca99-cce2-11d2-9ecc-0000f8085981"))
/* dual interface */ IWMPCore;
enum WMPOpenState;
enum WMPPlayState;
struct __declspec(uuid("74c09e02-f828-11d2-a74b-00a0c905f36e"))
/* dual interface */ IWMPControls;
struct __declspec(uuid("9104d1ab-80c9-4fed-abf0-2e6417a6df14"))
/* dual interface */ IWMPSettings;
struct __declspec(uuid("10a13217-23a7-439b-b1c0-d847c79b7774"))
/* dual interface */ IWMPPlaylistCollection;
struct __declspec(uuid("679409c0-99f7-11d3-9fb7-00105aa620bb"))
/* dual interface */ IWMPPlaylistArray;
struct __declspec(uuid("ec21b779-edef-462d-bba4-ad9dde2b29a7"))
/* dual interface */ IWMPNetwork;
struct __declspec(uuid("ee4c8fe2-34b2-11d3-a3bf-006097c9b344"))
/* dual interface */ IWMPCdromCollection;
struct __declspec(uuid("cfab6e98-8730-11d3-b388-00c04f68574b"))
/* dual interface */ IWMPCdrom;
struct __declspec(uuid("4f2df574-c588-11d3-9ed0-00c04fb6e937"))
/* dual interface */ IWMPClosedCaption;
struct __declspec(uuid("a12dcf7d-14ab-4c1b-a8cd-63909f06025b"))
/* dual interface */ IWMPError;
struct __declspec(uuid("3614c646-3b3b-4de7-a81e-930e3f2127b3"))
/* dual interface */ IWMPErrorItem;
struct __declspec(uuid("8da61686-4668-4a5c-ae5d-803193293dbe"))
/* dual interface */ IWMPDVD;
struct __declspec(uuid("40897764-ceab-47be-ad4a-8e28537f9bbf"))
/* dual interface */ IWMPPlayerApplication;
struct __declspec(uuid("54062b68-052a-4c25-a39f-8b63346511d4"))
/* dual interface */ IWMPPlayer3;
struct __declspec(uuid("0e6b01d1-d407-4c85-bf5f-1c01f6150280"))
/* dual interface */ IWMPPlayer2;
struct __declspec(uuid("6bf52a4f-394a-11d3-b153-00c04f79faa6"))
/* dual interface */ IWMPPlayer;
struct __declspec(uuid("f75ccec0-c67c-475c-931e-8719870bee7d"))
/* dual interface */ IWMPErrorItem2;
struct __declspec(uuid("6f030d25-0890-480f-9775-1f7e40ab5b8e"))
/* dual interface */ IWMPControls2;
struct __declspec(uuid("ab7c88bb-143e-4ea4-acc3-e4350b2106c3"))
/* dual interface */ IWMPMedia2;
struct __declspec(uuid("f118efc7-f03a-4fb4-99c9-1c02a5c1065b"))
/* dual interface */ IWMPMedia3;
struct __declspec(uuid("5c29bbe0-f87d-4c45-aa28-a70f0230ffa9"))
/* dual interface */ IWMPMetadataPicture;
struct __declspec(uuid("769a72db-13d2-45e2-9c48-53ca9d5b7450"))
/* dual interface */ IWMPMetadataText;
struct __declspec(uuid("fda937a4-eece-4da5-a0b6-39bf89ade2c2"))
/* dual interface */ IWMPSettings2;
struct __declspec(uuid("a1d1110e-d545-476a-9a78-ac3e4cb1e6bd"))
/* dual interface */ IWMPControls3;
struct __declspec(uuid("350ba78b-6bc8-4113-a5f5-312056934eb6"))
/* dual interface */ IWMPClosedCaption2;
struct __declspec(uuid("8ba957f5-fd8c-4791-b82d-f840401ee474"))
/* dual interface */ IWMPMediaCollection2;
struct __declspec(uuid("a00918f3-a6b0-4bfb-9189-fd834c7bc5a5"))
/* dual interface */ IWMPQuery;
struct __declspec(uuid("46ad648d-53f1-4a74-92e2-2a1b68d63fd4"))
/* dual interface */ IWMPStringCollection2;
struct __declspec(uuid("1d01fbdb-ade2-4c8d-9842-c190b95c3306"))
/* interface */ IWMPPlayerServices;
struct __declspec(uuid("1bb1592f-f040-418a-9f71-17c7512b4d70"))
/* interface */ IWMPPlayerServices2;
struct __declspec(uuid("cbb92747-741f-44fe-ab5b-f1a48f3b2a59"))
/* interface */ IWMPRemoteMediaServices;
struct __declspec(uuid("8b5050ff-e0a4-4808-b3a8-893a9e1ed894"))
/* interface */ IWMPSyncServices;
struct __declspec(uuid("39c2f8d5-1cf2-4d5e-ae09-d73492cf9eaa"))
/* interface */ IWMPLibraryServices;
struct __declspec(uuid("82cba86b-9f04-474b-a365-d6dd1466e541"))
/* interface */ IWMPLibrarySharingServices;
struct __declspec(uuid("dd578a4e-79b1-426c-bf8f-3add9072500b"))
/* interface */ IWMPLibrary2;
struct __declspec(uuid("788c8743-e57f-439d-a468-5bc77f2e59c6"))
/* interface */ IWMPFolderMonitorServices;
struct __declspec(uuid("88afb4b2-140a-44d2-91e6-4543da467cd1"))
/* interface */ IWMPSyncDevice2;
struct __declspec(uuid("b22c85f9-263c-4372-a0da-b518db9b4098"))
/* interface */ IWMPSyncDevice3;
struct __declspec(uuid("5f9cfd92-8cad-11d3-9a7e-00c04f8efb70"))
/* dual interface */ IWMPPlaylistCtrl;
struct __declspec(uuid("e41c88dd-2364-4ff7-a0f5-ca9859af783f"))
/* dual interface */ IAppDispatch;
struct __declspec(uuid("ef870383-83ab-4ea9-be48-56fa4251af10"))
/* dual interface */ IWMPSafeBrowser;
struct __declspec(uuid("21d077c1-4baa-11d3-bd45-00c04f6ea5ae"))
/* dual interface */ IWMPObjectExtendedProps;
struct __declspec(uuid("72f486b1-0d43-11d3-bd3f-00c04f6ea5ae"))
/* dual interface */ IWMPLayoutSubView;
struct __declspec(uuid("172e905d-80d9-4c2f-b7ce-2ccb771787a2"))
/* dual interface */ IWMPLayoutView;
struct __declspec(uuid("5af0bec1-46aa-11d3-bd45-00c04f6ea5ae"))
/* dual interface */ IWMPEventObject;
struct __declspec(uuid("6fcae13d-e492-4584-9c21-d2c052a2a33a"))
/* dual interface */ IWMPTheme;
struct __declspec(uuid("b2c2d18e-97af-4b6a-a56b-2ffff470fb81"))
/* dual interface */ IWMPLayoutSettingsDispatch;
struct __declspec(uuid("43d5ae92-4332-477c-8883-e0b3b063c5d2"))
/* dual interface */ IWMPWindow;
struct __declspec(uuid("98bb02d4-ed74-43cc-ad6a-45888f2e0dcc"))
/* dual interface */ IWMPBrandDispatch;
struct __declspec(uuid("504f112e-77cc-4e3c-a073-5371b31d9b36"))
/* dual interface */ IWMPNowPlayingHelperDispatch;
struct __declspec(uuid("2a2e0da3-19fa-4f82-be18-cd7d7a3b977f"))
/* dual interface */ IWMPNowDoingDispatch;
struct __declspec(uuid("946b023e-044c-4473-8018-74954f09dc7e"))
/* dual interface */ IWMPHoverPreviewDispatch;
struct __declspec(uuid("bb17fff7-1692-4555-918a-6af7bfacedd2"))
/* dispinterface */ IWMPButtonCtrlEvents;
struct /* coclass */ WMPButtonCtrl;
struct __declspec(uuid("87291b50-0c8e-11d3-bb2a-00a0c93ca73a"))
/* dual interface */ IWMPButtonCtrl;
struct /* coclass */ WMPListBoxCtrl;
struct __declspec(uuid("fc1880ce-83b9-43a7-a066-c44ce8c82583"))
/* dual interface */ IWMPListBoxCtrl;
struct __declspec(uuid("d255dfb8-c22a-42cf-b8b7-f15d7bcf65d6"))
/* dual interface */ IWMPListBoxItem;
struct __declspec(uuid("63d9d30f-ae4c-4678-8ca8-5720f4fe4419"))
/* dual interface */ IWMPPlaylistCtrlColumn;
struct __declspec(uuid("cdac14d2-8be4-11d3-bb48-00a0c93ca73a"))
/* dispinterface */ IWMPSliderCtrlEvents;
struct /* coclass */ WMPSliderCtrl;
struct __declspec(uuid("f2bf2c8f-405f-11d3-bb39-00a0c93ca73a"))
/* dual interface */ IWMPSliderCtrl;
struct __declspec(uuid("a85c0477-714c-4a06-b9f6-7c8ca38b45dc"))
/* dispinterface */ IWMPVideoCtrlEvents;
struct /* coclass */ WMPVideoCtrl;
struct __declspec(uuid("61cecf10-fc3a-11d2-a1cd-005004602752"))
/* dual interface */ IWMPVideoCtrl;
struct /* coclass */ WMPEffects;
struct __declspec(uuid("a9efab80-0a60-4c3f-bbd1-4558dd2a9769"))
/* dual interface */ IWMPEffectsCtrl;
struct /* coclass */ WMPEqualizerSettingsCtrl;
struct __declspec(uuid("2bd3716f-a914-49fb-8655-996d5f495498"))
/* dual interface */ IWMPEqualizerSettingsCtrl;
struct /* coclass */ WMPVideoSettingsCtrl;
struct __declspec(uuid("07ec23da-ef73-4bde-a40f-f269e0b7afd6"))
/* dual interface */ IWMPVideoSettingsCtrl;
struct /* coclass */ WMPDolbyDigitalSettingsCtrl;
struct __declspec(uuid("bbd6801a-a1d4-4d05-9f2d-29e0024c3fd9"))
/* dual interface */ IWMPDolbyDigitalSettingsCtrl;
struct /* coclass */ WMPLibraryTreeCtrl;
struct __declspec(uuid("b738fcae-f089-45df-aed6-034b9e7db632"))
/* dual interface */ IWMPLibraryTreeCtrl;
struct /* coclass */ WMPEditCtrl;
struct __declspec(uuid("70e1217c-c617-4cfd-bd8a-69ca2043e70b"))
/* dual interface */ IWMPEditCtrl;
struct /* coclass */ WMPSkinList;
struct __declspec(uuid("8cea03a2-d0c5-4e97-9c38-a676a639a51d"))
/* dual interface */ IWMPSkinList;
struct __declspec(uuid("5d0ad945-289e-45c5-a9c6-f301f0152108"))
/* dual interface */ IWMPPluginUIHost;
struct /* coclass */ WMPMenuCtrl;
struct __declspec(uuid("158a7adc-33da-4039-a553-bddbbe389f5c"))
/* dual interface */ IWMPMenuCtrl;
struct /* coclass */ WMPAutoMenuCtrl;
struct __declspec(uuid("1ad13e0b-4f3a-41df-9be2-f9e6fe0a7875"))
/* dual interface */ IWMPAutoMenuCtrl;
struct /* coclass */ WMPRegionalButtonCtrl;
struct __declspec(uuid("58d507b1-2354-11d3-bd41-00c04f6ea5ae"))
/* dual interface */ IWMPRegionalButtonCtrl;
struct __declspec(uuid("50fc8d31-67ac-11d3-bd4c-00c04f6ea5ae"))
/* dispinterface */ IWMPRegionalButtonEvents;
struct /* coclass */ WMPRegionalButton;
struct __declspec(uuid("58d507b2-2354-11d3-bd41-00c04f6ea5ae"))
/* dual interface */ IWMPRegionalButton;
struct __declspec(uuid("95f45aa4-ed0a-11d2-ba67-0000f80855e6"))
/* dispinterface */ IWMPCustomSliderCtrlEvents;
struct /* coclass */ WMPCustomSliderCtrl;
struct __declspec(uuid("95f45aa2-ed0a-11d2-ba67-0000f80855e6"))
/* dual interface */ IWMPCustomSlider;
struct /* coclass */ WMPTextCtrl;
struct __declspec(uuid("237dac8e-0e32-11d3-a2e2-00c04f79f88e"))
/* dual interface */ IWMPTextCtrl;
struct /* coclass */ WMPPlaylistCtrl;
struct __declspec(uuid("891eadb1-1c45-48b0-b704-49a888da98c4"))
/* dual interface */ ITaskCntrCtrl;
struct __declspec(uuid("d84cca96-cce2-11d2-9ecc-0000f8085981"))
/* dispinterface */ _WMPCoreEvents;
struct /* coclass */ WMPCore;
struct __declspec(uuid("6b550945-018f-11d3-b14a-00c04f79faa6"))
/* dual interface */ IWMPGraphEventHandler;
struct __declspec(uuid("f8578bfa-cd8f-4ce1-a684-5b7e85fca7dc"))
/* dual interface */ IBattery;
struct __declspec(uuid("40c6bde7-9c90-49d4-ad20-bef81a6c5f22"))
/* dual interface */ IBatteryPreset;
struct __declspec(uuid("f85e2d65-207d-48db-84b1-915e1735db17"))
/* dual interface */ IBatteryRandomPreset;
struct __declspec(uuid("876e7208-0172-4ebb-b08b-2e1d30dfe44c"))
/* dual interface */ IBatterySavedPreset;
struct __declspec(uuid("33e9291a-f6a9-11d2-9435-00a0c92a2f2d"))
/* dual interface */ IBarsEffect;
struct __declspec(uuid("e2cc638c-fd2c-409b-a1ea-5ddb72dc8e84"))
/* dual interface */ IWMPExternal;
struct __declspec(uuid("d10ccdff-472d-498c-b5fe-3630e5405e0a"))
/* dual interface */ IWMPExternalColors;
struct __declspec(uuid("54df358e-cf38-4010-99f1-f44b0e9000e5"))
/* dual interface */ IWMPSubscriptionServiceLimited;
struct __declspec(uuid("2e922378-ee70-4ceb-bbab-ce7ce4a04816"))
/* dual interface */ IWMPSubscriptionServiceExternal;
struct __declspec(uuid("e15e9ad1-8f20-4cc4-9ec7-1a328ca86a0d"))
/* dual interface */ IWMPDownloadManager;
struct __declspec(uuid("0a319c7f-85f9-436c-b88e-82fd88000e1c"))
/* dual interface */ IWMPDownloadCollection;
struct __declspec(uuid("9fbb3336-6da3-479d-b8ff-67d46e20a987"))
/* dual interface */ IWMPDownloadItem2;
struct __declspec(uuid("c9470e8e-3f6b-46a9-a0a9-452815c34297"))
/* dual interface */ IWMPDownloadItem;
enum WMPSubscriptionDownloadState;
struct __declspec(uuid("5f0248c1-62b3-42d7-b927-029119e6ad14"))
/* dual interface */ IWMPSubscriptionServicePlayMedia;
struct __declspec(uuid("a915cea2-72df-41e1-a576-ef0bae5e5169"))
/* dual interface */ IWMPDiscoExternal;
struct __declspec(uuid("2d7ef888-1d3c-484a-a906-9f49d99bb344"))
/* dual interface */ IWMPCDDVDWizardExternal;
enum WMP_WRITENAMESEX_TYPE;
struct __declspec(uuid("f81b2a59-02bc-4003-8b2f-c124af66fc66"))
/* dual interface */ IWMPBaseExternal;
struct __declspec(uuid("3148e685-b243-423d-8341-8480d6eff674"))
/* dual interface */ IWMPOfflineExternal;
struct __declspec(uuid("4e195db1-9e29-47fc-9ce1-de9937d32925"))
/* dual interface */ IWMPDMRAVTransportService;
struct __declspec(uuid("fb61cd38-8de7-4479-8b76-a8d097c20c70"))
/* dual interface */ IWMPDMRConnectionManagerService;
struct __declspec(uuid("ff4b1bda-19f0-42cf-8dda-19162950c543"))
/* dual interface */ IWMPDMRRenderingControlService;
#if !defined(_WIN64)
typedef __w64 unsigned long ULONG_PTR;
#else
typedef unsigned __int64 ULONG_PTR;
#endif

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IWMPEvents, __uuidof(IWMPEvents));
_COM_SMARTPTR_TYPEDEF(IWMPSyncDevice, __uuidof(IWMPSyncDevice));
_COM_SMARTPTR_TYPEDEF(IWMPEvents2, __uuidof(IWMPEvents2));
_COM_SMARTPTR_TYPEDEF(IWMPCdromRip, __uuidof(IWMPCdromRip));
_COM_SMARTPTR_TYPEDEF(IWMPStringCollection, __uuidof(IWMPStringCollection));
_COM_SMARTPTR_TYPEDEF(_WMPOCXEvents, __uuidof(_WMPOCXEvents));
_COM_SMARTPTR_TYPEDEF(IWMPSettings, __uuidof(IWMPSettings));
_COM_SMARTPTR_TYPEDEF(IWMPNetwork, __uuidof(IWMPNetwork));
_COM_SMARTPTR_TYPEDEF(IWMPClosedCaption, __uuidof(IWMPClosedCaption));
_COM_SMARTPTR_TYPEDEF(IWMPErrorItem, __uuidof(IWMPErrorItem));
_COM_SMARTPTR_TYPEDEF(IWMPError, __uuidof(IWMPError));
_COM_SMARTPTR_TYPEDEF(IWMPDVD, __uuidof(IWMPDVD));
_COM_SMARTPTR_TYPEDEF(IWMPPlayerApplication, __uuidof(IWMPPlayerApplication));
_COM_SMARTPTR_TYPEDEF(IWMPErrorItem2, __uuidof(IWMPErrorItem2));
_COM_SMARTPTR_TYPEDEF(IWMPMetadataPicture, __uuidof(IWMPMetadataPicture));
_COM_SMARTPTR_TYPEDEF(IWMPMetadataText, __uuidof(IWMPMetadataText));
_COM_SMARTPTR_TYPEDEF(IWMPSettings2, __uuidof(IWMPSettings2));
_COM_SMARTPTR_TYPEDEF(IWMPClosedCaption2, __uuidof(IWMPClosedCaption2));
_COM_SMARTPTR_TYPEDEF(IWMPQuery, __uuidof(IWMPQuery));
_COM_SMARTPTR_TYPEDEF(IWMPStringCollection2, __uuidof(IWMPStringCollection2));
_COM_SMARTPTR_TYPEDEF(IWMPPlayerServices, __uuidof(IWMPPlayerServices));
_COM_SMARTPTR_TYPEDEF(IWMPPlayerServices2, __uuidof(IWMPPlayerServices2));
_COM_SMARTPTR_TYPEDEF(IWMPRemoteMediaServices, __uuidof(IWMPRemoteMediaServices));
_COM_SMARTPTR_TYPEDEF(IWMPSyncServices, __uuidof(IWMPSyncServices));
_COM_SMARTPTR_TYPEDEF(IWMPLibrarySharingServices, __uuidof(IWMPLibrarySharingServices));
_COM_SMARTPTR_TYPEDEF(IWMPFolderMonitorServices, __uuidof(IWMPFolderMonitorServices));
_COM_SMARTPTR_TYPEDEF(IWMPSyncDevice2, __uuidof(IWMPSyncDevice2));
_COM_SMARTPTR_TYPEDEF(IAppDispatch, __uuidof(IAppDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPSafeBrowser, __uuidof(IWMPSafeBrowser));
_COM_SMARTPTR_TYPEDEF(IWMPObjectExtendedProps, __uuidof(IWMPObjectExtendedProps));
_COM_SMARTPTR_TYPEDEF(IWMPLayoutSubView, __uuidof(IWMPLayoutSubView));
_COM_SMARTPTR_TYPEDEF(IWMPLayoutView, __uuidof(IWMPLayoutView));
_COM_SMARTPTR_TYPEDEF(IWMPEventObject, __uuidof(IWMPEventObject));
_COM_SMARTPTR_TYPEDEF(IWMPTheme, __uuidof(IWMPTheme));
_COM_SMARTPTR_TYPEDEF(IWMPLayoutSettingsDispatch, __uuidof(IWMPLayoutSettingsDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPWindow, __uuidof(IWMPWindow));
_COM_SMARTPTR_TYPEDEF(IWMPBrandDispatch, __uuidof(IWMPBrandDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPNowPlayingHelperDispatch, __uuidof(IWMPNowPlayingHelperDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPNowDoingDispatch, __uuidof(IWMPNowDoingDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPHoverPreviewDispatch, __uuidof(IWMPHoverPreviewDispatch));
_COM_SMARTPTR_TYPEDEF(IWMPButtonCtrlEvents, __uuidof(IWMPButtonCtrlEvents));
_COM_SMARTPTR_TYPEDEF(IWMPButtonCtrl, __uuidof(IWMPButtonCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPListBoxCtrl, __uuidof(IWMPListBoxCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPListBoxItem, __uuidof(IWMPListBoxItem));
_COM_SMARTPTR_TYPEDEF(IWMPPlaylistCtrlColumn, __uuidof(IWMPPlaylistCtrlColumn));
_COM_SMARTPTR_TYPEDEF(IWMPSliderCtrlEvents, __uuidof(IWMPSliderCtrlEvents));
_COM_SMARTPTR_TYPEDEF(IWMPSliderCtrl, __uuidof(IWMPSliderCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPVideoCtrlEvents, __uuidof(IWMPVideoCtrlEvents));
_COM_SMARTPTR_TYPEDEF(IWMPVideoCtrl, __uuidof(IWMPVideoCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPEffectsCtrl, __uuidof(IWMPEffectsCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPEqualizerSettingsCtrl, __uuidof(IWMPEqualizerSettingsCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPVideoSettingsCtrl, __uuidof(IWMPVideoSettingsCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPDolbyDigitalSettingsCtrl, __uuidof(IWMPDolbyDigitalSettingsCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPEditCtrl, __uuidof(IWMPEditCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPSkinList, __uuidof(IWMPSkinList));
_COM_SMARTPTR_TYPEDEF(IWMPPluginUIHost, __uuidof(IWMPPluginUIHost));
_COM_SMARTPTR_TYPEDEF(IWMPMenuCtrl, __uuidof(IWMPMenuCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPAutoMenuCtrl, __uuidof(IWMPAutoMenuCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPRegionalButtonCtrl, __uuidof(IWMPRegionalButtonCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPRegionalButtonEvents, __uuidof(IWMPRegionalButtonEvents));
_COM_SMARTPTR_TYPEDEF(IWMPRegionalButton, __uuidof(IWMPRegionalButton));
_COM_SMARTPTR_TYPEDEF(IWMPCustomSliderCtrlEvents, __uuidof(IWMPCustomSliderCtrlEvents));
_COM_SMARTPTR_TYPEDEF(IWMPCustomSlider, __uuidof(IWMPCustomSlider));
_COM_SMARTPTR_TYPEDEF(IWMPTextCtrl, __uuidof(IWMPTextCtrl));
_COM_SMARTPTR_TYPEDEF(ITaskCntrCtrl, __uuidof(ITaskCntrCtrl));
_COM_SMARTPTR_TYPEDEF(_WMPCoreEvents, __uuidof(_WMPCoreEvents));
_COM_SMARTPTR_TYPEDEF(IWMPGraphEventHandler, __uuidof(IWMPGraphEventHandler));
_COM_SMARTPTR_TYPEDEF(IBattery, __uuidof(IBattery));
_COM_SMARTPTR_TYPEDEF(IBatteryPreset, __uuidof(IBatteryPreset));
_COM_SMARTPTR_TYPEDEF(IBatteryRandomPreset, __uuidof(IBatteryRandomPreset));
_COM_SMARTPTR_TYPEDEF(IBatterySavedPreset, __uuidof(IBatterySavedPreset));
_COM_SMARTPTR_TYPEDEF(IBarsEffect, __uuidof(IBarsEffect));
_COM_SMARTPTR_TYPEDEF(IWMPExternal, __uuidof(IWMPExternal));
_COM_SMARTPTR_TYPEDEF(IWMPExternalColors, __uuidof(IWMPExternalColors));
_COM_SMARTPTR_TYPEDEF(IWMPSubscriptionServiceLimited, __uuidof(IWMPSubscriptionServiceLimited));
_COM_SMARTPTR_TYPEDEF(IWMPDownloadItem, __uuidof(IWMPDownloadItem));
_COM_SMARTPTR_TYPEDEF(IWMPDownloadItem2, __uuidof(IWMPDownloadItem2));
_COM_SMARTPTR_TYPEDEF(IWMPDownloadCollection, __uuidof(IWMPDownloadCollection));
_COM_SMARTPTR_TYPEDEF(IWMPDownloadManager, __uuidof(IWMPDownloadManager));
_COM_SMARTPTR_TYPEDEF(IWMPSubscriptionServiceExternal, __uuidof(IWMPSubscriptionServiceExternal));
_COM_SMARTPTR_TYPEDEF(IWMPSubscriptionServicePlayMedia, __uuidof(IWMPSubscriptionServicePlayMedia));
_COM_SMARTPTR_TYPEDEF(IWMPDiscoExternal, __uuidof(IWMPDiscoExternal));
_COM_SMARTPTR_TYPEDEF(IWMPCDDVDWizardExternal, __uuidof(IWMPCDDVDWizardExternal));
_COM_SMARTPTR_TYPEDEF(IWMPBaseExternal, __uuidof(IWMPBaseExternal));
_COM_SMARTPTR_TYPEDEF(IWMPOfflineExternal, __uuidof(IWMPOfflineExternal));
_COM_SMARTPTR_TYPEDEF(IWMPDMRAVTransportService, __uuidof(IWMPDMRAVTransportService));
_COM_SMARTPTR_TYPEDEF(IWMPDMRConnectionManagerService, __uuidof(IWMPDMRConnectionManagerService));
_COM_SMARTPTR_TYPEDEF(IWMPDMRRenderingControlService, __uuidof(IWMPDMRRenderingControlService));
_COM_SMARTPTR_TYPEDEF(IWMPEvents3, __uuidof(IWMPEvents3));
_COM_SMARTPTR_TYPEDEF(IWMPEvents4, __uuidof(IWMPEvents4));
_COM_SMARTPTR_TYPEDEF(IWMPCdromBurn, __uuidof(IWMPCdromBurn));
_COM_SMARTPTR_TYPEDEF(IWMPPlaylist, __uuidof(IWMPPlaylist));
_COM_SMARTPTR_TYPEDEF(IWMPMedia, __uuidof(IWMPMedia));
_COM_SMARTPTR_TYPEDEF(IWMPMediaCollection, __uuidof(IWMPMediaCollection));
_COM_SMARTPTR_TYPEDEF(IWMPLibrary, __uuidof(IWMPLibrary));
_COM_SMARTPTR_TYPEDEF(IWMPControls, __uuidof(IWMPControls));
_COM_SMARTPTR_TYPEDEF(IWMPPlaylistArray, __uuidof(IWMPPlaylistArray));
_COM_SMARTPTR_TYPEDEF(IWMPPlaylistCollection, __uuidof(IWMPPlaylistCollection));
_COM_SMARTPTR_TYPEDEF(IWMPCdrom, __uuidof(IWMPCdrom));
_COM_SMARTPTR_TYPEDEF(IWMPCdromCollection, __uuidof(IWMPCdromCollection));
_COM_SMARTPTR_TYPEDEF(IWMPCore, __uuidof(IWMPCore));
_COM_SMARTPTR_TYPEDEF(IWMPCore2, __uuidof(IWMPCore2));
_COM_SMARTPTR_TYPEDEF(IWMPCore3, __uuidof(IWMPCore3));
_COM_SMARTPTR_TYPEDEF(IWMPPlayer4, __uuidof(IWMPPlayer4));
_COM_SMARTPTR_TYPEDEF(IWMPPlayer3, __uuidof(IWMPPlayer3));
_COM_SMARTPTR_TYPEDEF(IWMPPlayer2, __uuidof(IWMPPlayer2));
_COM_SMARTPTR_TYPEDEF(IWMPPlayer, __uuidof(IWMPPlayer));
_COM_SMARTPTR_TYPEDEF(IWMPControls2, __uuidof(IWMPControls2));
_COM_SMARTPTR_TYPEDEF(IWMPMedia2, __uuidof(IWMPMedia2));
_COM_SMARTPTR_TYPEDEF(IWMPMedia3, __uuidof(IWMPMedia3));
_COM_SMARTPTR_TYPEDEF(IWMPControls3, __uuidof(IWMPControls3));
_COM_SMARTPTR_TYPEDEF(IWMPMediaCollection2, __uuidof(IWMPMediaCollection2));
_COM_SMARTPTR_TYPEDEF(IWMPLibraryServices, __uuidof(IWMPLibraryServices));
_COM_SMARTPTR_TYPEDEF(IWMPLibrary2, __uuidof(IWMPLibrary2));
_COM_SMARTPTR_TYPEDEF(IWMPSyncDevice3, __uuidof(IWMPSyncDevice3));
_COM_SMARTPTR_TYPEDEF(IWMPPlaylistCtrl, __uuidof(IWMPPlaylistCtrl));
_COM_SMARTPTR_TYPEDEF(IWMPLibraryTreeCtrl, __uuidof(IWMPLibraryTreeCtrl));

//
// Type library items
//

enum WMPPlaylistChangeEventType
{
    wmplcUnknown = 0,
    wmplcClear = 1,
    wmplcInfoChange = 2,
    wmplcMove = 3,
    wmplcDelete = 4,
    wmplcInsert = 5,
    wmplcAppend = 6,
    wmplcPrivate = 7,
    wmplcNameChange = 8,
    wmplcMorph = 9,
    wmplcSort = 10,
    wmplcLast = 11
};

struct __declspec(uuid("19a6627b-da9e-47c1-bb23-00b5e668236a"))
IWMPEvents : IUnknown
{
    //
    // Raw methods provided by interface
    //

      virtual void __stdcall OpenStateChange (
        /*[in]*/ long NewState ) = 0;
      virtual void __stdcall PlayStateChange (
        /*[in]*/ long NewState ) = 0;
      virtual void __stdcall AudioLanguageChange (
        /*[in]*/ long LangID ) = 0;
      virtual void __stdcall StatusChange ( ) = 0;
      virtual void __stdcall ScriptCommand (
        /*[in]*/ BSTR scType,
        /*[in]*/ BSTR Param ) = 0;
      virtual void __stdcall NewStream ( ) = 0;
      virtual void __stdcall Disconnect (
        /*[in]*/ long Result ) = 0;
      virtual void __stdcall Buffering (
        /*[in]*/ VARIANT_BOOL Start ) = 0;
      virtual void __stdcall Error ( ) = 0;
      virtual void __stdcall Warning (
        /*[in]*/ long WarningType,
        /*[in]*/ long Param,
        /*[in]*/ BSTR Description ) = 0;
      virtual void __stdcall EndOfStream (
        /*[in]*/ long Result ) = 0;
      virtual void __stdcall PositionChange (
        /*[in]*/ double oldPosition,
        /*[in]*/ double newPosition ) = 0;
      virtual void __stdcall MarkerHit (
        /*[in]*/ long MarkerNum ) = 0;
      virtual void __stdcall DurationUnitChange (
        /*[in]*/ long NewDurationUnit ) = 0;
      virtual void __stdcall CdromMediaChange (
        /*[in]*/ long CdromNum ) = 0;
      virtual void __stdcall PlaylistChange (
        /*[in]*/ IDispatch * Playlist,
        /*[in]*/ enum WMPPlaylistChangeEventType change ) = 0;
      virtual void __stdcall CurrentPlaylistChange (
        /*[in]*/ enum WMPPlaylistChangeEventType change ) = 0;
      virtual void __stdcall CurrentPlaylistItemAvailable (
        /*[in]*/ BSTR bstrItemName ) = 0;
      virtual void __stdcall MediaChange (
        /*[in]*/ IDispatch * Item ) = 0;
      virtual void __stdcall CurrentMediaItemAvailable (
        /*[in]*/ BSTR bstrItemName ) = 0;
      virtual void __stdcall CurrentItemChange (
        /*[in]*/ IDispatch * pdispMedia ) = 0;
      virtual void __stdcall MediaCollectionChange ( ) = 0;
      virtual void __stdcall MediaCollectionAttributeStringAdded (
        /*[in]*/ BSTR bstrAttribName,
        /*[in]*/ BSTR bstrAttribVal ) = 0;
      virtual void __stdcall MediaCollectionAttributeStringRemoved (
        /*[in]*/ BSTR bstrAttribName,
        /*[in]*/ BSTR bstrAttribVal ) = 0;
      virtual void __stdcall MediaCollectionAttributeStringChanged (
        /*[in]*/ BSTR bstrAttribName,
        /*[in]*/ BSTR bstrOldAttribVal,
        /*[in]*/ BSTR bstrNewAttribVal ) = 0;
      virtual void __stdcall PlaylistCollectionChange ( ) = 0;
      virtual void __stdcall PlaylistCollectionPlaylistAdded (
        /*[in]*/ BSTR bstrPlaylistName ) = 0;
      virtual void __stdcall PlaylistCollectionPlaylistRemoved (
        /*[in]*/ BSTR bstrPlaylistName ) = 0;
      virtual void __stdcall PlaylistCollectionPlaylistSetAsDeleted (
        /*[in]*/ BSTR bstrPlaylistName,
        /*[in]*/ VARIANT_BOOL varfIsDeleted ) = 0;
      virtual void __stdcall ModeChange (
        /*[in]*/ BSTR ModeName,
        /*[in]*/ VARIANT_BOOL NewValue ) = 0;
      virtual void __stdcall MediaError (
        /*[in]*/ IDispatch * pMediaObject ) = 0;
      virtual void __stdcall OpenPlaylistSwitch (
        /*[in]*/ IDispatch * pItem ) = 0;
      virtual void __stdcall DomainChange (
        /*[in]*/ BSTR strDomain ) = 0;
      virtual void __stdcall SwitchedToPlayerApplication ( ) = 0;
      virtual void __stdcall SwitchedToControl ( ) = 0;
      virtual void __stdcall PlayerDockedStateChange ( ) = 0;
      virtual void __stdcall PlayerReconnect ( ) = 0;
      virtual void __stdcall Click (
        /*[in]*/ short nButton,
        /*[in]*/ short nShiftState,
        /*[in]*/ long fX,
        /*[in]*/ long fY ) = 0;
      virtual void __stdcall DoubleClick (
        /*[in]*/ short nButton,
        /*[in]*/ short nShiftState,
        /*[in]*/ long fX,
        /*[in]*/ long fY ) = 0;
      virtual void __stdcall KeyDown (
        /*[in]*/ short nKeyCode,
        /*[in]*/ short nShiftState ) = 0;
      virtual void __stdcall KeyPress (
        /*[in]*/ short nKeyAscii ) = 0;
      virtual void __stdcall KeyUp (
        /*[in]*/ short nKeyCode,
        /*[in]*/ short nShiftState ) = 0;
      virtual void __stdcall MouseDown (
        /*[in]*/ short nButton,
        /*[in]*/ short nShiftState,
        /*[in]*/ long fX,
        /*[in]*/ long fY ) = 0;
      virtual void __stdcall MouseMove (
        /*[in]*/ short nButton,
        /*[in]*/ short nShiftState,
        /*[in]*/ long fX,
        /*[in]*/ long fY ) = 0;
      virtual void __stdcall MouseUp (
        /*[in]*/ short nButton,
        /*[in]*/ short nShiftState,
        /*[in]*/ long fX,
        /*[in]*/ long fY ) = 0;
};

enum WMPDeviceStatus
{
    wmpdsUnknown = 0,
    wmpdsPartnershipExists = 1,
    wmpdsPartnershipDeclined = 2,
    wmpdsPartnershipAnother = 3,
    wmpdsManualDevice = 4,
    wmpdsNewDevice = 5,
    wmpdsLast = 6
};

enum WMPSyncState
{
    wmpssUnknown = 0,
    wmpssSynchronizing = 1,
    wmpssStopped = 2,
    wmpssEstimating = 3,
    wmpssLast = 4
};

struct __declspec(uuid("82a2986c-0293-4fd0-b279-b21b86c058be"))
IWMPSyncDevice : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetfriendlyName,put=PutfriendlyName))
    _bstr_t friendlyName;
    __declspec(property(get=GetdeviceName))
    _bstr_t deviceName;
    __declspec(property(get=GetdeviceId))
    _bstr_t deviceId;
    __declspec(property(get=GetpartnershipIndex))
    long partnershipIndex;
    __declspec(property(get=Getconnected))
    VARIANT_BOOL connected;
    __declspec(property(get=Getstatus))
    enum WMPDeviceStatus status;
    __declspec(property(get=GetsyncState))
    enum WMPSyncState syncState;
    __declspec(property(get=Getprogress))
    long progress;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetfriendlyName ( );
    void PutfriendlyName (
        _bstr_t pbstrName );
    _bstr_t GetdeviceName ( );
    _bstr_t GetdeviceId ( );
    long GetpartnershipIndex ( );
    VARIANT_BOOL Getconnected ( );
    enum WMPDeviceStatus Getstatus ( );
    enum WMPSyncState GetsyncState ( );
    long Getprogress ( );
    _bstr_t getItemInfo (
        _bstr_t bstrItemName );
    HRESULT createPartnership (
        VARIANT_BOOL vbShowUI );
    HRESULT deletePartnership ( );
    HRESULT Start ( );
    HRESULT stop ( );
    HRESULT showSettings ( );
    VARIANT_BOOL isIdentical (
        struct IWMPSyncDevice * pDevice );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_friendlyName (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall put_friendlyName (
        /*[in]*/ BSTR pbstrName ) = 0;
      virtual HRESULT __stdcall get_deviceName (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_deviceId (
        /*[out,retval]*/ BSTR * pbstrDeviceId ) = 0;
      virtual HRESULT __stdcall get_partnershipIndex (
        /*[out,retval]*/ long * plIndex ) = 0;
      virtual HRESULT __stdcall get_connected (
        /*[out,retval]*/ VARIANT_BOOL * pvbConnected ) = 0;
      virtual HRESULT __stdcall get_status (
        /*[out,retval]*/ enum WMPDeviceStatus * pwmpds ) = 0;
      virtual HRESULT __stdcall get_syncState (
        /*[out,retval]*/ enum WMPSyncState * pwmpss ) = 0;
      virtual HRESULT __stdcall get_progress (
        /*[out,retval]*/ long * plProgress ) = 0;
      virtual HRESULT __stdcall raw_getItemInfo (
        /*[in]*/ BSTR bstrItemName,
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_createPartnership (
        /*[in]*/ VARIANT_BOOL vbShowUI ) = 0;
      virtual HRESULT __stdcall raw_deletePartnership ( ) = 0;
      virtual HRESULT __stdcall raw_Start ( ) = 0;
      virtual HRESULT __stdcall raw_stop ( ) = 0;
      virtual HRESULT __stdcall raw_showSettings ( ) = 0;
      virtual HRESULT __stdcall raw_isIdentical (
        /*[in]*/ struct IWMPSyncDevice * pDevice,
        /*[out,retval]*/ VARIANT_BOOL * pvbool ) = 0;
};

struct __declspec(uuid("1e7601fa-47ea-4107-9ea9-9004ed9684ff"))
IWMPEvents2 : IWMPEvents
{
    //
    // Raw methods provided by interface
    //

      virtual void __stdcall DeviceConnect (
        /*[in]*/ struct IWMPSyncDevice * pDevice ) = 0;
      virtual void __stdcall DeviceDisconnect (
        /*[in]*/ struct IWMPSyncDevice * pDevice ) = 0;
      virtual void __stdcall DeviceStatusChange (
        /*[in]*/ struct IWMPSyncDevice * pDevice,
        /*[in]*/ enum WMPDeviceStatus NewStatus ) = 0;
      virtual void __stdcall DeviceSyncStateChange (
        /*[in]*/ struct IWMPSyncDevice * pDevice,
        /*[in]*/ enum WMPSyncState NewState ) = 0;
      virtual void __stdcall DeviceSyncError (
        /*[in]*/ struct IWMPSyncDevice * pDevice,
        /*[in]*/ IDispatch * pMedia ) = 0;
      virtual void __stdcall CreatePartnershipComplete (
        /*[in]*/ struct IWMPSyncDevice * pDevice,
        /*[in]*/ HRESULT hrResult ) = 0;
};

enum WMPRipState
{
    wmprsUnknown = 0,
    wmprsRipping = 1,
    wmprsStopped = 2
};

struct __declspec(uuid("56e2294f-69ed-4629-a869-aea72c0dcc2c"))
IWMPCdromRip : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetripState))
    enum WMPRipState ripState;
    __declspec(property(get=GetripProgress))
    long ripProgress;

    //
    // Wrapper methods for error-handling
    //

    enum WMPRipState GetripState ( );
    long GetripProgress ( );
    HRESULT startRip ( );
    HRESULT stopRip ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ripState (
        /*[out,retval]*/ enum WMPRipState * pwmprs ) = 0;
      virtual HRESULT __stdcall get_ripProgress (
        /*[out,retval]*/ long * plProgress ) = 0;
      virtual HRESULT __stdcall raw_startRip ( ) = 0;
      virtual HRESULT __stdcall raw_stopRip ( ) = 0;
};

enum WMPBurnFormat
{
    wmpbfAudioCD = 0,
    wmpbfDataCD = 1
};

enum WMPBurnState
{
    wmpbsUnknown = 0,
    wmpbsBusy = 1,
    wmpbsReady = 2,
    wmpbsWaitingForDisc = 3,
    wmpbsRefreshStatusPending = 4,
    wmpbsPreparingToBurn = 5,
    wmpbsBurning = 6,
    wmpbsStopped = 7,
    wmpbsErasing = 8,
    wmpbsDownloading = 9
};

enum WMPLibraryType
{
    wmpltUnknown = 0,
    wmpltAll = 1,
    wmpltLocal = 2,
    wmpltRemote = 3,
    wmpltDisc = 4,
    wmpltPortableDevice = 5
};

struct __declspec(uuid("4a976298-8c0d-11d3-b389-00c04f68574b"))
IWMPStringCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcount))
    long count;

    //
    // Wrapper methods for error-handling
    //

    long Getcount ( );
    _bstr_t Item (
        long lIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_count (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ BSTR * pbstrString ) = 0;
};

enum WMPFolderScanState
{
    wmpfssUnknown = 0,
    wmpfssScanning = 1,
    wmpfssUpdating = 2,
    wmpfssStopped = 3
};

enum WMPStringCollectionChangeEventType
{
    wmpsccetUnknown = 0,
    wmpsccetInsert = 1,
    wmpsccetChange = 2,
    wmpsccetDelete = 3,
    wmpsccetClear = 4,
    wmpsccetBeginUpdates = 5,
    wmpsccetEndUpdates = 6
};

struct __declspec(uuid("6bf52a51-394a-11d3-b153-00c04f79faa6"))
_WMPOCXEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OpenStateChange (
        long NewState );
    HRESULT PlayStateChange (
        long NewState );
    HRESULT AudioLanguageChange (
        long LangID );
    HRESULT StatusChange ( );
    HRESULT ScriptCommand (
        _bstr_t scType,
        _bstr_t Param );
    HRESULT NewStream ( );
    HRESULT Disconnect (
        long Result );
    HRESULT Buffering (
        VARIANT_BOOL Start );
    HRESULT Error ( );
    HRESULT Warning (
        long WarningType,
        long Param,
        _bstr_t Description );
    HRESULT EndOfStream (
        long Result );
    HRESULT PositionChange (
        double oldPosition,
        double newPosition );
    HRESULT MarkerHit (
        long MarkerNum );
    HRESULT DurationUnitChange (
        long NewDurationUnit );
    HRESULT CdromMediaChange (
        long CdromNum );
    HRESULT PlaylistChange (
        IDispatch * Playlist,
        enum WMPPlaylistChangeEventType change );
    HRESULT CurrentPlaylistChange (
        enum WMPPlaylistChangeEventType change );
    HRESULT CurrentPlaylistItemAvailable (
        _bstr_t bstrItemName );
    HRESULT MediaChange (
        IDispatch * Item );
    HRESULT CurrentMediaItemAvailable (
        _bstr_t bstrItemName );
    HRESULT CurrentItemChange (
        IDispatch * pdispMedia );
    HRESULT MediaCollectionChange ( );
    HRESULT MediaCollectionAttributeStringAdded (
        _bstr_t bstrAttribName,
        _bstr_t bstrAttribVal );
    HRESULT MediaCollectionAttributeStringRemoved (
        _bstr_t bstrAttribName,
        _bstr_t bstrAttribVal );
    HRESULT MediaCollectionAttributeStringChanged (
        _bstr_t bstrAttribName,
        _bstr_t bstrOldAttribVal,
        _bstr_t bstrNewAttribVal );
    HRESULT PlaylistCollectionChange ( );
    HRESULT PlaylistCollectionPlaylistAdded (
        _bstr_t bstrPlaylistName );
    HRESULT PlaylistCollectionPlaylistRemoved (
        _bstr_t bstrPlaylistName );
    HRESULT PlaylistCollectionPlaylistSetAsDeleted (
        _bstr_t bstrPlaylistName,
        VARIANT_BOOL varfIsDeleted );
    HRESULT ModeChange (
        _bstr_t ModeName,
        VARIANT_BOOL NewValue );
    HRESULT MediaError (
        IDispatch * pMediaObject );
    HRESULT OpenPlaylistSwitch (
        IDispatch * pItem );
    HRESULT DomainChange (
        _bstr_t strDomain );
    HRESULT SwitchedToPlayerApplication ( );
    HRESULT SwitchedToControl ( );
    HRESULT PlayerDockedStateChange ( );
    HRESULT PlayerReconnect ( );
    HRESULT Click (
        short nButton,
        short nShiftState,
        long fX,
        long fY );
    HRESULT DoubleClick (
        short nButton,
        short nShiftState,
        long fX,
        long fY );
    HRESULT KeyDown (
        short nKeyCode,
        short nShiftState );
    HRESULT KeyPress (
        short nKeyAscii );
    HRESULT KeyUp (
        short nKeyCode,
        short nShiftState );
    HRESULT MouseDown (
        short nButton,
        short nShiftState,
        long fX,
        long fY );
    HRESULT MouseMove (
        short nButton,
        short nShiftState,
        long fX,
        long fY );
    HRESULT MouseUp (
        short nButton,
        short nShiftState,
        long fX,
        long fY );
    HRESULT DeviceConnect (
        struct IWMPSyncDevice * pDevice );
    HRESULT DeviceDisconnect (
        struct IWMPSyncDevice * pDevice );
    HRESULT DeviceStatusChange (
        struct IWMPSyncDevice * pDevice,
        enum WMPDeviceStatus NewStatus );
    HRESULT DeviceSyncStateChange (
        struct IWMPSyncDevice * pDevice,
        enum WMPSyncState NewState );
    HRESULT DeviceSyncError (
        struct IWMPSyncDevice * pDevice,
        IDispatch * pMedia );
    HRESULT CreatePartnershipComplete (
        struct IWMPSyncDevice * pDevice,
        HRESULT hrResult );
    HRESULT DeviceEstimation (
        struct IWMPSyncDevice * pDevice,
        HRESULT hrResult,
        __int64 qwEstimatedUsedSpace,
        __int64 qwEstimatedSpace );
    HRESULT CdromRipStateChange (
        struct IWMPCdromRip * pCdromRip,
        enum WMPRipState wmprs );
    HRESULT CdromRipMediaError (
        struct IWMPCdromRip * pCdromRip,
        IDispatch * pMedia );
    HRESULT CdromBurnStateChange (
        struct IWMPCdromBurn * pCdromBurn,
        enum WMPBurnState wmpbs );
    HRESULT CdromBurnMediaError (
        struct IWMPCdromBurn * pCdromBurn,
        IDispatch * pMedia );
    HRESULT CdromBurnError (
        struct IWMPCdromBurn * pCdromBurn,
        HRESULT hrError );
    HRESULT LibraryConnect (
        struct IWMPLibrary * pLibrary );
    HRESULT LibraryDisconnect (
        struct IWMPLibrary * pLibrary );
    HRESULT FolderScanStateChange (
        enum WMPFolderScanState wmpfss );
    HRESULT StringCollectionChange (
        IDispatch * pdispStringCollection,
        enum WMPStringCollectionChangeEventType change,
        long lCollectionIndex );
    HRESULT MediaCollectionMediaAdded (
        IDispatch * pdispMedia );
    HRESULT MediaCollectionMediaRemoved (
        IDispatch * pdispMedia );
};

struct __declspec(uuid("6bf52a52-394a-11d3-b153-00c04f79faa6"))
WindowsMediaPlayer;
    // [ default ] interface IWMPPlayer4
    // interface IWMPPlayer3
    // interface IWMPPlayer2
    // interface IWMPPlayer
    // interface IWMPControls
    // interface IWMPSettings
    // interface IWMPPlaylist
    // interface IWMPMedia
    // interface IWMPMediaCollection
    // interface IWMPPlaylistCollection
    // interface IWMPCdromCollection
    // interface IWMPError
    // interface IWMPErrorItem
    // interface IWMPErrorItem2
    // interface IWMPClosedCaption
    // interface IWMPDVD
    // interface IWMPControls2
    // interface IWMPMedia2
    // interface IWMPMedia3
    // interface IWMPMetadataPicture
    // interface IWMPMetadataText
    // interface IWMPSettings2
    // interface IWMPControls3
    // interface IWMPClosedCaption2
    // interface IWMPMediaCollection2
    // interface IWMPStringCollection2
    // [ default, source ] dispinterface _WMPOCXEvents

enum WMPOpenState
{
    wmposUndefined = 0,
    wmposPlaylistChanging = 1,
    wmposPlaylistLocating = 2,
    wmposPlaylistConnecting = 3,
    wmposPlaylistLoading = 4,
    wmposPlaylistOpening = 5,
    wmposPlaylistOpenNoMedia = 6,
    wmposPlaylistChanged = 7,
    wmposMediaChanging = 8,
    wmposMediaLocating = 9,
    wmposMediaConnecting = 10,
    wmposMediaLoading = 11,
    wmposMediaOpening = 12,
    wmposMediaOpen = 13,
    wmposBeginCodecAcquisition = 14,
    wmposEndCodecAcquisition = 15,
    wmposBeginLicenseAcquisition = 16,
    wmposEndLicenseAcquisition = 17,
    wmposBeginIndividualization = 18,
    wmposEndIndividualization = 19,
    wmposMediaWaiting = 20,
    wmposOpeningUnknownURL = 21
};

enum WMPPlayState
{
    wmppsUndefined = 0,
    wmppsStopped = 1,
    wmppsPaused = 2,
    wmppsPlaying = 3,
    wmppsScanForward = 4,
    wmppsScanReverse = 5,
    wmppsBuffering = 6,
    wmppsWaiting = 7,
    wmppsMediaEnded = 8,
    wmppsTransitioning = 9,
    wmppsReady = 10,
    wmppsReconnecting = 11,
    wmppsLast = 12
};

struct __declspec(uuid("9104d1ab-80c9-4fed-abf0-2e6417a6df14"))
IWMPSettings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetautoStart,put=PutautoStart))
    VARIANT_BOOL autoStart;
    __declspec(property(get=Getbalance,put=Putbalance))
    long balance;
    __declspec(property(get=GetinvokeURLs,put=PutinvokeURLs))
    VARIANT_BOOL invokeURLs;
    __declspec(property(get=Getmute,put=Putmute))
    VARIANT_BOOL mute;
    __declspec(property(get=GetplayCount,put=PutplayCount))
    long playCount;
    __declspec(property(get=Getrate,put=Putrate))
    double rate;
    __declspec(property(get=Getvolume,put=Putvolume))
    long volume;
    __declspec(property(get=GetbaseURL,put=PutbaseURL))
    _bstr_t baseURL;
    __declspec(property(get=GetdefaultFrame,put=PutdefaultFrame))
    _bstr_t defaultFrame;
    __declspec(property(get=GetenableErrorDialogs,put=PutenableErrorDialogs))
    VARIANT_BOOL enableErrorDialogs;
    __declspec(property(get=GetisAvailable))
    VARIANT_BOOL isAvailable[];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetisAvailable (
        _bstr_t bstrItem );
    VARIANT_BOOL GetautoStart ( );
    void PutautoStart (
        VARIANT_BOOL pfAutoStart );
    _bstr_t GetbaseURL ( );
    void PutbaseURL (
        _bstr_t pbstrBaseURL );
    _bstr_t GetdefaultFrame ( );
    void PutdefaultFrame (
        _bstr_t pbstrDefaultFrame );
    VARIANT_BOOL GetinvokeURLs ( );
    void PutinvokeURLs (
        VARIANT_BOOL pfInvokeURLs );
    VARIANT_BOOL Getmute ( );
    void Putmute (
        VARIANT_BOOL pfMute );
    long GetplayCount ( );
    void PutplayCount (
        long plCount );
    double Getrate ( );
    void Putrate (
        double pdRate );
    long Getbalance ( );
    void Putbalance (
        long plBalance );
    long Getvolume ( );
    void Putvolume (
        long plVolume );
    VARIANT_BOOL getMode (
        _bstr_t bstrMode );
    HRESULT setMode (
        _bstr_t bstrMode,
        VARIANT_BOOL varfMode );
    VARIANT_BOOL GetenableErrorDialogs ( );
    void PutenableErrorDialogs (
        VARIANT_BOOL pfEnableErrorDialogs );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_isAvailable (
        /*[in]*/ BSTR bstrItem,
        /*[out,retval]*/ VARIANT_BOOL * pIsAvailable ) = 0;
      virtual HRESULT __stdcall get_autoStart (
        /*[out,retval]*/ VARIANT_BOOL * pfAutoStart ) = 0;
      virtual HRESULT __stdcall put_autoStart (
        /*[in]*/ VARIANT_BOOL pfAutoStart ) = 0;
      virtual HRESULT __stdcall get_baseURL (
        /*[out,retval]*/ BSTR * pbstrBaseURL ) = 0;
      virtual HRESULT __stdcall put_baseURL (
        /*[in]*/ BSTR pbstrBaseURL ) = 0;
      virtual HRESULT __stdcall get_defaultFrame (
        /*[out,retval]*/ BSTR * pbstrDefaultFrame ) = 0;
      virtual HRESULT __stdcall put_defaultFrame (
        /*[in]*/ BSTR pbstrDefaultFrame ) = 0;
      virtual HRESULT __stdcall get_invokeURLs (
        /*[out,retval]*/ VARIANT_BOOL * pfInvokeURLs ) = 0;
      virtual HRESULT __stdcall put_invokeURLs (
        /*[in]*/ VARIANT_BOOL pfInvokeURLs ) = 0;
      virtual HRESULT __stdcall get_mute (
        /*[out,retval]*/ VARIANT_BOOL * pfMute ) = 0;
      virtual HRESULT __stdcall put_mute (
        /*[in]*/ VARIANT_BOOL pfMute ) = 0;
      virtual HRESULT __stdcall get_playCount (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall put_playCount (
        /*[in]*/ long plCount ) = 0;
      virtual HRESULT __stdcall get_rate (
        /*[out,retval]*/ double * pdRate ) = 0;
      virtual HRESULT __stdcall put_rate (
        /*[in]*/ double pdRate ) = 0;
      virtual HRESULT __stdcall get_balance (
        /*[out,retval]*/ long * plBalance ) = 0;
      virtual HRESULT __stdcall put_balance (
        /*[in]*/ long plBalance ) = 0;
      virtual HRESULT __stdcall get_volume (
        /*[out,retval]*/ long * plVolume ) = 0;
      virtual HRESULT __stdcall put_volume (
        /*[in]*/ long plVolume ) = 0;
      virtual HRESULT __stdcall raw_getMode (
        /*[in]*/ BSTR bstrMode,
        /*[out,retval]*/ VARIANT_BOOL * pvarfMode ) = 0;
      virtual HRESULT __stdcall raw_setMode (
        /*[in]*/ BSTR bstrMode,
        /*[in]*/ VARIANT_BOOL varfMode ) = 0;
      virtual HRESULT __stdcall get_enableErrorDialogs (
        /*[out,retval]*/ VARIANT_BOOL * pfEnableErrorDialogs ) = 0;
      virtual HRESULT __stdcall put_enableErrorDialogs (
        /*[in]*/ VARIANT_BOOL pfEnableErrorDialogs ) = 0;
};

struct __declspec(uuid("ec21b779-edef-462d-bba4-ad9dde2b29a7"))
IWMPNetwork : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetbandWidth))
    long bandWidth;
    __declspec(property(get=GetrecoveredPackets))
    long recoveredPackets;
    __declspec(property(get=GetsourceProtocol))
    _bstr_t sourceProtocol;
    __declspec(property(get=GetreceivedPackets))
    long receivedPackets;
    __declspec(property(get=GetlostPackets))
    long lostPackets;
    __declspec(property(get=GetreceptionQuality))
    long receptionQuality;
    __declspec(property(get=GetbufferingCount))
    long bufferingCount;
    __declspec(property(get=GetbufferingProgress))
    long bufferingProgress;
    __declspec(property(get=GetbufferingTime,put=PutbufferingTime))
    long bufferingTime;
    __declspec(property(get=GetframeRate))
    long frameRate;
    __declspec(property(get=GetmaxBitRate))
    long maxBitRate;
    __declspec(property(get=GetbitRate))
    long bitRate;
    __declspec(property(get=GetmaxBandwidth,put=PutmaxBandwidth))
    long maxBandwidth;
    __declspec(property(get=GetdownloadProgress))
    long downloadProgress;
    __declspec(property(get=GetencodedFrameRate))
    long encodedFrameRate;
    __declspec(property(get=GetframesSkipped))
    long framesSkipped;

    //
    // Wrapper methods for error-handling
    //

    long GetbandWidth ( );
    long GetrecoveredPackets ( );
    _bstr_t GetsourceProtocol ( );
    long GetreceivedPackets ( );
    long GetlostPackets ( );
    long GetreceptionQuality ( );
    long GetbufferingCount ( );
    long GetbufferingProgress ( );
    long GetbufferingTime ( );
    void PutbufferingTime (
        long plBufferingTime );
    long GetframeRate ( );
    long GetmaxBitRate ( );
    long GetbitRate ( );
    long getProxySettings (
        _bstr_t bstrProtocol );
    HRESULT setProxySettings (
        _bstr_t bstrProtocol,
        long lProxySetting );
    _bstr_t getProxyName (
        _bstr_t bstrProtocol );
    HRESULT setProxyName (
        _bstr_t bstrProtocol,
        _bstr_t bstrProxyName );
    long getProxyPort (
        _bstr_t bstrProtocol );
    HRESULT setProxyPort (
        _bstr_t bstrProtocol,
        long lProxyPort );
    _bstr_t getProxyExceptionList (
        _bstr_t bstrProtocol );
    HRESULT setProxyExceptionList (
        _bstr_t bstrProtocol,
        _bstr_t pbstrExceptionList );
    VARIANT_BOOL getProxyBypassForLocal (
        _bstr_t bstrProtocol );
    HRESULT setProxyBypassForLocal (
        _bstr_t bstrProtocol,
        VARIANT_BOOL fBypassForLocal );
    long GetmaxBandwidth ( );
    void PutmaxBandwidth (
        long lMaxBandwidth );
    long GetdownloadProgress ( );
    long GetencodedFrameRate ( );
    long GetframesSkipped ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_bandWidth (
        /*[out,retval]*/ long * plBandwidth ) = 0;
      virtual HRESULT __stdcall get_recoveredPackets (
        /*[out,retval]*/ long * plRecoveredPackets ) = 0;
      virtual HRESULT __stdcall get_sourceProtocol (
        /*[out,retval]*/ BSTR * pbstrSourceProtocol ) = 0;
      virtual HRESULT __stdcall get_receivedPackets (
        /*[out,retval]*/ long * plReceivedPackets ) = 0;
      virtual HRESULT __stdcall get_lostPackets (
        /*[out,retval]*/ long * plLostPackets ) = 0;
      virtual HRESULT __stdcall get_receptionQuality (
        /*[out,retval]*/ long * plReceptionQuality ) = 0;
      virtual HRESULT __stdcall get_bufferingCount (
        /*[out,retval]*/ long * plBufferingCount ) = 0;
      virtual HRESULT __stdcall get_bufferingProgress (
        /*[out,retval]*/ long * plBufferingProgress ) = 0;
      virtual HRESULT __stdcall get_bufferingTime (
        /*[out,retval]*/ long * plBufferingTime ) = 0;
      virtual HRESULT __stdcall put_bufferingTime (
        /*[in]*/ long plBufferingTime ) = 0;
      virtual HRESULT __stdcall get_frameRate (
        /*[out,retval]*/ long * plFrameRate ) = 0;
      virtual HRESULT __stdcall get_maxBitRate (
        /*[out,retval]*/ long * plBitRate ) = 0;
      virtual HRESULT __stdcall get_bitRate (
        /*[out,retval]*/ long * plBitRate ) = 0;
      virtual HRESULT __stdcall raw_getProxySettings (
        /*[in]*/ BSTR bstrProtocol,
        /*[out,retval]*/ long * plProxySetting ) = 0;
      virtual HRESULT __stdcall raw_setProxySettings (
        /*[in]*/ BSTR bstrProtocol,
        /*[in]*/ long lProxySetting ) = 0;
      virtual HRESULT __stdcall raw_getProxyName (
        /*[in]*/ BSTR bstrProtocol,
        /*[out,retval]*/ BSTR * pbstrProxyName ) = 0;
      virtual HRESULT __stdcall raw_setProxyName (
        /*[in]*/ BSTR bstrProtocol,
        /*[in]*/ BSTR bstrProxyName ) = 0;
      virtual HRESULT __stdcall raw_getProxyPort (
        /*[in]*/ BSTR bstrProtocol,
        /*[out,retval]*/ long * lProxyPort ) = 0;
      virtual HRESULT __stdcall raw_setProxyPort (
        /*[in]*/ BSTR bstrProtocol,
        /*[in]*/ long lProxyPort ) = 0;
      virtual HRESULT __stdcall raw_getProxyExceptionList (
        /*[in]*/ BSTR bstrProtocol,
        /*[out,retval]*/ BSTR * pbstrExceptionList ) = 0;
      virtual HRESULT __stdcall raw_setProxyExceptionList (
        /*[in]*/ BSTR bstrProtocol,
        /*[in]*/ BSTR pbstrExceptionList ) = 0;
      virtual HRESULT __stdcall raw_getProxyBypassForLocal (
        /*[in]*/ BSTR bstrProtocol,
        /*[out,retval]*/ VARIANT_BOOL * pfBypassForLocal ) = 0;
      virtual HRESULT __stdcall raw_setProxyBypassForLocal (
        /*[in]*/ BSTR bstrProtocol,
        /*[in]*/ VARIANT_BOOL fBypassForLocal ) = 0;
      virtual HRESULT __stdcall get_maxBandwidth (
        /*[out,retval]*/ long * lMaxBandwidth ) = 0;
      virtual HRESULT __stdcall put_maxBandwidth (
        /*[in]*/ long lMaxBandwidth ) = 0;
      virtual HRESULT __stdcall get_downloadProgress (
        /*[out,retval]*/ long * plDownloadProgress ) = 0;
      virtual HRESULT __stdcall get_encodedFrameRate (
        /*[out,retval]*/ long * plFrameRate ) = 0;
      virtual HRESULT __stdcall get_framesSkipped (
        /*[out,retval]*/ long * plFrames ) = 0;
};

struct __declspec(uuid("4f2df574-c588-11d3-9ed0-00c04fb6e937"))
IWMPClosedCaption : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSAMIStyle,put=PutSAMIStyle))
    _bstr_t SAMIStyle;
    __declspec(property(get=GetSAMILang,put=PutSAMILang))
    _bstr_t SAMILang;
    __declspec(property(get=GetSAMIFileName,put=PutSAMIFileName))
    _bstr_t SAMIFileName;
    __declspec(property(get=GetcaptioningId,put=PutcaptioningId))
    _bstr_t captioningId;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSAMIStyle ( );
    void PutSAMIStyle (
        _bstr_t pbstrSAMIStyle );
    _bstr_t GetSAMILang ( );
    void PutSAMILang (
        _bstr_t pbstrSAMILang );
    _bstr_t GetSAMIFileName ( );
    void PutSAMIFileName (
        _bstr_t pbstrSAMIFileName );
    _bstr_t GetcaptioningId ( );
    void PutcaptioningId (
        _bstr_t pbstrCaptioningID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SAMIStyle (
        /*[out,retval]*/ BSTR * pbstrSAMIStyle ) = 0;
      virtual HRESULT __stdcall put_SAMIStyle (
        /*[in]*/ BSTR pbstrSAMIStyle ) = 0;
      virtual HRESULT __stdcall get_SAMILang (
        /*[out,retval]*/ BSTR * pbstrSAMILang ) = 0;
      virtual HRESULT __stdcall put_SAMILang (
        /*[in]*/ BSTR pbstrSAMILang ) = 0;
      virtual HRESULT __stdcall get_SAMIFileName (
        /*[out,retval]*/ BSTR * pbstrSAMIFileName ) = 0;
      virtual HRESULT __stdcall put_SAMIFileName (
        /*[in]*/ BSTR pbstrSAMIFileName ) = 0;
      virtual HRESULT __stdcall get_captioningId (
        /*[out,retval]*/ BSTR * pbstrCaptioningID ) = 0;
      virtual HRESULT __stdcall put_captioningId (
        /*[in]*/ BSTR pbstrCaptioningID ) = 0;
};

struct __declspec(uuid("3614c646-3b3b-4de7-a81e-930e3f2127b3"))
IWMPErrorItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GeterrorCode))
    long errorCode;
    __declspec(property(get=GeterrorDescription))
    _bstr_t errorDescription;
    __declspec(property(get=GeterrorContext))
    _variant_t errorContext;
    __declspec(property(get=Getremedy))
    long remedy;
    __declspec(property(get=GetcustomUrl))
    _bstr_t customUrl;

    //
    // Wrapper methods for error-handling
    //

    long GeterrorCode ( );
    _bstr_t GeterrorDescription ( );
    _variant_t GeterrorContext ( );
    long Getremedy ( );
    _bstr_t GetcustomUrl ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_errorCode (
        /*[out,retval]*/ long * phr ) = 0;
      virtual HRESULT __stdcall get_errorDescription (
        /*[out,retval]*/ BSTR * pbstrDescription ) = 0;
      virtual HRESULT __stdcall get_errorContext (
        /*[out,retval]*/ VARIANT * pvarContext ) = 0;
      virtual HRESULT __stdcall get_remedy (
        /*[out,retval]*/ long * plRemedy ) = 0;
      virtual HRESULT __stdcall get_customUrl (
        /*[out,retval]*/ BSTR * pbstrCustomUrl ) = 0;
};

struct __declspec(uuid("a12dcf7d-14ab-4c1b-a8cd-63909f06025b"))
IWMPError : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GeterrorCount))
    long errorCount;
    __declspec(property(get=GetItem))
    IWMPErrorItemPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    HRESULT clearErrorQueue ( );
    long GeterrorCount ( );
    IWMPErrorItemPtr GetItem (
        long dwIndex );
    HRESULT webHelp ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_clearErrorQueue ( ) = 0;
      virtual HRESULT __stdcall get_errorCount (
        /*[out,retval]*/ long * plNumErrors ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long dwIndex,
        /*[out,retval]*/ struct IWMPErrorItem * * ppErrorItem ) = 0;
      virtual HRESULT __stdcall raw_webHelp ( ) = 0;
};

struct __declspec(uuid("8da61686-4668-4a5c-ae5d-803193293dbe"))
IWMPDVD : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetisAvailable))
    VARIANT_BOOL isAvailable[];
    __declspec(property(get=Getdomain))
    _bstr_t domain;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetisAvailable (
        _bstr_t bstrItem );
    _bstr_t Getdomain ( );
    HRESULT topMenu ( );
    HRESULT titleMenu ( );
    HRESULT back ( );
    HRESULT resume ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_isAvailable (
        /*[in]*/ BSTR bstrItem,
        /*[out,retval]*/ VARIANT_BOOL * pIsAvailable ) = 0;
      virtual HRESULT __stdcall get_domain (
        /*[out,retval]*/ BSTR * strDomain ) = 0;
      virtual HRESULT __stdcall raw_topMenu ( ) = 0;
      virtual HRESULT __stdcall raw_titleMenu ( ) = 0;
      virtual HRESULT __stdcall raw_back ( ) = 0;
      virtual HRESULT __stdcall raw_resume ( ) = 0;
};

struct __declspec(uuid("40897764-ceab-47be-ad4a-8e28537f9bbf"))
IWMPPlayerApplication : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetplayerDocked))
    VARIANT_BOOL playerDocked;
    __declspec(property(get=GethasDisplay))
    VARIANT_BOOL hasDisplay;

    //
    // Wrapper methods for error-handling
    //

    HRESULT switchToPlayerApplication ( );
    HRESULT switchToControl ( );
    VARIANT_BOOL GetplayerDocked ( );
    VARIANT_BOOL GethasDisplay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_switchToPlayerApplication ( ) = 0;
      virtual HRESULT __stdcall raw_switchToControl ( ) = 0;
      virtual HRESULT __stdcall get_playerDocked (
        /*[out,retval]*/ VARIANT_BOOL * pbPlayerDocked ) = 0;
      virtual HRESULT __stdcall get_hasDisplay (
        /*[out,retval]*/ VARIANT_BOOL * pbHasDisplay ) = 0;
};

struct __declspec(uuid("f75ccec0-c67c-475c-931e-8719870bee7d"))
IWMPErrorItem2 : IWMPErrorItem
{
    //
    // Property data
    //

    __declspec(property(get=Getcondition))
    long condition;

    //
    // Wrapper methods for error-handling
    //

    long Getcondition ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_condition (
        /*[out,retval]*/ long * plCondition ) = 0;
};

struct __declspec(uuid("5c29bbe0-f87d-4c45-aa28-a70f0230ffa9"))
IWMPMetadataPicture : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetmimeType))
    _bstr_t mimeType;
    __declspec(property(get=GetpictureType))
    _bstr_t pictureType;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetURL))
    _bstr_t URL;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetmimeType ( );
    _bstr_t GetpictureType ( );
    _bstr_t GetDescription ( );
    _bstr_t GetURL ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_mimeType (
        /*[out,retval]*/ BSTR * pbstrMimeType ) = 0;
      virtual HRESULT __stdcall get_pictureType (
        /*[out,retval]*/ BSTR * pbstrPictureType ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pbstrDescription ) = 0;
      virtual HRESULT __stdcall get_URL (
        /*[out,retval]*/ BSTR * pbstrURL ) = 0;
};

struct __declspec(uuid("769a72db-13d2-45e2-9c48-53ca9d5b7450"))
IWMPMetadataText : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=Gettext))
    _bstr_t text;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetDescription ( );
    _bstr_t Gettext ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * pbstrDescription ) = 0;
      virtual HRESULT __stdcall get_text (
        /*[out,retval]*/ BSTR * pbstrText ) = 0;
};

struct __declspec(uuid("fda937a4-eece-4da5-a0b6-39bf89ade2c2"))
IWMPSettings2 : IWMPSettings
{
    //
    // Property data
    //

    __declspec(property(get=GetdefaultAudioLanguage))
    long defaultAudioLanguage;
    __declspec(property(get=GetmediaAccessRights))
    _bstr_t mediaAccessRights;

    //
    // Wrapper methods for error-handling
    //

    long GetdefaultAudioLanguage ( );
    _bstr_t GetmediaAccessRights ( );
    VARIANT_BOOL requestMediaAccessRights (
        _bstr_t bstrDesiredAccess );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_defaultAudioLanguage (
        /*[out,retval]*/ long * plLangID ) = 0;
      virtual HRESULT __stdcall get_mediaAccessRights (
        /*[out,retval]*/ BSTR * pbstrRights ) = 0;
      virtual HRESULT __stdcall raw_requestMediaAccessRights (
        /*[in]*/ BSTR bstrDesiredAccess,
        /*[out,retval]*/ VARIANT_BOOL * pvbAccepted ) = 0;
};

struct __declspec(uuid("350ba78b-6bc8-4113-a5f5-312056934eb6"))
IWMPClosedCaption2 : IWMPClosedCaption
{
    //
    // Property data
    //

    __declspec(property(get=GetSAMILangCount))
    long SAMILangCount;
    __declspec(property(get=GetSAMIStyleCount))
    long SAMIStyleCount;

    //
    // Wrapper methods for error-handling
    //

    long GetSAMILangCount ( );
    _bstr_t getSAMILangName (
        long nIndex );
    long getSAMILangID (
        long nIndex );
    long GetSAMIStyleCount ( );
    _bstr_t getSAMIStyleName (
        long nIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SAMILangCount (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_getSAMILangName (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall raw_getSAMILangID (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ long * plLangID ) = 0;
      virtual HRESULT __stdcall get_SAMIStyleCount (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_getSAMIStyleName (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
};

struct __declspec(uuid("a00918f3-a6b0-4bfb-9189-fd834c7bc5a5"))
IWMPQuery : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT addCondition (
        _bstr_t bstrAttribute,
        _bstr_t bstrOperator,
        _bstr_t bstrValue );
    HRESULT beginNextGroup ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_addCondition (
        /*[in]*/ BSTR bstrAttribute,
        /*[in]*/ BSTR bstrOperator,
        /*[in]*/ BSTR bstrValue ) = 0;
      virtual HRESULT __stdcall raw_beginNextGroup ( ) = 0;
};

struct __declspec(uuid("46ad648d-53f1-4a74-92e2-2a1b68d63fd4"))
IWMPStringCollection2 : IWMPStringCollection
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL isIdentical (
        struct IWMPStringCollection2 * pIWMPStringCollection2 );
    _bstr_t getItemInfo (
        long lCollectionIndex,
        _bstr_t bstrItemName );
    long getAttributeCountByType (
        long lCollectionIndex,
        _bstr_t bstrType,
        _bstr_t bstrLanguage );
    _variant_t getItemInfoByType (
        long lCollectionIndex,
        _bstr_t bstrType,
        _bstr_t bstrLanguage,
        long lAttributeIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_isIdentical (
        /*[in]*/ struct IWMPStringCollection2 * pIWMPStringCollection2,
        /*[out,retval]*/ VARIANT_BOOL * pvbool ) = 0;
      virtual HRESULT __stdcall raw_getItemInfo (
        /*[in]*/ long lCollectionIndex,
        /*[in]*/ BSTR bstrItemName,
        /*[out,retval]*/ BSTR * pbstrValue ) = 0;
      virtual HRESULT __stdcall raw_getAttributeCountByType (
        /*[in]*/ long lCollectionIndex,
        /*[in]*/ BSTR bstrType,
        /*[in]*/ BSTR bstrLanguage,
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_getItemInfoByType (
        /*[in]*/ long lCollectionIndex,
        /*[in]*/ BSTR bstrType,
        /*[in]*/ BSTR bstrLanguage,
        /*[in]*/ long lAttributeIndex,
        /*[out,retval]*/ VARIANT * pvarValue ) = 0;
};

struct __declspec(uuid("1d01fbdb-ade2-4c8d-9842-c190b95c3306"))
IWMPPlayerServices : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT activateUIPlugin (
        _bstr_t bstrPlugin );
    HRESULT setTaskPane (
        _bstr_t bstrTaskPane );
    HRESULT setTaskPaneURL (
        _bstr_t bstrTaskPane,
        _bstr_t bstrURL,
        _bstr_t bstrFriendlyName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_activateUIPlugin (
        /*[in]*/ BSTR bstrPlugin ) = 0;
      virtual HRESULT __stdcall raw_setTaskPane (
        /*[in]*/ BSTR bstrTaskPane ) = 0;
      virtual HRESULT __stdcall raw_setTaskPaneURL (
        /*[in]*/ BSTR bstrTaskPane,
        /*[in]*/ BSTR bstrURL,
        /*[in]*/ BSTR bstrFriendlyName ) = 0;
};

struct __declspec(uuid("1bb1592f-f040-418a-9f71-17c7512b4d70"))
IWMPPlayerServices2 : IWMPPlayerServices
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setBackgroundProcessingPriority (
        _bstr_t bstrPriority );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setBackgroundProcessingPriority (
        /*[in]*/ BSTR bstrPriority ) = 0;
};

struct __declspec(uuid("cbb92747-741f-44fe-ab5b-f1a48f3b2a59"))
IWMPRemoteMediaServices : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetServiceType (
        BSTR * pbstrType );
    HRESULT GetApplicationName (
        BSTR * pbstrName );
    HRESULT GetScriptableObject (
        BSTR * pbstrName,
        IDispatch * * ppDispatch );
    HRESULT GetCustomUIMode (
        BSTR * pbstrFile );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetServiceType (
        /*[out]*/ BSTR * pbstrType ) = 0;
      virtual HRESULT __stdcall raw_GetApplicationName (
        /*[out]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall raw_GetScriptableObject (
        /*[out]*/ BSTR * pbstrName,
        /*[out]*/ IDispatch * * ppDispatch ) = 0;
      virtual HRESULT __stdcall raw_GetCustomUIMode (
        /*[out]*/ BSTR * pbstrFile ) = 0;
};

struct __declspec(uuid("8b5050ff-e0a4-4808-b3a8-893a9e1ed894"))
IWMPSyncServices : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetdeviceCount))
    long deviceCount;

    //
    // Wrapper methods for error-handling
    //

    long GetdeviceCount ( );
    IWMPSyncDevicePtr getDevice (
        long lIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_deviceCount (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_getDevice (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct IWMPSyncDevice * * ppDevice ) = 0;
};

struct __declspec(uuid("82cba86b-9f04-474b-a365-d6dd1466e541"))
IWMPLibrarySharingServices : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL isLibraryShared ( );
    VARIANT_BOOL isLibrarySharingEnabled ( );
    HRESULT showLibrarySharing ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_isLibraryShared (
        /*[out,retval]*/ VARIANT_BOOL * pvbShared ) = 0;
      virtual HRESULT __stdcall raw_isLibrarySharingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pvbEnabled ) = 0;
      virtual HRESULT __stdcall raw_showLibrarySharing ( ) = 0;
};

struct __declspec(uuid("788c8743-e57f-439d-a468-5bc77f2e59c6"))
IWMPFolderMonitorServices : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=Getcount))
    long count;
    __declspec(property(get=GetscanState))
    enum WMPFolderScanState scanState;
    __declspec(property(get=GetcurrentFolder))
    _bstr_t currentFolder;
    __declspec(property(get=GetscannedFilesCount))
    long scannedFilesCount;
    __declspec(property(get=GetaddedFilesCount))
    long addedFilesCount;
    __declspec(property(get=GetupdateProgress))
    long updateProgress;

    //
    // Wrapper methods for error-handling
    //

    long Getcount ( );
    _bstr_t Item (
        long lIndex );
    HRESULT add (
        _bstr_t bstrFolder );
    HRESULT remove (
        long lIndex );
    enum WMPFolderScanState GetscanState ( );
    _bstr_t GetcurrentFolder ( );
    long GetscannedFilesCount ( );
    long GetaddedFilesCount ( );
    long GetupdateProgress ( );
    HRESULT startScan ( );
    HRESULT stopScan ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_count (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ BSTR * pbstrFolder ) = 0;
      virtual HRESULT __stdcall raw_add (
        /*[in]*/ BSTR bstrFolder ) = 0;
      virtual HRESULT __stdcall raw_remove (
        /*[in]*/ long lIndex ) = 0;
      virtual HRESULT __stdcall get_scanState (
        /*[out,retval]*/ enum WMPFolderScanState * pwmpfss ) = 0;
      virtual HRESULT __stdcall get_currentFolder (
        /*[out,retval]*/ BSTR * pbstrFolder ) = 0;
      virtual HRESULT __stdcall get_scannedFilesCount (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall get_addedFilesCount (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall get_updateProgress (
        /*[out,retval]*/ long * plProgress ) = 0;
      virtual HRESULT __stdcall raw_startScan ( ) = 0;
      virtual HRESULT __stdcall raw_stopScan ( ) = 0;
};

struct __declspec(uuid("88afb4b2-140a-44d2-91e6-4543da467cd1"))
IWMPSyncDevice2 : IWMPSyncDevice
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT setItemInfo (
        _bstr_t bstrItemName,
        _bstr_t bstrVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setItemInfo (
        /*[in]*/ BSTR bstrItemName,
        /*[in]*/ BSTR bstrVal ) = 0;
};

struct __declspec(uuid("e41c88dd-2364-4ff7-a0f5-ca9859af783f"))
IAppDispatch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getheight,put=Putheight))
    long height;
    __declspec(property(get=GetnavigatePreviousEnabled))
    VARIANT_BOOL navigatePreviousEnabled;
    __declspec(property(get=GetnavigateNextEnabled))
    VARIANT_BOOL navigateNextEnabled;
    __declspec(property(get=GetpowerPersonality))
    _bstr_t powerPersonality;
    __declspec(property(get=GetexclusiveService))
    _bstr_t exclusiveService;
    __declspec(property(get=GetglassEnabled))
    VARIANT_BOOL glassEnabled;
    __declspec(property(get=GetserviceLoginVisible))
    VARIANT_BOOL serviceLoginVisible;
    __declspec(property(get=GetserviceLoginSignedIn))
    VARIANT_BOOL serviceLoginSignedIn;
    __declspec(property(get=GetinVistaPlus))
    VARIANT_BOOL inVistaPlus;
    __declspec(property(get=GetmenubarCurrentlyVisible))
    VARIANT_BOOL menubarCurrentlyVisible;
    __declspec(property(put=PutwindowText))
    _bstr_t windowText;
    __declspec(property(get=GetplayLibraryItemEnabled))
    VARIANT_BOOL playLibraryItemEnabled;
    __declspec(property(get=GetserviceGetInfo))
    _variant_t serviceGetInfo[];
    __declspec(property(get=GetfullScreenEnabled))
    VARIANT_BOOL fullScreenEnabled;
    __declspec(property(get=GetlibraryBasketMode,put=PutlibraryBasketMode))
    long libraryBasketMode;
    __declspec(property(get=GetlibraryBasketWidth))
    long libraryBasketWidth;
    __declspec(property(get=GetbreadcrumbItemCount))
    long breadcrumbItemCount;
    __declspec(property(get=GetbreadcrumbItemName))
    _bstr_t breadcrumbItemName[];
    __declspec(property(get=GetbreadcrumbItemHasMenu))
    VARIANT_BOOL breadcrumbItemHasMenu[];
    __declspec(property(get=GettitlebarVisible,put=PuttitlebarVisible))
    VARIANT_BOOL titlebarVisible;
    __declspec(property(get=GettitlebarAutoHide,put=PuttitlebarAutoHide))
    VARIANT_BOOL titlebarAutoHide;
    __declspec(property(get=GetcurrentTask,put=PutcurrentTask))
    _bstr_t currentTask;
    __declspec(property(get=GetsettingsVisible,put=PutsettingsVisible))
    VARIANT_BOOL settingsVisible;
    __declspec(property(get=GetplaylistVisible,put=PutplaylistVisible))
    VARIANT_BOOL playlistVisible;
    __declspec(property(get=GettaskbarVisible,put=PuttaskbarVisible))
    VARIANT_BOOL taskbarVisible;
    __declspec(property(get=GettitlebarCurrentlyVisible))
    VARIANT_BOOL titlebarCurrentlyVisible;
    __declspec(property(get=GetbgPluginRunning))
    VARIANT_BOOL bgPluginRunning;
    __declspec(property(get=Getmaximized))
    VARIANT_BOOL maximized;
    __declspec(property(get=GetpreviousEnabled))
    VARIANT_BOOL previousEnabled;
    __declspec(property(get=GetDPI))
    long DPI;
    __declspec(property(get=Gettop,put=Puttop))
    long top;
    __declspec(property(get=Getleft,put=Putleft))
    long left;
    __declspec(property(get=Getwidth,put=Putwidth))
    long width;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GettitlebarVisible ( );
    void PuttitlebarVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GettitlebarAutoHide ( );
    void PuttitlebarAutoHide (
        VARIANT_BOOL pVal );
    _bstr_t GetcurrentTask ( );
    void PutcurrentTask (
        _bstr_t pVal );
    long GetlibraryBasketMode ( );
    void PutlibraryBasketMode (
        long pVal );
    long GetlibraryBasketWidth ( );
    long GetbreadcrumbItemCount ( );
    _bstr_t GetbreadcrumbItemName (
        long lIndex );
    VARIANT_BOOL GetbreadcrumbItemHasMenu (
        long lIndex );
    HRESULT breadcrumbItemClick (
        long lIndex );
    VARIANT_BOOL GetsettingsVisible ( );
    void PutsettingsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetplaylistVisible ( );
    void PutplaylistVisible (
        VARIANT_BOOL pVal );
    HRESULT gotoSkinMode ( );
    HRESULT gotoPlayerMode ( );
    HRESULT gotoLibraryMode (
        long lButton );
    HRESULT navigatePrevious ( );
    HRESULT navigateNext ( );
    HRESULT goFullScreen ( );
    VARIANT_BOOL GetfullScreenEnabled ( );
    VARIANT_BOOL GetserviceLoginVisible ( );
    VARIANT_BOOL GetserviceLoginSignedIn ( );
    HRESULT serviceLogin ( );
    HRESULT serviceLogout ( );
    _variant_t GetserviceGetInfo (
        _bstr_t bstrItem );
    VARIANT_BOOL GetnavigatePreviousEnabled ( );
    VARIANT_BOOL GetnavigateNextEnabled ( );
    HRESULT navigateToAddress (
        _bstr_t address );
    VARIANT_BOOL GetglassEnabled ( );
    VARIANT_BOOL GetinVistaPlus ( );
    HRESULT adjustLeft (
        long nDistance );
    VARIANT_BOOL GettaskbarVisible ( );
    void PuttaskbarVisible (
        VARIANT_BOOL pVal );
    long GetDPI ( );
    VARIANT_BOOL GetpreviousEnabled ( );
    VARIANT_BOOL GetplayLibraryItemEnabled ( );
    HRESULT previous ( );
    VARIANT_BOOL GettitlebarCurrentlyVisible ( );
    VARIANT_BOOL GetmenubarCurrentlyVisible ( );
    VARIANT_BOOL GetbgPluginRunning ( );
    HRESULT configurePlugins (
        long nType );
    _bstr_t getTimeString (
        double dTime );
    VARIANT_BOOL Getmaximized ( );
    long Gettop ( );
    void Puttop (
        long pVal );
    long Getleft ( );
    void Putleft (
        long pVal );
    long Getwidth ( );
    void Putwidth (
        long pVal );
    long Getheight ( );
    void Putheight (
        long pVal );
    HRESULT setWindowPos (
        long lTop,
        long lLeft,
        long lWidth,
        long lHeight );
    HRESULT logData (
        _bstr_t ID,
        _bstr_t data );
    _bstr_t GetpowerPersonality ( );
    HRESULT navigateNamespace (
        _bstr_t address );
    _bstr_t GetexclusiveService ( );
    void PutwindowText (
        _bstr_t _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_titlebarVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_titlebarVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_titlebarAutoHide (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_titlebarAutoHide (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_currentTask (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_currentTask (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_libraryBasketMode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_libraryBasketMode (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_libraryBasketWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_breadcrumbItemCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_breadcrumbItemName (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_breadcrumbItemHasMenu (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_breadcrumbItemClick (
        /*[in]*/ long lIndex ) = 0;
      virtual HRESULT __stdcall get_settingsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_settingsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_playlistVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_playlistVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_gotoSkinMode ( ) = 0;
      virtual HRESULT __stdcall raw_gotoPlayerMode ( ) = 0;
      virtual HRESULT __stdcall raw_gotoLibraryMode (
        /*[in]*/ long lButton ) = 0;
      virtual HRESULT __stdcall raw_navigatePrevious ( ) = 0;
      virtual HRESULT __stdcall raw_navigateNext ( ) = 0;
      virtual HRESULT __stdcall raw_goFullScreen ( ) = 0;
      virtual HRESULT __stdcall get_fullScreenEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_serviceLoginVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_serviceLoginSignedIn (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_serviceLogin ( ) = 0;
      virtual HRESULT __stdcall raw_serviceLogout ( ) = 0;
      virtual HRESULT __stdcall get_serviceGetInfo (
        /*[in]*/ BSTR bstrItem,
        /*[out,retval]*/ VARIANT * pValue ) = 0;
      virtual HRESULT __stdcall get_navigatePreviousEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_navigateNextEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_navigateToAddress (
        /*[in]*/ BSTR address ) = 0;
      virtual HRESULT __stdcall get_glassEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_inVistaPlus (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_adjustLeft (
        /*[in]*/ long nDistance ) = 0;
      virtual HRESULT __stdcall get_taskbarVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_taskbarVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DPI (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_previousEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_playLibraryItemEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_previous ( ) = 0;
      virtual HRESULT __stdcall get_titlebarCurrentlyVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_menubarCurrentlyVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_bgPluginRunning (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_configurePlugins (
        /*[in]*/ long nType ) = 0;
      virtual HRESULT __stdcall raw_getTimeString (
        /*[in]*/ double dTime,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_maximized (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_top (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_top (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_left (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_left (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_width (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_height (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_setWindowPos (
        /*[in]*/ long lTop,
        /*[in]*/ long lLeft,
        /*[in]*/ long lWidth,
        /*[in]*/ long lHeight ) = 0;
      virtual HRESULT __stdcall raw_logData (
        /*[in]*/ BSTR ID,
        /*[in]*/ BSTR data ) = 0;
      virtual HRESULT __stdcall get_powerPersonality (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_navigateNamespace (
        /*[in]*/ BSTR address ) = 0;
      virtual HRESULT __stdcall get_exclusiveService (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_windowText (
        /*[in]*/ BSTR _arg1 ) = 0;
};

struct __declspec(uuid("ef870383-83ab-4ea9-be48-56fa4251af10"))
IWMPSafeBrowser : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetURL,put=PutURL))
    _bstr_t URL;
    __declspec(property(get=Getstatus))
    long status;
    __declspec(property(get=GetpendingDownloads))
    long pendingDownloads;
    __declspec(property(get=GetbaseURL))
    _bstr_t baseURL;
    __declspec(property(get=GetsecureLock))
    long secureLock;
    __declspec(property(get=Getbusy))
    VARIANT_BOOL busy;
    __declspec(property(get=GetfullURL))
    _bstr_t fullURL;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetURL ( );
    void PutURL (
        _bstr_t pVal );
    long Getstatus ( );
    long GetpendingDownloads ( );
    HRESULT showSAMIText (
        _bstr_t samiText );
    HRESULT showLyrics (
        _bstr_t lyrics );
    HRESULT loadSpecialPage (
        _bstr_t pageName );
    HRESULT goBack ( );
    HRESULT goForward ( );
    HRESULT stop ( );
    HRESULT refresh ( );
    _bstr_t GetbaseURL ( );
    _bstr_t GetfullURL ( );
    long GetsecureLock ( );
    VARIANT_BOOL Getbusy ( );
    HRESULT showCert ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_URL (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_URL (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_status (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_pendingDownloads (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_showSAMIText (
        /*[in]*/ BSTR samiText ) = 0;
      virtual HRESULT __stdcall raw_showLyrics (
        /*[in]*/ BSTR lyrics ) = 0;
      virtual HRESULT __stdcall raw_loadSpecialPage (
        /*[in]*/ BSTR pageName ) = 0;
      virtual HRESULT __stdcall raw_goBack ( ) = 0;
      virtual HRESULT __stdcall raw_goForward ( ) = 0;
      virtual HRESULT __stdcall raw_stop ( ) = 0;
      virtual HRESULT __stdcall raw_refresh ( ) = 0;
      virtual HRESULT __stdcall get_baseURL (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_fullURL (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_secureLock (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_busy (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_showCert ( ) = 0;
};

struct __declspec(uuid("21d077c1-4baa-11d3-bd45-00c04f6ea5ae"))
IWMPObjectExtendedProps : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetresizeImages,put=PutresizeImages))
    VARIANT_BOOL resizeImages;
    __declspec(property(get=GetnineGridMargins,put=PutnineGridMargins))
    _bstr_t nineGridMargins;
    __declspec(property(get=GetresizeOptimize,put=PutresizeOptimize))
    _bstr_t resizeOptimize;
    __declspec(property(get=Getrotation,put=Putrotation))
    float rotation;
    __declspec(property(get=GetID))
    _bstr_t ID;
    __declspec(property(get=GetelementType))
    _bstr_t elementType;
    __declspec(property(get=Getleft,put=Putleft))
    long left;
    __declspec(property(get=Gettop,put=Puttop))
    long top;
    __declspec(property(get=Getwidth,put=Putwidth))
    long width;
    __declspec(property(get=Getheight,put=Putheight))
    long height;
    __declspec(property(get=GetzIndex,put=PutzIndex))
    long zIndex;
    __declspec(property(get=GetclippingImage,put=PutclippingImage))
    _bstr_t clippingImage;
    __declspec(property(get=GetclippingColor,put=PutclippingColor))
    _bstr_t clippingColor;
    __declspec(property(get=Getvisible,put=Putvisible))
    VARIANT_BOOL visible;
    __declspec(property(get=Getenabled,put=Putenabled))
    VARIANT_BOOL enabled;
    __declspec(property(get=GettabStop,put=PuttabStop))
    VARIANT_BOOL tabStop;
    __declspec(property(get=GetpassThrough,put=PutpassThrough))
    VARIANT_BOOL passThrough;
    __declspec(property(get=GethorizontalAlignment,put=PuthorizontalAlignment))
    _bstr_t horizontalAlignment;
    __declspec(property(get=GetverticalAlignment,put=PutverticalAlignment))
    _bstr_t verticalAlignment;
    __declspec(property(get=GetalphaBlend,put=PutalphaBlend))
    long alphaBlend;
    __declspec(property(get=GetaccName,put=PutaccName))
    _bstr_t accName;
    __declspec(property(get=GetaccDescription,put=PutaccDescription))
    _bstr_t accDescription;
    __declspec(property(get=GetaccKeyboardShortcut,put=PutaccKeyboardShortcut))
    _bstr_t accKeyboardShortcut;
    __declspec(property(get=Getright,put=Putright))
    long right;
    __declspec(property(get=Getbottom,put=Putbottom))
    long bottom;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetID ( );
    _bstr_t GetelementType ( );
    long Getleft ( );
    void Putleft (
        long pVal );
    long Gettop ( );
    void Puttop (
        long pVal );
    long Getright ( );
    void Putright (
        long pVal );
    long Getbottom ( );
    void Putbottom (
        long pVal );
    long Getwidth ( );
    void Putwidth (
        long pVal );
    long Getheight ( );
    void Putheight (
        long pVal );
    long GetzIndex ( );
    void PutzIndex (
        long pVal );
    _bstr_t GetclippingImage ( );
    void PutclippingImage (
        _bstr_t pVal );
    _bstr_t GetclippingColor ( );
    void PutclippingColor (
        _bstr_t pVal );
    VARIANT_BOOL Getvisible ( );
    void Putvisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Getenabled ( );
    void Putenabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GettabStop ( );
    void PuttabStop (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetpassThrough ( );
    void PutpassThrough (
        VARIANT_BOOL pVal );
    _bstr_t GethorizontalAlignment ( );
    void PuthorizontalAlignment (
        _bstr_t pVal );
    _bstr_t GetverticalAlignment ( );
    void PutverticalAlignment (
        _bstr_t pVal );
    HRESULT moveTo (
        long newX,
        long newY,
        long moveTime );
    HRESULT slideTo (
        long newX,
        long newY,
        long moveTime );
    HRESULT moveSizeTo (
        long newX,
        long newY,
        long newWidth,
        long newHeight,
        long moveTime,
        VARIANT_BOOL fSlide );
    long GetalphaBlend ( );
    void PutalphaBlend (
        long pVal );
    HRESULT alphaBlendTo (
        long newVal,
        long alphaTime );
    _bstr_t GetaccName ( );
    void PutaccName (
        _bstr_t pszName );
    _bstr_t GetaccDescription ( );
    void PutaccDescription (
        _bstr_t pszDesc );
    _bstr_t GetaccKeyboardShortcut ( );
    void PutaccKeyboardShortcut (
        _bstr_t pszShortcut );
    VARIANT_BOOL GetresizeImages ( );
    void PutresizeImages (
        VARIANT_BOOL pVal );
    _bstr_t GetnineGridMargins ( );
    void PutnineGridMargins (
        _bstr_t pszMargins );
    _bstr_t GetresizeOptimize ( );
    void PutresizeOptimize (
        _bstr_t ppszResizeOptimize );
    float Getrotation ( );
    void Putrotation (
        float pfVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_elementType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_left (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_left (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_top (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_top (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_right (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_right (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_bottom (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_bottom (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_width (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_width (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_height (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_height (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_zIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_zIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_clippingImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_clippingImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_clippingColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_clippingColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_visible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_visible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_enabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_enabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_tabStop (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_tabStop (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_passThrough (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_passThrough (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_horizontalAlignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_horizontalAlignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_verticalAlignment (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_verticalAlignment (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_moveTo (
        /*[in]*/ long newX,
        /*[in]*/ long newY,
        /*[in]*/ long moveTime ) = 0;
      virtual HRESULT __stdcall raw_slideTo (
        /*[in]*/ long newX,
        /*[in]*/ long newY,
        /*[in]*/ long moveTime ) = 0;
      virtual HRESULT __stdcall raw_moveSizeTo (
        /*[in]*/ long newX,
        /*[in]*/ long newY,
        /*[in]*/ long newWidth,
        /*[in]*/ long newHeight,
        /*[in]*/ long moveTime,
        /*[in]*/ VARIANT_BOOL fSlide ) = 0;
      virtual HRESULT __stdcall get_alphaBlend (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_alphaBlend (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_alphaBlendTo (
        /*[in]*/ long newVal,
        /*[in]*/ long alphaTime ) = 0;
      virtual HRESULT __stdcall get_accName (
        /*[out,retval]*/ BSTR * pszName ) = 0;
      virtual HRESULT __stdcall put_accName (
        /*[in]*/ BSTR pszName ) = 0;
      virtual HRESULT __stdcall get_accDescription (
        /*[out,retval]*/ BSTR * pszDesc ) = 0;
      virtual HRESULT __stdcall put_accDescription (
        /*[in]*/ BSTR pszDesc ) = 0;
      virtual HRESULT __stdcall get_accKeyboardShortcut (
        /*[out,retval]*/ BSTR * pszShortcut ) = 0;
      virtual HRESULT __stdcall put_accKeyboardShortcut (
        /*[in]*/ BSTR pszShortcut ) = 0;
      virtual HRESULT __stdcall get_resizeImages (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_resizeImages (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_nineGridMargins (
        /*[out,retval]*/ BSTR * pszMargins ) = 0;
      virtual HRESULT __stdcall put_nineGridMargins (
        /*[in]*/ BSTR pszMargins ) = 0;
      virtual HRESULT __stdcall get_resizeOptimize (
        /*[out,retval]*/ BSTR * ppszResizeOptimize ) = 0;
      virtual HRESULT __stdcall put_resizeOptimize (
        /*[in]*/ BSTR ppszResizeOptimize ) = 0;
      virtual HRESULT __stdcall get_rotation (
        /*[out,retval]*/ float * pfVal ) = 0;
      virtual HRESULT __stdcall put_rotation (
        /*[in]*/ float pfVal ) = 0;
};

struct __declspec(uuid("72f486b1-0d43-11d3-bd3f-00c04f6ea5ae"))
IWMPLayoutSubView : IWMPObjectExtendedProps
{
    //
    // Property data
    //

    __declspec(property(get=GetbackgroundImageHueShift,put=PutbackgroundImageHueShift))
    float backgroundImageHueShift;
    __declspec(property(get=GetbackgroundImageSaturation,put=PutbackgroundImageSaturation))
    float backgroundImageSaturation;
    __declspec(property(get=GetresizeBackgroundImage,put=PutresizeBackgroundImage))
    VARIANT_BOOL resizeBackgroundImage;
    __declspec(property(get=GettransparencyColor,put=PuttransparencyColor))
    _bstr_t transparencyColor;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetbackgroundImage,put=PutbackgroundImage))
    _bstr_t backgroundImage;
    __declspec(property(get=GetbackgroundTiled,put=PutbackgroundTiled))
    VARIANT_BOOL backgroundTiled;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GettransparencyColor ( );
    void PuttransparencyColor (
        _bstr_t pVal );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    _bstr_t GetbackgroundImage ( );
    void PutbackgroundImage (
        _bstr_t pVal );
    VARIANT_BOOL GetbackgroundTiled ( );
    void PutbackgroundTiled (
        VARIANT_BOOL pVal );
    float GetbackgroundImageHueShift ( );
    void PutbackgroundImageHueShift (
        float pVal );
    float GetbackgroundImageSaturation ( );
    void PutbackgroundImageSaturation (
        float pVal );
    VARIANT_BOOL GetresizeBackgroundImage ( );
    void PutresizeBackgroundImage (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_transparencyColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_transparencyColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundTiled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundTiled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundImageHueShift (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundImageHueShift (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundImageSaturation (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundImageSaturation (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_resizeBackgroundImage (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_resizeBackgroundImage (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("172e905d-80d9-4c2f-b7ce-2ccb771787a2"))
IWMPLayoutView : IWMPLayoutSubView
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;
    __declspec(property(get=Getcategory,put=Putcategory))
    _bstr_t category;
    __declspec(property(get=GetfocusObjectID,put=PutfocusObjectID))
    _bstr_t focusObjectID;
    __declspec(property(get=GettitleBar))
    VARIANT_BOOL titleBar;
    __declspec(property(get=Getresizable))
    VARIANT_BOOL resizable;
    __declspec(property(get=GettimerInterval,put=PuttimerInterval))
    long timerInterval;
    __declspec(property(get=GetminWidth,put=PutminWidth))
    long minWidth;
    __declspec(property(get=GetmaxWidth,put=PutmaxWidth))
    long maxWidth;
    __declspec(property(get=GetminHeight,put=PutminHeight))
    long minHeight;
    __declspec(property(get=GetmaxHeight,put=PutmaxHeight))
    long maxHeight;
    __declspec(property(get=Getmaximized))
    VARIANT_BOOL maximized;
    __declspec(property(get=Getminimized))
    VARIANT_BOOL minimized;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Gettitle ( );
    void Puttitle (
        _bstr_t pVal );
    _bstr_t Getcategory ( );
    void Putcategory (
        _bstr_t pVal );
    _bstr_t GetfocusObjectID ( );
    void PutfocusObjectID (
        _bstr_t pVal );
    VARIANT_BOOL GettitleBar ( );
    VARIANT_BOOL Getresizable ( );
    long GettimerInterval ( );
    void PuttimerInterval (
        long pVal );
    long GetminWidth ( );
    void PutminWidth (
        long pVal );
    long GetmaxWidth ( );
    void PutmaxWidth (
        long pVal );
    long GetminHeight ( );
    void PutminHeight (
        long pVal );
    long GetmaxHeight ( );
    void PutmaxHeight (
        long pVal );
    HRESULT close ( );
    HRESULT minimize ( );
    HRESULT maximize ( );
    HRESULT restore ( );
    HRESULT size (
        _bstr_t bstrDirection );
    HRESULT returnToMediaCenter ( );
    HRESULT updateWindow ( );
    VARIANT_BOOL Getmaximized ( );
    VARIANT_BOOL Getminimized ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_title (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_category (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_category (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_focusObjectID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_focusObjectID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_titleBar (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_resizable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_timerInterval (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_timerInterval (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_minWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_minWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_maxWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_maxWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_minHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_minHeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_maxHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_maxHeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_close ( ) = 0;
      virtual HRESULT __stdcall raw_minimize ( ) = 0;
      virtual HRESULT __stdcall raw_maximize ( ) = 0;
      virtual HRESULT __stdcall raw_restore ( ) = 0;
      virtual HRESULT __stdcall raw_size (
        /*[in]*/ BSTR bstrDirection ) = 0;
      virtual HRESULT __stdcall raw_returnToMediaCenter ( ) = 0;
      virtual HRESULT __stdcall raw_updateWindow ( ) = 0;
      virtual HRESULT __stdcall get_maximized (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_minimized (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("5af0bec1-46aa-11d3-bd45-00c04f6ea5ae"))
IWMPEventObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx))
    long x;
    __declspec(property(get=Gety))
    long y;
    __declspec(property(get=GetclientX))
    long clientX;
    __declspec(property(get=GetclientY))
    long clientY;
    __declspec(property(get=GetoffsetX))
    long offsetX;
    __declspec(property(get=GetoffsetY))
    long offsetY;
    __declspec(property(get=GetscreenX))
    long screenX;
    __declspec(property(get=GetscreenY))
    long screenY;
    __declspec(property(get=GetscreenWidth))
    long screenWidth;
    __declspec(property(get=GetscreenHeight))
    long screenHeight;
    __declspec(property(get=GetpenOrTouch))
    VARIANT_BOOL penOrTouch;
    __declspec(property(get=GetsrcElement))
    IDispatchPtr srcElement;
    __declspec(property(get=GetaltKey))
    VARIANT_BOOL altKey;
    __declspec(property(get=GetctrlKey))
    VARIANT_BOOL ctrlKey;
    __declspec(property(get=GetshiftKey))
    VARIANT_BOOL shiftKey;
    __declspec(property(get=GetfromElement))
    IDispatchPtr fromElement;
    __declspec(property(get=GettoElement))
    IDispatchPtr toElement;
    __declspec(property(get=GetkeyCode,put=PutkeyCode))
    long keyCode;
    __declspec(property(get=Getbutton))
    long button;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetsrcElement ( );
    VARIANT_BOOL GetaltKey ( );
    VARIANT_BOOL GetctrlKey ( );
    VARIANT_BOOL GetshiftKey ( );
    IDispatchPtr GetfromElement ( );
    IDispatchPtr GettoElement ( );
    void PutkeyCode (
        long p );
    long GetkeyCode ( );
    long Getbutton ( );
    long Getx ( );
    long Gety ( );
    long GetclientX ( );
    long GetclientY ( );
    long GetoffsetX ( );
    long GetoffsetY ( );
    long GetscreenX ( );
    long GetscreenY ( );
    long GetscreenWidth ( );
    long GetscreenHeight ( );
    VARIANT_BOOL GetpenOrTouch ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_srcElement (
        /*[out,retval]*/ IDispatch * * p ) = 0;
      virtual HRESULT __stdcall get_altKey (
        /*[out,retval]*/ VARIANT_BOOL * p ) = 0;
      virtual HRESULT __stdcall get_ctrlKey (
        /*[out,retval]*/ VARIANT_BOOL * p ) = 0;
      virtual HRESULT __stdcall get_shiftKey (
        /*[out,retval]*/ VARIANT_BOOL * p ) = 0;
      virtual HRESULT __stdcall get_fromElement (
        /*[out,retval]*/ IDispatch * * p ) = 0;
      virtual HRESULT __stdcall get_toElement (
        /*[out,retval]*/ IDispatch * * p ) = 0;
      virtual HRESULT __stdcall put_keyCode (
        /*[in]*/ long p ) = 0;
      virtual HRESULT __stdcall get_keyCode (
        /*[out,retval]*/ long * p ) = 0;
      virtual HRESULT __stdcall get_button (
        /*[out,retval]*/ long * p ) = 0;
      virtual HRESULT __stdcall get_x (
        /*[out,retval]*/ long * p ) = 0;
      virtual HRESULT __stdcall get_y (
        /*[out,retval]*/ long * p ) = 0;
      virtual HRESULT __stdcall get_clientX (
        /*[out,retval]*/ long * p ) = 0;
      virtual HRESULT __stdcall get_clientY (
        /*[out,retval]*/ long * p ) = 0;
      virtual HRESULT __stdcall get_offsetX (
        /*[out,retval]*/ long * p ) = 0;
      virtual HRESULT __stdcall get_offsetY (
        /*[out,retval]*/ long * p ) = 0;
      virtual HRESULT __stdcall get_screenX (
        /*[out,retval]*/ long * p ) = 0;
      virtual HRESULT __stdcall get_screenY (
        /*[out,retval]*/ long * p ) = 0;
      virtual HRESULT __stdcall get_screenWidth (
        /*[out,retval]*/ long * p ) = 0;
      virtual HRESULT __stdcall get_screenHeight (
        /*[out,retval]*/ long * p ) = 0;
      virtual HRESULT __stdcall get_penOrTouch (
        /*[out,retval]*/ VARIANT_BOOL * p ) = 0;
};

struct __declspec(uuid("6fcae13d-e492-4584-9c21-d2c052a2a33a"))
IWMPTheme : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle))
    _bstr_t title;
    __declspec(property(get=Getversion))
    float version;
    __declspec(property(get=GetauthorVersion))
    _bstr_t authorVersion;
    __declspec(property(get=Getauthor))
    _bstr_t author;
    __declspec(property(get=Getcopyright))
    _bstr_t copyright;
    __declspec(property(get=GetcurrentViewID,put=PutcurrentViewID))
    _bstr_t currentViewID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Gettitle ( );
    float Getversion ( );
    _bstr_t GetauthorVersion ( );
    _bstr_t Getauthor ( );
    _bstr_t Getcopyright ( );
    _bstr_t GetcurrentViewID ( );
    void PutcurrentViewID (
        _bstr_t pVal );
    HRESULT showErrorDialog ( );
    HRESULT logString (
        _bstr_t stringVal );
    HRESULT openView (
        _bstr_t viewID );
    IDispatchPtr openViewRelative (
        _bstr_t viewID,
        long x,
        long y );
    HRESULT closeView (
        _bstr_t viewID );
    _bstr_t openDialog (
        _bstr_t dialogType,
        _bstr_t parameters );
    _bstr_t loadString (
        _bstr_t bstrString );
    _bstr_t loadPreference (
        _bstr_t bstrName );
    HRESULT savePreference (
        _bstr_t bstrName,
        _bstr_t bstrValue );
    HRESULT playSound (
        _bstr_t bstrFilename );
    IDispatchPtr openViewRelativeInternal (
        _bstr_t viewID,
        long nIndex,
        long x,
        long y,
        long nWidth,
        long nHeight,
        _bstr_t bstrHorizontalAlignment,
        _bstr_t bstrVerticalAlignment );
    HRESULT setViewPosition (
        _bstr_t viewID,
        long nIndex,
        long x,
        long y,
        long nWidth,
        long nHeight,
        _bstr_t bstrHorizontalAlignment,
        _bstr_t bstrVerticalAlignment );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_version (
        /*[out,retval]*/ float * pfVersion ) = 0;
      virtual HRESULT __stdcall get_authorVersion (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_author (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_copyright (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_currentViewID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_currentViewID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_showErrorDialog ( ) = 0;
      virtual HRESULT __stdcall raw_logString (
        /*[in]*/ BSTR stringVal ) = 0;
      virtual HRESULT __stdcall raw_openView (
        /*[in]*/ BSTR viewID ) = 0;
      virtual HRESULT __stdcall raw_openViewRelative (
        /*[in]*/ BSTR viewID,
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[out,retval]*/ IDispatch * * ppView ) = 0;
      virtual HRESULT __stdcall raw_closeView (
        /*[in]*/ BSTR viewID ) = 0;
      virtual HRESULT __stdcall raw_openDialog (
        /*[in]*/ BSTR dialogType,
        /*[in]*/ BSTR parameters,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_loadString (
        /*[in]*/ BSTR bstrString,
        /*[out,retval]*/ BSTR * pbstrReturn ) = 0;
      virtual HRESULT __stdcall raw_loadPreference (
        /*[in]*/ BSTR bstrName,
        /*[out,retval]*/ BSTR * pbstrValue ) = 0;
      virtual HRESULT __stdcall raw_savePreference (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrValue ) = 0;
      virtual HRESULT __stdcall raw_playSound (
        BSTR bstrFilename ) = 0;
      virtual HRESULT __stdcall raw_openViewRelativeInternal (
        /*[in]*/ BSTR viewID,
        /*[in]*/ long nIndex,
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[in]*/ long nWidth,
        /*[in]*/ long nHeight,
        /*[in]*/ BSTR bstrHorizontalAlignment,
        /*[in]*/ BSTR bstrVerticalAlignment,
        /*[out,retval]*/ IDispatch * * ppView ) = 0;
      virtual HRESULT __stdcall raw_setViewPosition (
        /*[in]*/ BSTR viewID,
        /*[in]*/ long nIndex,
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[in]*/ long nWidth,
        /*[in]*/ long nHeight,
        /*[in]*/ BSTR bstrHorizontalAlignment,
        /*[in]*/ BSTR bstrVerticalAlignment ) = 0;
};

struct __declspec(uuid("b2c2d18e-97af-4b6a-a56b-2ffff470fb81"))
IWMPLayoutSettingsDispatch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetcontrastMode))
    _bstr_t contrastMode;
    __declspec(property(get=GetdisplayView,put=PutdisplayView))
    _bstr_t displayView;
    __declspec(property(get=GetmetadataView,put=PutmetadataView))
    _bstr_t metadataView;
    __declspec(property(get=GetshowSettings,put=PutshowSettings))
    VARIANT_BOOL showSettings;
    __declspec(property(get=GetshowResizeBars,put=PutshowResizeBars))
    VARIANT_BOOL showResizeBars;
    __declspec(property(get=GetshowPlaylist,put=PutshowPlaylist))
    VARIANT_BOOL showPlaylist;
    __declspec(property(get=GetshowMetadata,put=PutshowMetadata))
    VARIANT_BOOL showMetadata;
    __declspec(property(get=GetsettingsWidth,put=PutsettingsWidth))
    long settingsWidth;
    __declspec(property(get=GetsettingsHeight,put=PutsettingsHeight))
    long settingsHeight;
    __declspec(property(get=GetplaylistWidth,put=PutplaylistWidth))
    long playlistWidth;
    __declspec(property(get=GetplaylistHeight,put=PutplaylistHeight))
    long playlistHeight;
    __declspec(property(get=GetmetadataWidth,put=PutmetadataWidth))
    long metadataWidth;
    __declspec(property(get=GetmetadataHeight,put=PutmetadataHeight))
    long metadataHeight;
    __declspec(property(get=GetfullScreenAvailable,put=PutfullScreenAvailable))
    VARIANT_BOOL fullScreenAvailable;
    __declspec(property(get=GetfullScreenRequest,put=PutfullScreenRequest))
    VARIANT_BOOL fullScreenRequest;
    __declspec(property(get=GetquickHide,put=PutquickHide))
    VARIANT_BOOL quickHide;
    __declspec(property(get=GetdisplayPreset,put=PutdisplayPreset))
    long displayPreset;
    __declspec(property(get=GetsettingsPreset,put=PutsettingsPreset))
    long settingsPreset;
    __declspec(property(get=GetmetadataPreset,put=PutmetadataPreset))
    long metadataPreset;
    __declspec(property(get=GetuserDisplayView))
    _bstr_t userDisplayView;
    __declspec(property(get=GetuserWMPDisplayView))
    _bstr_t userWMPDisplayView;
    __declspec(property(get=GetuserDisplayPreset))
    long userDisplayPreset;
    __declspec(property(get=GetuserWMPDisplayPreset))
    long userWMPDisplayPreset;
    __declspec(property(get=GetdynamicRangeControl,put=PutdynamicRangeControl))
    long dynamicRangeControl;
    __declspec(property(get=GetslowRate,put=PutslowRate))
    float slowRate;
    __declspec(property(get=GetfastRate,put=PutfastRate))
    float fastRate;
    __declspec(property(get=GetbuttonHueShift,put=PutbuttonHueShift))
    float buttonHueShift;
    __declspec(property(get=GetbuttonSaturation,put=PutbuttonSaturation))
    float buttonSaturation;
    __declspec(property(get=GetbackHueShift,put=PutbackHueShift))
    float backHueShift;
    __declspec(property(get=GetbackSaturation,put=PutbackSaturation))
    float backSaturation;
    __declspec(property(get=GetvizRequest,put=PutvizRequest))
    long vizRequest;
    __declspec(property(get=GetappColorLight))
    _bstr_t appColorLight;
    __declspec(property(get=GetappColorMedium))
    _bstr_t appColorMedium;
    __declspec(property(get=GetappColorDark))
    _bstr_t appColorDark;
    __declspec(property(get=GetitemPlayingColor))
    _bstr_t itemPlayingColor;
    __declspec(property(get=GetitemPlayingBackgroundColor))
    _bstr_t itemPlayingBackgroundColor;
    __declspec(property(get=GetitemErrorColor))
    _bstr_t itemErrorColor;
    __declspec(property(get=GetappColorLimited))
    VARIANT_BOOL appColorLimited;
    __declspec(property(get=GetappColorBlackBackground,put=PutappColorBlackBackground))
    VARIANT_BOOL appColorBlackBackground;
    __declspec(property(get=GetappColorVideoBorder,put=PutappColorVideoBorder))
    _bstr_t appColorVideoBorder;
    __declspec(property(get=GettoolbarButtonHighlight))
    _bstr_t toolbarButtonHighlight;
    __declspec(property(get=GettoolbarButtonShadow))
    _bstr_t toolbarButtonShadow;
    __declspec(property(get=GettoolbarButtonFace))
    _bstr_t toolbarButtonFace;
    __declspec(property(get=GetuserWMPSettingsView))
    _bstr_t userWMPSettingsView;
    __declspec(property(get=GetuserWMPSettingsPreset))
    long userWMPSettingsPreset;
    __declspec(property(get=GetuserWMPShowSettings))
    VARIANT_BOOL userWMPShowSettings;
    __declspec(property(get=GetuserWMPMetadataView))
    _bstr_t userWMPMetadataView;
    __declspec(property(get=GetuserWMPMetadataPreset))
    long userWMPMetadataPreset;
    __declspec(property(get=GetuserWMPShowMetadata))
    VARIANT_BOOL userWMPShowMetadata;
    __declspec(property(get=GetcaptionsHeight,put=PutcaptionsHeight))
    long captionsHeight;
    __declspec(property(get=GetsnapToVideo,put=PutsnapToVideo))
    VARIANT_BOOL snapToVideo;
    __declspec(property(get=GetpinFullScreenControls,put=PutpinFullScreenControls))
    VARIANT_BOOL pinFullScreenControls;
    __declspec(property(get=GetuserVideoStretchToFit,put=PutuserVideoStretchToFit))
    VARIANT_BOOL userVideoStretchToFit;
    __declspec(property(get=GetappColorAux1))
    _bstr_t appColorAux1;
    __declspec(property(get=GetappColorAux2))
    _bstr_t appColorAux2;
    __declspec(property(get=GetappColorAux3))
    _bstr_t appColorAux3;
    __declspec(property(get=GetappColorAux4))
    _bstr_t appColorAux4;
    __declspec(property(get=GetappColorAux5))
    _bstr_t appColorAux5;
    __declspec(property(get=GetappColorAux6))
    _bstr_t appColorAux6;
    __declspec(property(get=GetappColorAux7))
    _bstr_t appColorAux7;
    __declspec(property(get=GetappColorAux8))
    _bstr_t appColorAux8;
    __declspec(property(get=GetappColorAux9))
    _bstr_t appColorAux9;
    __declspec(property(get=GetappColorAux10))
    _bstr_t appColorAux10;
    __declspec(property(get=GetappColorAux11))
    _bstr_t appColorAux11;
    __declspec(property(get=GetappColorAux12))
    _bstr_t appColorAux12;
    __declspec(property(get=GetappColorAux13))
    _bstr_t appColorAux13;
    __declspec(property(get=GetappColorAux14))
    _bstr_t appColorAux14;
    __declspec(property(get=GetappColorAux15))
    _bstr_t appColorAux15;
    __declspec(property(get=Getstatus,put=Putstatus))
    _bstr_t status;
    __declspec(property(get=GetisMultiMon))
    VARIANT_BOOL isMultiMon;
    __declspec(property(get=GetexclusiveHueShift,put=PutexclusiveHueShift))
    float exclusiveHueShift;
    __declspec(property(get=GetexclusiveSaturation,put=PutexclusiveSaturation))
    float exclusiveSaturation;
    __declspec(property(get=GetthemeBkgColorActive))
    _bstr_t themeBkgColorActive;
    __declspec(property(get=GetthemeBkgColorInactive))
    _bstr_t themeBkgColorInactive;
    __declspec(property(get=GetthemeBkgColorIsActive,put=PutthemeBkgColorIsActive))
    VARIANT_BOOL themeBkgColorIsActive;
    __declspec(property(get=GeteffectType,put=PuteffectType))
    _bstr_t effectType;
    __declspec(property(get=GeteffectPreset,put=PuteffectPreset))
    long effectPreset;
    __declspec(property(get=GetsettingsView,put=PutsettingsView))
    _bstr_t settingsView;
    __declspec(property(get=GetvideoZoom,put=PutvideoZoom))
    long videoZoom;
    __declspec(property(get=GetvideoShrinkToFit,put=PutvideoShrinkToFit))
    VARIANT_BOOL videoShrinkToFit;
    __declspec(property(get=GetvideoStretchToFit,put=PutvideoStretchToFit))
    VARIANT_BOOL videoStretchToFit;
    __declspec(property(get=GetshowCaptions,put=PutshowCaptions))
    VARIANT_BOOL showCaptions;
    __declspec(property(get=GetshowTitles,put=PutshowTitles))
    VARIANT_BOOL showTitles;
    __declspec(property(get=GetshowEffects,put=PutshowEffects))
    VARIANT_BOOL showEffects;
    __declspec(property(get=GetshowFullScreenPlaylist,put=PutshowFullScreenPlaylist))
    VARIANT_BOOL showFullScreenPlaylist;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GeteffectType ( );
    void PuteffectType (
        _bstr_t pVal );
    long GeteffectPreset ( );
    void PuteffectPreset (
        long pVal );
    _bstr_t GetsettingsView ( );
    void PutsettingsView (
        _bstr_t pVal );
    long GetvideoZoom ( );
    void PutvideoZoom (
        long pVal );
    VARIANT_BOOL GetvideoShrinkToFit ( );
    void PutvideoShrinkToFit (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetvideoStretchToFit ( );
    void PutvideoStretchToFit (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetuserVideoStretchToFit ( );
    void PutuserVideoStretchToFit (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetshowCaptions ( );
    void PutshowCaptions (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetshowTitles ( );
    void PutshowTitles (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetshowEffects ( );
    void PutshowEffects (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetshowFullScreenPlaylist ( );
    void PutshowFullScreenPlaylist (
        VARIANT_BOOL pVal );
    _bstr_t GetcontrastMode ( );
    _bstr_t getNamedString (
        _bstr_t bstrName );
    _bstr_t getDurationStringFromSeconds (
        long lDurationVal );
    _bstr_t GetdisplayView ( );
    void PutdisplayView (
        _bstr_t pVal );
    _bstr_t GetmetadataView ( );
    void PutmetadataView (
        _bstr_t pVal );
    VARIANT_BOOL GetshowSettings ( );
    void PutshowSettings (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetshowResizeBars ( );
    void PutshowResizeBars (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetshowPlaylist ( );
    void PutshowPlaylist (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetshowMetadata ( );
    void PutshowMetadata (
        VARIANT_BOOL pVal );
    long GetsettingsWidth ( );
    void PutsettingsWidth (
        long pVal );
    long GetsettingsHeight ( );
    void PutsettingsHeight (
        long pVal );
    long GetplaylistWidth ( );
    void PutplaylistWidth (
        long pVal );
    long GetplaylistHeight ( );
    void PutplaylistHeight (
        long pVal );
    long GetmetadataWidth ( );
    void PutmetadataWidth (
        long pVal );
    long GetmetadataHeight ( );
    void PutmetadataHeight (
        long pVal );
    VARIANT_BOOL GetfullScreenAvailable ( );
    void PutfullScreenAvailable (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetfullScreenRequest ( );
    void PutfullScreenRequest (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetquickHide ( );
    void PutquickHide (
        VARIANT_BOOL pVal );
    long GetdisplayPreset ( );
    void PutdisplayPreset (
        long pVal );
    long GetsettingsPreset ( );
    void PutsettingsPreset (
        long pVal );
    long GetmetadataPreset ( );
    void PutmetadataPreset (
        long pVal );
    _bstr_t GetuserDisplayView ( );
    _bstr_t GetuserWMPDisplayView ( );
    long GetuserDisplayPreset ( );
    long GetuserWMPDisplayPreset ( );
    long GetdynamicRangeControl ( );
    void PutdynamicRangeControl (
        long pVal );
    float GetslowRate ( );
    void PutslowRate (
        float pVal );
    float GetfastRate ( );
    void PutfastRate (
        float pVal );
    float GetbuttonHueShift ( );
    void PutbuttonHueShift (
        float pVal );
    float GetbuttonSaturation ( );
    void PutbuttonSaturation (
        float pVal );
    float GetbackHueShift ( );
    void PutbackHueShift (
        float pVal );
    float GetbackSaturation ( );
    void PutbackSaturation (
        float pVal );
    long GetvizRequest ( );
    void PutvizRequest (
        long pVal );
    _bstr_t GetappColorLight ( );
    _bstr_t GetappColorMedium ( );
    _bstr_t GetappColorDark ( );
    _bstr_t GettoolbarButtonHighlight ( );
    _bstr_t GettoolbarButtonShadow ( );
    _bstr_t GettoolbarButtonFace ( );
    _bstr_t GetitemPlayingColor ( );
    _bstr_t GetitemPlayingBackgroundColor ( );
    _bstr_t GetitemErrorColor ( );
    VARIANT_BOOL GetappColorLimited ( );
    VARIANT_BOOL GetappColorBlackBackground ( );
    void PutappColorBlackBackground (
        VARIANT_BOOL pVal );
    _bstr_t GetappColorVideoBorder ( );
    void PutappColorVideoBorder (
        _bstr_t pVal );
    _bstr_t GetappColorAux1 ( );
    _bstr_t GetappColorAux2 ( );
    _bstr_t GetappColorAux3 ( );
    _bstr_t GetappColorAux4 ( );
    _bstr_t GetappColorAux5 ( );
    _bstr_t GetappColorAux6 ( );
    _bstr_t GetappColorAux7 ( );
    _bstr_t GetappColorAux8 ( );
    _bstr_t GetappColorAux9 ( );
    _bstr_t GetappColorAux10 ( );
    _bstr_t GetappColorAux11 ( );
    _bstr_t GetappColorAux12 ( );
    _bstr_t GetappColorAux13 ( );
    _bstr_t GetappColorAux14 ( );
    _bstr_t GetappColorAux15 ( );
    _bstr_t Getstatus ( );
    void Putstatus (
        _bstr_t pVal );
    _bstr_t GetuserWMPSettingsView ( );
    long GetuserWMPSettingsPreset ( );
    VARIANT_BOOL GetuserWMPShowSettings ( );
    _bstr_t GetuserWMPMetadataView ( );
    long GetuserWMPMetadataPreset ( );
    VARIANT_BOOL GetuserWMPShowMetadata ( );
    long GetcaptionsHeight ( );
    void PutcaptionsHeight (
        long pVal );
    VARIANT_BOOL GetsnapToVideo ( );
    void PutsnapToVideo (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetpinFullScreenControls ( );
    void PutpinFullScreenControls (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetisMultiMon ( );
    float GetexclusiveHueShift ( );
    void PutexclusiveHueShift (
        float pVal );
    float GetexclusiveSaturation ( );
    void PutexclusiveSaturation (
        float pVal );
    VARIANT_BOOL GetthemeBkgColorIsActive ( );
    void PutthemeBkgColorIsActive (
        VARIANT_BOOL pVal );
    _bstr_t GetthemeBkgColorActive ( );
    _bstr_t GetthemeBkgColorInactive ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_effectType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_effectType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_effectPreset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_effectPreset (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_settingsView (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_settingsView (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_videoZoom (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_videoZoom (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_videoShrinkToFit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_videoShrinkToFit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_videoStretchToFit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_videoStretchToFit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_userVideoStretchToFit (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_userVideoStretchToFit (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_showCaptions (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_showCaptions (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_showTitles (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_showTitles (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_showEffects (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_showEffects (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_showFullScreenPlaylist (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_showFullScreenPlaylist (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_contrastMode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_getNamedString (
        /*[in]*/ BSTR bstrName,
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_getDurationStringFromSeconds (
        /*[in]*/ long lDurationVal,
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall get_displayView (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_displayView (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_metadataView (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_metadataView (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_showSettings (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_showSettings (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_showResizeBars (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_showResizeBars (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_showPlaylist (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_showPlaylist (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_showMetadata (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_showMetadata (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_settingsWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_settingsWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_settingsHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_settingsHeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_playlistWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_playlistWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_playlistHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_playlistHeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_metadataWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_metadataWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_metadataHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_metadataHeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_fullScreenAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_fullScreenAvailable (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_fullScreenRequest (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_fullScreenRequest (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_quickHide (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_quickHide (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_displayPreset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_displayPreset (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_settingsPreset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_settingsPreset (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_metadataPreset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_metadataPreset (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_userDisplayView (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_userWMPDisplayView (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_userDisplayPreset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_userWMPDisplayPreset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_dynamicRangeControl (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_dynamicRangeControl (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_slowRate (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_slowRate (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_fastRate (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_fastRate (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_buttonHueShift (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_buttonHueShift (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_buttonSaturation (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_buttonSaturation (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_backHueShift (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_backHueShift (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_backSaturation (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_backSaturation (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_vizRequest (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_vizRequest (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_appColorLight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorMedium (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorDark (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_toolbarButtonHighlight (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_toolbarButtonShadow (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_toolbarButtonFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_itemPlayingColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_itemPlayingBackgroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_itemErrorColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorLimited (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorBlackBackground (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_appColorBlackBackground (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_appColorVideoBorder (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_appColorVideoBorder (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux1 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux2 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux3 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux4 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux5 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux6 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux7 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux8 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux9 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux10 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux11 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux12 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux13 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux14 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_appColorAux15 (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_status (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_status (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_userWMPSettingsView (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_userWMPSettingsPreset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_userWMPShowSettings (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_userWMPMetadataView (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_userWMPMetadataPreset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_userWMPShowMetadata (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_captionsHeight (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_captionsHeight (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_snapToVideo (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_snapToVideo (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_pinFullScreenControls (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_pinFullScreenControls (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_isMultiMon (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_exclusiveHueShift (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_exclusiveHueShift (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_exclusiveSaturation (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_exclusiveSaturation (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_themeBkgColorIsActive (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_themeBkgColorIsActive (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_themeBkgColorActive (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_themeBkgColorInactive (
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("43d5ae92-4332-477c-8883-e0b3b063c5d2"))
IWMPWindow : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetframeRate,put=PutframeRate))
    long frameRate;
    __declspec(property(get=GetmouseX))
    long mouseX;
    __declspec(property(get=GetmouseY))
    long mouseY;
    __declspec(property(put=Putonsizing))
    IDispatchPtr onsizing;

    //
    // Wrapper methods for error-handling
    //

    HRESULT setWindowPos (
        long x,
        long y,
        long height,
        long width );
    long GetframeRate ( );
    void PutframeRate (
        long pVal );
    long GetmouseX ( );
    long GetmouseY ( );
    void Putonsizing (
        IDispatch * _arg1 );
    HRESULT openViewAlwaysOnTop (
        _bstr_t bstrViewID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_setWindowPos (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[in]*/ long height,
        /*[in]*/ long width ) = 0;
      virtual HRESULT __stdcall get_frameRate (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_frameRate (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_mouseX (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_mouseY (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_onsizing (
        /*[in]*/ IDispatch * _arg1 ) = 0;
      virtual HRESULT __stdcall raw_openViewAlwaysOnTop (
        BSTR bstrViewID ) = 0;
};

struct __declspec(uuid("98bb02d4-ed74-43cc-ad6a-45888f2e0dcc"))
IWMPBrandDispatch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetfriendlyName))
    _bstr_t friendlyName;
    __declspec(property(get=GetguideButtonText))
    _bstr_t guideButtonText;
    __declspec(property(get=GetguideButtonTip))
    _bstr_t guideButtonTip;
    __declspec(property(get=GetguideMenuText))
    _bstr_t guideMenuText;
    __declspec(property(get=GetguideAccText))
    _bstr_t guideAccText;
    __declspec(property(get=Gettask1ButtonText))
    _bstr_t task1ButtonText;
    __declspec(property(get=Gettask1ButtonTip))
    _bstr_t task1ButtonTip;
    __declspec(property(get=Gettask1MenuText))
    _bstr_t task1MenuText;
    __declspec(property(get=Gettask1AccText))
    _bstr_t task1AccText;
    __declspec(property(get=GetguideUrl))
    _bstr_t guideUrl;
    __declspec(property(get=Gettask1Url))
    _bstr_t task1Url;
    __declspec(property(get=GetimageLargeUrl))
    _bstr_t imageLargeUrl;
    __declspec(property(get=GetimageSmallUrl))
    _bstr_t imageSmallUrl;
    __declspec(property(get=GetimageMenuUrl))
    _bstr_t imageMenuUrl;
    __declspec(property(get=GetinfoCenterUrl))
    _bstr_t infoCenterUrl;
    __declspec(property(get=GetalbumInfoUrl))
    _bstr_t albumInfoUrl;
    __declspec(property(get=GetbuyCDUrl))
    _bstr_t buyCDUrl;
    __declspec(property(get=GethtmlViewUrl))
    _bstr_t htmlViewUrl;
    __declspec(property(get=GetnavigateUrl))
    _bstr_t navigateUrl;
    __declspec(property(get=GetcookieUrl))
    _bstr_t cookieUrl;
    __declspec(property(get=GetdownloadStatusUrl))
    _bstr_t downloadStatusUrl;
    __declspec(property(get=GetcolorPlayer))
    _bstr_t colorPlayer;
    __declspec(property(get=GetcolorPlayerText))
    _bstr_t colorPlayerText;
    __declspec(property(get=GetnavigateDispid))
    long navigateDispid;
    __declspec(property(get=GetnavigateParams))
    _bstr_t navigateParams;
    __declspec(property(get=GetnavigatePane))
    _bstr_t navigatePane;
    __declspec(property(get=GetselectedPane,put=PutselectedPane))
    _bstr_t selectedPane;
    __declspec(property(put=PutselectedTask))
    long selectedTask;
    __declspec(property(get=GetfullServiceName))
    _bstr_t fullServiceName;
    __declspec(property(get=GetcontentPartnerSelected))
    VARIANT_BOOL contentPartnerSelected;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetfullServiceName ( );
    _bstr_t GetfriendlyName ( );
    _bstr_t GetguideButtonText ( );
    _bstr_t GetguideButtonTip ( );
    _bstr_t GetguideMenuText ( );
    _bstr_t GetguideAccText ( );
    _bstr_t Gettask1ButtonText ( );
    _bstr_t Gettask1ButtonTip ( );
    _bstr_t Gettask1MenuText ( );
    _bstr_t Gettask1AccText ( );
    _bstr_t GetguideUrl ( );
    _bstr_t Gettask1Url ( );
    _bstr_t GetimageLargeUrl ( );
    _bstr_t GetimageSmallUrl ( );
    _bstr_t GetimageMenuUrl ( );
    _bstr_t GetinfoCenterUrl ( );
    _bstr_t GetalbumInfoUrl ( );
    _bstr_t GetbuyCDUrl ( );
    _bstr_t GethtmlViewUrl ( );
    _bstr_t GetnavigateUrl ( );
    _bstr_t GetcookieUrl ( );
    _bstr_t GetdownloadStatusUrl ( );
    _bstr_t GetcolorPlayer ( );
    _bstr_t GetcolorPlayerText ( );
    long GetnavigateDispid ( );
    _bstr_t GetnavigateParams ( );
    _bstr_t GetnavigatePane ( );
    _bstr_t GetselectedPane ( );
    void PutselectedPane (
        _bstr_t pVal );
    HRESULT setNavigateProps (
        _bstr_t bstrPane,
        long lDispid,
        _bstr_t bstrParams );
    _bstr_t getMediaParams (
        IUnknown * pObject,
        _bstr_t bstrURL );
    void PutselectedTask (
        long _arg1 );
    VARIANT_BOOL GetcontentPartnerSelected ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_fullServiceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_friendlyName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_guideButtonText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_guideButtonTip (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_guideMenuText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_guideAccText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_task1ButtonText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_task1ButtonTip (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_task1MenuText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_task1AccText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_guideUrl (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_task1Url (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_imageLargeUrl (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_imageSmallUrl (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_imageMenuUrl (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_infoCenterUrl (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_albumInfoUrl (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_buyCDUrl (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_htmlViewUrl (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_navigateUrl (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_cookieUrl (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_downloadStatusUrl (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_colorPlayer (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_colorPlayerText (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_navigateDispid (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_navigateParams (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_navigatePane (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_selectedPane (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_selectedPane (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_setNavigateProps (
        /*[in]*/ BSTR bstrPane,
        /*[in]*/ long lDispid,
        /*[in]*/ BSTR bstrParams ) = 0;
      virtual HRESULT __stdcall raw_getMediaParams (
        /*[in]*/ IUnknown * pObject,
        /*[in]*/ BSTR bstrURL,
        /*[out,retval]*/ BSTR * pbstrResult ) = 0;
      virtual HRESULT __stdcall put_selectedTask (
        /*[in]*/ long _arg1 ) = 0;
      virtual HRESULT __stdcall get_contentPartnerSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("504f112e-77cc-4e3c-a073-5371b31d9b36"))
IWMPNowPlayingHelperDispatch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetbackgroundIndex,put=PutbackgroundIndex))
    long backgroundIndex;
    __declspec(property(get=GetMMOVisible))
    VARIANT_BOOL MMOVisible;
    __declspec(property(get=GetupNext))
    _bstr_t upNext;
    __declspec(property(get=GetplaybackOverlayVisible))
    VARIANT_BOOL playbackOverlayVisible;
    __declspec(property(get=Getremoted))
    VARIANT_BOOL remoted;
    __declspec(property(get=GetglassEnabled))
    VARIANT_BOOL glassEnabled;
    __declspec(property(get=GethighContrast))
    VARIANT_BOOL highContrast;
    __declspec(property(put=PuttestHighContrast))
    _bstr_t testHighContrast;
    __declspec(property(get=GetmetadataString,put=PutmetadataString))
    _bstr_t metadataString;
    __declspec(property(get=GetalbumArtAlpha))
    long albumArtAlpha;
    __declspec(property(get=GetplayerModeAlbumArtSelected))
    VARIANT_BOOL playerModeAlbumArtSelected;
    __declspec(property(get=GetinFullScreen))
    VARIANT_BOOL inFullScreen;
    __declspec(property(get=GetviewFriendlyName))
    _bstr_t viewFriendlyName[];
    __declspec(property(get=GetviewPresetCount))
    long viewPresetCount[];
    __declspec(property(get=GetviewPresetName))
    _bstr_t viewPresetName[][];
    __declspec(property(get=GeteffectFriendlyName))
    _bstr_t effectFriendlyName[];
    __declspec(property(get=GeteffectPresetName))
    _bstr_t effectPresetName[][];
    __declspec(property(get=GetcaptionsAvailable))
    VARIANT_BOOL captionsAvailable;
    __declspec(property(get=GetlinkAvailable))
    long linkAvailable;
    __declspec(property(get=GetlinkRequest,put=PutlinkRequest))
    long linkRequest;
    __declspec(property(get=GetlinkRequestParams,put=PutlinkRequestParams))
    _bstr_t linkRequestParams;
    __declspec(property(get=GeteditObj,put=PuteditObj))
    IUnknownPtr editObj;
    __declspec(property(get=GetnotificationString))
    _bstr_t notificationString;
    __declspec(property(get=GethtmlViewSecureLock,put=PuthtmlViewSecureLock))
    long htmlViewSecureLock;
    __declspec(property(get=GethtmlViewBaseURL,put=PuthtmlViewBaseURL))
    _bstr_t htmlViewBaseURL;
    __declspec(property(get=GethtmlViewBusy,put=PuthtmlViewBusy))
    VARIANT_BOOL htmlViewBusy;
    __declspec(property(get=GethtmlViewShowCert,put=PuthtmlViewShowCert))
    VARIANT_BOOL htmlViewShowCert;
    __declspec(property(get=GethtmlViewFullURL,put=PuthtmlViewFullURL))
    _bstr_t htmlViewFullURL;
    __declspec(property(get=GetpreviousEnabled,put=PutpreviousEnabled))
    VARIANT_BOOL previousEnabled;
    __declspec(property(get=GetdoPreviousNow,put=PutdoPreviousNow))
    VARIANT_BOOL doPreviousNow;
    __declspec(property(get=GetDPI))
    long DPI;
    __declspec(property(get=GetlastMessage,put=PutlastMessage))
    _bstr_t lastMessage;
    __declspec(property(get=GetinVistaPlus))
    VARIANT_BOOL inVistaPlus;
    __declspec(property(get=GetisBidi))
    VARIANT_BOOL isBidi;
    __declspec(property(get=GetisOCX))
    VARIANT_BOOL isOCX;
    __declspec(property(get=GethoverTransportsEnabled))
    VARIANT_BOOL hoverTransportsEnabled;
    __declspec(property(get=GetisAudioCD,put=PutisAudioCD))
    VARIANT_BOOL isAudioCD;
    __declspec(property(get=GetcanRip,put=PutcanRip))
    VARIANT_BOOL canRip;
    __declspec(property(get=GetisRipping,put=PutisRipping))
    VARIANT_BOOL isRipping;
    __declspec(property(get=GetcurrentDrive,put=PutcurrentDrive))
    _bstr_t currentDrive;
    __declspec(property(get=GetshowMMO,put=PutshowMMO))
    VARIANT_BOOL showMMO;
    __declspec(property(get=GetsuggestionsVisible))
    VARIANT_BOOL suggestionsVisible;
    __declspec(property(get=GetsuggestionsTextColor))
    _bstr_t suggestionsTextColor;
    __declspec(property(get=GetdoubleClickTime))
    long doubleClickTime;
    __declspec(property(get=GetplayAgain))
    VARIANT_BOOL playAgain;
    __declspec(property(get=GetpreviousPlaylistAvailable))
    VARIANT_BOOL previousPlaylistAvailable;
    __declspec(property(get=GetnextPlaylistAvailable))
    VARIANT_BOOL nextPlaylistAvailable;
    __declspec(property(get=GetbasketVisible,put=PutbasketVisible))
    VARIANT_BOOL basketVisible;
    __declspec(property(get=GetfontFace))
    _bstr_t fontFace;
    __declspec(property(get=GetfontSize))
    long fontSize;
    __declspec(property(get=GetbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetmmoTextColor))
    _bstr_t mmoTextColor;
    __declspec(property(get=GetbackgroundVisible))
    VARIANT_BOOL backgroundVisible;
    __declspec(property(get=GetbackgroundEnabled,put=PutbackgroundEnabled))
    VARIANT_BOOL backgroundEnabled;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetviewFriendlyName (
        _bstr_t bstrView );
    long GetviewPresetCount (
        _bstr_t bstrView );
    _bstr_t GetviewPresetName (
        _bstr_t bstrView,
        long nPresetIndex );
    _bstr_t GeteffectFriendlyName (
        _bstr_t bstrEffect );
    _bstr_t GeteffectPresetName (
        _bstr_t bstrEffect,
        long nPresetIndex );
    _bstr_t resolveDisplayView (
        VARIANT_BOOL fSafe );
    VARIANT_BOOL isValidDisplayView (
        _bstr_t bstrView );
    _bstr_t getSkinFile ( );
    VARIANT_BOOL GetcaptionsAvailable ( );
    long GetlinkAvailable ( );
    long GetlinkRequest ( );
    void PutlinkRequest (
        long pVal );
    _bstr_t GetlinkRequestParams ( );
    void PutlinkRequestParams (
        _bstr_t pVal );
    long getCurrentArtID (
        VARIANT_BOOL fLargeArt );
    _bstr_t getTimeString (
        double dTime );
    _bstr_t getCurrentScriptCommand (
        _bstr_t bstrType );
    HRESULT calcLayout (
        long lWidth,
        long lHeight,
        VARIANT_BOOL vbCaptions,
        VARIANT_BOOL vbBanner );
    long getLayoutSize (
        long nProp );
    IDispatchPtr getRootPlaylist (
        IDispatch * pPlaylist );
    _bstr_t getHTMLViewURL ( );
    IUnknownPtr GeteditObj ( );
    void PuteditObj (
        IUnknown * ppVal );
    _bstr_t getStatusString (
        _bstr_t bstrStatusId );
    long getStatusPct (
        _bstr_t bstrStatusId );
    long getStatusResult (
        _bstr_t bstrStatusId );
    long getStatusIcon (
        _bstr_t bstrStatusId );
    _bstr_t getStatusIdList ( );
    _bstr_t GetnotificationString ( );
    _bstr_t GethtmlViewBaseURL ( );
    void PuthtmlViewBaseURL (
        _bstr_t pVal );
    _bstr_t GethtmlViewFullURL ( );
    void PuthtmlViewFullURL (
        _bstr_t pVal );
    long GethtmlViewSecureLock ( );
    void PuthtmlViewSecureLock (
        long pVal );
    VARIANT_BOOL GethtmlViewBusy ( );
    void PuthtmlViewBusy (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GethtmlViewShowCert ( );
    void PuthtmlViewShowCert (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetpreviousEnabled ( );
    void PutpreviousEnabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetdoPreviousNow ( );
    void PutdoPreviousNow (
        VARIANT_BOOL pVal );
    long GetDPI ( );
    HRESULT clearColors ( );
    _bstr_t GetlastMessage ( );
    void PutlastMessage (
        _bstr_t pVal );
    VARIANT_BOOL GetinVistaPlus ( );
    VARIANT_BOOL GetisBidi ( );
    VARIANT_BOOL GetisOCX ( );
    VARIANT_BOOL GethoverTransportsEnabled ( );
    HRESULT initRipHelper ( );
    VARIANT_BOOL GetisAudioCD ( );
    void PutisAudioCD (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetcanRip ( );
    void PutcanRip (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetisRipping ( );
    void PutisRipping (
        VARIANT_BOOL pVal );
    _bstr_t GetcurrentDrive ( );
    void PutcurrentDrive (
        _bstr_t pVal );
    HRESULT startRip ( );
    HRESULT stopRip ( );
    VARIANT_BOOL GetshowMMO ( );
    void PutshowMMO (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetMMOVisible ( );
    VARIANT_BOOL GetsuggestionsVisible ( );
    _bstr_t GetsuggestionsTextColor ( );
    _bstr_t GetfontFace ( );
    long GetfontSize ( );
    _bstr_t GetbackgroundColor ( );
    long GetdoubleClickTime ( );
    VARIANT_BOOL GetplayAgain ( );
    VARIANT_BOOL GetpreviousPlaylistAvailable ( );
    VARIANT_BOOL GetnextPlaylistAvailable ( );
    HRESULT nextPlaylist ( );
    HRESULT previousPlaylist ( );
    HRESULT playOffsetMedia (
        long iOffset );
    VARIANT_BOOL GetbasketVisible ( );
    void PutbasketVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetmmoTextColor ( );
    VARIANT_BOOL GetbackgroundVisible ( );
    void PutbackgroundEnabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetbackgroundEnabled ( );
    void PutbackgroundIndex (
        long pVal );
    long GetbackgroundIndex ( );
    _bstr_t GetupNext ( );
    VARIANT_BOOL GetplaybackOverlayVisible ( );
    VARIANT_BOOL Getremoted ( );
    VARIANT_BOOL GetglassEnabled ( );
    VARIANT_BOOL GethighContrast ( );
    void PuttestHighContrast (
        _bstr_t _arg1 );
    void GetsessionPlaylistCount (
        long * pVal );
    HRESULT setGestureStatus (
        IDispatch * pObject,
        long newVal );
    _bstr_t GetmetadataString ( );
    void PutmetadataString (
        _bstr_t pVal );
    long GetalbumArtAlpha ( );
    VARIANT_BOOL GetplayerModeAlbumArtSelected ( );
    VARIANT_BOOL GetinFullScreen ( );
    HRESULT syncToAlbumArt (
        IDispatch * pObject,
        long iOffsetFromCurrentMedia,
        _bstr_t bstrFallbackImage );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_viewFriendlyName (
        /*[in]*/ BSTR bstrView,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_viewPresetCount (
        /*[in]*/ BSTR bstrView,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_viewPresetName (
        /*[in]*/ BSTR bstrView,
        /*[in]*/ long nPresetIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_effectFriendlyName (
        /*[in]*/ BSTR bstrEffect,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_effectPresetName (
        /*[in]*/ BSTR bstrEffect,
        /*[in]*/ long nPresetIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_resolveDisplayView (
        /*[in]*/ VARIANT_BOOL fSafe,
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_isValidDisplayView (
        /*[in]*/ BSTR bstrView,
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_getSkinFile (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_captionsAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_linkAvailable (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_linkRequest (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_linkRequest (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_linkRequestParams (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_linkRequestParams (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_getCurrentArtID (
        /*[in]*/ VARIANT_BOOL fLargeArt,
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_getTimeString (
        /*[in]*/ double dTime,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_getCurrentScriptCommand (
        /*[in]*/ BSTR bstrType,
        /*[out,retval]*/ BSTR * pbstrCommand ) = 0;
      virtual HRESULT __stdcall raw_calcLayout (
        /*[in]*/ long lWidth,
        /*[in]*/ long lHeight,
        /*[in]*/ VARIANT_BOOL vbCaptions,
        /*[in]*/ VARIANT_BOOL vbBanner ) = 0;
      virtual HRESULT __stdcall raw_getLayoutSize (
        /*[in]*/ long nProp,
        /*[out,retval]*/ long * plValue ) = 0;
      virtual HRESULT __stdcall raw_getRootPlaylist (
        /*[in]*/ IDispatch * pPlaylist,
        /*[out,retval]*/ IDispatch * * ppRootPlaylist ) = 0;
      virtual HRESULT __stdcall raw_getHTMLViewURL (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_editObj (
        /*[out,retval]*/ IUnknown * * ppVal ) = 0;
      virtual HRESULT __stdcall put_editObj (
        /*[in]*/ IUnknown * ppVal ) = 0;
      virtual HRESULT __stdcall raw_getStatusString (
        /*[in]*/ BSTR bstrStatusId,
        /*[out,retval]*/ BSTR * pbstrStatus ) = 0;
      virtual HRESULT __stdcall raw_getStatusPct (
        /*[in]*/ BSTR bstrStatusId,
        /*[out,retval]*/ long * pvResult ) = 0;
      virtual HRESULT __stdcall raw_getStatusResult (
        /*[in]*/ BSTR bstrStatusId,
        /*[out,retval]*/ long * pvResult ) = 0;
      virtual HRESULT __stdcall raw_getStatusIcon (
        /*[in]*/ BSTR bstrStatusId,
        /*[out,retval]*/ long * pvResult ) = 0;
      virtual HRESULT __stdcall raw_getStatusIdList (
        /*[out,retval]*/ BSTR * pbstrStatus ) = 0;
      virtual HRESULT __stdcall get_notificationString (
        /*[out,retval]*/ BSTR * pbstrNotificationString ) = 0;
      virtual HRESULT __stdcall get_htmlViewBaseURL (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_htmlViewBaseURL (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_htmlViewFullURL (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_htmlViewFullURL (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_htmlViewSecureLock (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_htmlViewSecureLock (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_htmlViewBusy (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_htmlViewBusy (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_htmlViewShowCert (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_htmlViewShowCert (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_previousEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_previousEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_doPreviousNow (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_doPreviousNow (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_DPI (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_clearColors ( ) = 0;
      virtual HRESULT __stdcall get_lastMessage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_lastMessage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_inVistaPlus (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isBidi (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_isOCX (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_hoverTransportsEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_initRipHelper ( ) = 0;
      virtual HRESULT __stdcall get_isAudioCD (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_isAudioCD (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_canRip (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_canRip (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_isRipping (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_isRipping (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_currentDrive (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_currentDrive (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_startRip ( ) = 0;
      virtual HRESULT __stdcall raw_stopRip ( ) = 0;
      virtual HRESULT __stdcall get_showMMO (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_showMMO (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_MMOVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_suggestionsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_suggestionsTextColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_fontFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_fontSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_doubleClickTime (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_playAgain (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_previousPlaylistAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_nextPlaylistAvailable (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_nextPlaylist ( ) = 0;
      virtual HRESULT __stdcall raw_previousPlaylist ( ) = 0;
      virtual HRESULT __stdcall raw_playOffsetMedia (
        /*[in]*/ long iOffset ) = 0;
      virtual HRESULT __stdcall get_basketVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_basketVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_mmoTextColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundEnabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundIndex (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundIndex (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_upNext (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_playbackOverlayVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_remoted (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_glassEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_highContrast (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_testHighContrast (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall get_sessionPlaylistCount (
        /*[out]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_setGestureStatus (
        /*[in]*/ IDispatch * pObject,
        /*[in]*/ long newVal ) = 0;
      virtual HRESULT __stdcall get_metadataString (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_metadataString (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_albumArtAlpha (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_playerModeAlbumArtSelected (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_inFullScreen (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall raw_syncToAlbumArt (
        /*[in]*/ IDispatch * pObject,
        /*[in]*/ long iOffsetFromCurrentMedia,
        /*[in]*/ BSTR bstrFallbackImage ) = 0;
};

struct __declspec(uuid("2a2e0da3-19fa-4f82-be18-cd7d7a3b977f"))
IWMPNowDoingDispatch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getsync_spaceToUse))
    long sync_spaceToUse;
    __declspec(property(get=Getsync_spaceUsed))
    long sync_spaceUsed;
    __declspec(property(get=Getsync_totalSpace))
    long sync_totalSpace;
    __declspec(property(get=Getsync_deviceName))
    _bstr_t sync_deviceName;
    __declspec(property(get=Getsync_selectedDevice,put=Putsync_selectedDevice))
    long sync_selectedDevice;
    __declspec(property(get=Getsync_numDevices))
    long sync_numDevices;
    __declspec(property(get=Getsync_oemName))
    _bstr_t sync_oemName;
    __declspec(property(get=Getsync_percentComplete))
    long sync_percentComplete;
    __declspec(property(get=GetDPI))
    long DPI;
    __declspec(property(get=GeteditPlaylist))
    IDispatchPtr editPlaylist;
    __declspec(property(get=GetbasketPlaylistName))
    _bstr_t basketPlaylistName;
    __declspec(property(get=GetisHighContrastMode))
    VARIANT_BOOL isHighContrastMode;
    __declspec(property(get=GetallowRating))
    VARIANT_BOOL allowRating;
    __declspec(property(get=GetallowShop))
    VARIANT_BOOL allowShop;
    __declspec(property(get=Getmode))
    _bstr_t mode;
    __declspec(property(get=Getburn_mediaType))
    _bstr_t burn_mediaType;
    __declspec(property(get=Getburn_contentType))
    _bstr_t burn_contentType;
    __declspec(property(get=Getburn_freeSpace))
    long burn_freeSpace;
    __declspec(property(get=Getburn_totalSpace))
    long burn_totalSpace;
    __declspec(property(get=Getburn_driveName))
    _bstr_t burn_driveName;
    __declspec(property(get=Getburn_selectedDrive,put=Putburn_selectedDrive))
    long burn_selectedDrive;
    __declspec(property(get=Getburn_numDevices))
    long burn_numDevices;
    __declspec(property(get=Getburn_numDiscsSpanned))
    long burn_numDiscsSpanned;
    __declspec(property(get=Getburn_spaceToUse))
    long burn_spaceToUse;
    __declspec(property(get=Getburn_percentComplete))
    long burn_percentComplete;

    //
    // Wrapper methods for error-handling
    //

    HRESULT buyContent ( );
    HRESULT hideBasket ( );
    HRESULT burnNavigateToStatus ( );
    HRESULT syncNavigateToStatus ( );
    long GetDPI ( );
    _bstr_t Getmode ( );
    void Putburn_selectedDrive (
        long pVal );
    long Getburn_selectedDrive ( );
    long Getsync_selectedDevice ( );
    void Putsync_selectedDevice (
        long pVal );
    long Getburn_numDiscsSpanned ( );
    IDispatchPtr GeteditPlaylist ( );
    _bstr_t GetbasketPlaylistName ( );
    VARIANT_BOOL GetisHighContrastMode ( );
    VARIANT_BOOL GetallowRating ( );
    VARIANT_BOOL GetallowShop ( );
    _bstr_t Getburn_mediaType ( );
    _bstr_t Getburn_contentType ( );
    long Getburn_freeSpace ( );
    long Getburn_totalSpace ( );
    _bstr_t Getburn_driveName ( );
    long Getburn_numDevices ( );
    long Getburn_spaceToUse ( );
    long Getburn_percentComplete ( );
    long Getsync_spaceToUse ( );
    long Getsync_spaceUsed ( );
    long Getsync_totalSpace ( );
    _bstr_t Getsync_deviceName ( );
    long Getsync_numDevices ( );
    _bstr_t Getsync_oemName ( );
    long Getsync_percentComplete ( );
    HRESULT logData (
        _bstr_t ID,
        _bstr_t data );
    _bstr_t formatTime (
        long value );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_buyContent ( ) = 0;
      virtual HRESULT __stdcall raw_hideBasket ( ) = 0;
      virtual HRESULT __stdcall raw_burnNavigateToStatus ( ) = 0;
      virtual HRESULT __stdcall raw_syncNavigateToStatus ( ) = 0;
      virtual HRESULT __stdcall get_DPI (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_mode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_burn_selectedDrive (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_burn_selectedDrive (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_sync_selectedDevice (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_sync_selectedDevice (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_burn_numDiscsSpanned (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_editPlaylist (
        /*[out,retval]*/ IDispatch * * ppEditPlaylist ) = 0;
      virtual HRESULT __stdcall get_basketPlaylistName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_isHighContrastMode (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_allowRating (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_allowShop (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall get_burn_mediaType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_burn_contentType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_burn_freeSpace (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_burn_totalSpace (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_burn_driveName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_burn_numDevices (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_burn_spaceToUse (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_burn_percentComplete (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_sync_spaceToUse (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_sync_spaceUsed (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_sync_totalSpace (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_sync_deviceName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_sync_numDevices (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_sync_oemName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_sync_percentComplete (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_logData (
        /*[in]*/ BSTR ID,
        /*[in]*/ BSTR data ) = 0;
      virtual HRESULT __stdcall raw_formatTime (
        /*[in]*/ long value,
        /*[out,retval]*/ BSTR * pbstrReturn ) = 0;
};

struct __declspec(uuid("946b023e-044c-4473-8018-74954f09dc7e"))
IWMPHoverPreviewDispatch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle))
    _bstr_t title;
    __declspec(property(get=Getalbum))
    _bstr_t album;
    __declspec(property(put=Putimage))
    IDispatchPtr image;
    __declspec(property(get=GetURL))
    _bstr_t URL;
    __declspec(property(put=PutpreviewClick))
    VARIANT_BOOL previewClick;
    __declspec(property(put=PutautoClick))
    VARIANT_BOOL autoClick;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Gettitle ( );
    _bstr_t Getalbum ( );
    _bstr_t GetURL ( );
    void Putimage (
        IDispatch * _arg1 );
    void PutautoClick (
        VARIANT_BOOL _arg1 );
    void PutpreviewClick (
        VARIANT_BOOL _arg1 );
    HRESULT dismiss ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_album (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_URL (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_image (
        /*[in]*/ IDispatch * _arg1 ) = 0;
      virtual HRESULT __stdcall put_autoClick (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall put_previewClick (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall raw_dismiss ( ) = 0;
};

struct __declspec(uuid("bb17fff7-1692-4555-918a-6af7bfacedd2"))
IWMPButtonCtrlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT onclick ( );
};

struct __declspec(uuid("87291b51-0c8e-11d3-bb2a-00a0c93ca73a"))
WMPButtonCtrl;
    // [ default ] interface IWMPButtonCtrl
    // [ default, source ] dispinterface IWMPButtonCtrlEvents

struct __declspec(uuid("87291b50-0c8e-11d3-bb2a-00a0c93ca73a"))
IWMPButtonCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getimage,put=Putimage))
    _bstr_t image;
    __declspec(property(get=GethoverImage,put=PuthoverImage))
    _bstr_t hoverImage;
    __declspec(property(get=GetdownImage,put=PutdownImage))
    _bstr_t downImage;
    __declspec(property(get=GetdisabledImage,put=PutdisabledImage))
    _bstr_t disabledImage;
    __declspec(property(get=GethoverDownImage,put=PuthoverDownImage))
    _bstr_t hoverDownImage;
    __declspec(property(get=Gettiled,put=Puttiled))
    VARIANT_BOOL tiled;
    __declspec(property(get=GettransparencyColor,put=PuttransparencyColor))
    _bstr_t transparencyColor;
    __declspec(property(get=Getdown,put=Putdown))
    VARIANT_BOOL down;
    __declspec(property(get=Getsticky,put=Putsticky))
    VARIANT_BOOL sticky;
    __declspec(property(get=GetupToolTip,put=PutupToolTip))
    _bstr_t upToolTip;
    __declspec(property(get=GetdownToolTip,put=PutdownToolTip))
    _bstr_t downToolTip;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getimage ( );
    void Putimage (
        _bstr_t pVal );
    _bstr_t GethoverImage ( );
    void PuthoverImage (
        _bstr_t pVal );
    _bstr_t GetdownImage ( );
    void PutdownImage (
        _bstr_t pVal );
    _bstr_t GetdisabledImage ( );
    void PutdisabledImage (
        _bstr_t pVal );
    _bstr_t GethoverDownImage ( );
    void PuthoverDownImage (
        _bstr_t pVal );
    VARIANT_BOOL Gettiled ( );
    void Puttiled (
        VARIANT_BOOL pVal );
    _bstr_t GettransparencyColor ( );
    void PuttransparencyColor (
        _bstr_t pVal );
    VARIANT_BOOL Getdown ( );
    void Putdown (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Getsticky ( );
    void Putsticky (
        VARIANT_BOOL pVal );
    _bstr_t GetupToolTip ( );
    void PutupToolTip (
        _bstr_t pVal );
    _bstr_t GetdownToolTip ( );
    void PutdownToolTip (
        _bstr_t pVal );
    _bstr_t Getcursor ( );
    void Putcursor (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_image (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_image (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_hoverImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_hoverImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_downImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_downImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_disabledImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_disabledImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_hoverDownImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_hoverDownImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_tiled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_tiled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_transparencyColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_transparencyColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_down (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_down (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_sticky (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_sticky (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_upToolTip (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_upToolTip (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_downToolTip (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_downToolTip (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_cursor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_cursor (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("fc1880cf-83b9-43a7-a066-c44ce8c82583"))
WMPListBoxCtrl;
    // [ default ] interface IWMPListBoxCtrl

struct __declspec(uuid("fc1880ce-83b9-43a7-a066-c44ce8c82583"))
IWMPListBoxCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutpopUp))
    VARIANT_BOOL popUp;
    __declspec(property(get=GetfocusItem,put=PutfocusItem))
    long focusItem;
    __declspec(property(get=Getborder,put=Putborder))
    VARIANT_BOOL border;
    __declspec(property(get=Getsorted,put=Putsorted))
    VARIANT_BOOL sorted;
    __declspec(property(get=Getmultiselect,put=Putmultiselect))
    VARIANT_BOOL multiselect;
    __declspec(property(get=GetreadOnly,put=PutreadOnly))
    VARIANT_BOOL readOnly;
    __declspec(property(get=GetforegroundColor,put=PutforegroundColor))
    _bstr_t foregroundColor;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetfontSize,put=PutfontSize))
    long fontSize;
    __declspec(property(get=GetfontStyle,put=PutfontStyle))
    _bstr_t fontStyle;
    __declspec(property(get=GetfontFace,put=PutfontFace))
    _bstr_t fontFace;
    __declspec(property(get=GetselectedItem,put=PutselectedItem))
    long selectedItem;
    __declspec(property(get=GetitemCount))
    long itemCount;
    __declspec(property(get=GetfirstVisibleItem,put=PutfirstVisibleItem))
    long firstVisibleItem;

    //
    // Wrapper methods for error-handling
    //

    long GetselectedItem ( );
    void PutselectedItem (
        long pnPos );
    VARIANT_BOOL Getsorted ( );
    void Putsorted (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Getmultiselect ( );
    void Putmultiselect (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetreadOnly ( );
    void PutreadOnly (
        VARIANT_BOOL pVal );
    _bstr_t GetforegroundColor ( );
    void PutforegroundColor (
        _bstr_t pVal );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    long GetfontSize ( );
    void PutfontSize (
        long pVal );
    _bstr_t GetfontStyle ( );
    void PutfontStyle (
        _bstr_t pVal );
    _bstr_t GetfontFace ( );
    void PutfontFace (
        _bstr_t pVal );
    long GetitemCount ( );
    long GetfirstVisibleItem ( );
    void PutfirstVisibleItem (
        long pVal );
    void PutpopUp (
        VARIANT_BOOL _arg1 );
    long GetfocusItem ( );
    void PutfocusItem (
        long pVal );
    VARIANT_BOOL Getborder ( );
    void Putborder (
        VARIANT_BOOL pVal );
    _bstr_t getItem (
        long nPos );
    HRESULT insertItem (
        long nPos,
        _bstr_t newVal );
    HRESULT appendItem (
        _bstr_t newVal );
    HRESULT replaceItem (
        long nPos,
        _bstr_t newVal );
    HRESULT deleteItem (
        long nPos );
    HRESULT deleteAll ( );
    long findItem (
        long nStartIndex,
        _bstr_t newVal );
    long getNextSelectedItem (
        long nStartIndex );
    HRESULT setSelectedState (
        long nPos,
        VARIANT_BOOL vbSelected );
    HRESULT show ( );
    HRESULT dismiss ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_selectedItem (
        /*[out,retval]*/ long * pnPos ) = 0;
      virtual HRESULT __stdcall put_selectedItem (
        /*[in]*/ long pnPos ) = 0;
      virtual HRESULT __stdcall get_sorted (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_sorted (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_multiselect (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_multiselect (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_readOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_readOnly (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_foregroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_foregroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_fontSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_fontSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_fontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_fontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_fontFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_fontFace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_itemCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_firstVisibleItem (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_firstVisibleItem (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall put_popUp (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall get_focusItem (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_focusItem (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_border (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_border (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_getItem (
        /*[in]*/ long nPos,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_insertItem (
        /*[in]*/ long nPos,
        /*[in]*/ BSTR newVal ) = 0;
      virtual HRESULT __stdcall raw_appendItem (
        /*[in]*/ BSTR newVal ) = 0;
      virtual HRESULT __stdcall raw_replaceItem (
        /*[in]*/ long nPos,
        /*[in]*/ BSTR newVal ) = 0;
      virtual HRESULT __stdcall raw_deleteItem (
        /*[in]*/ long nPos ) = 0;
      virtual HRESULT __stdcall raw_deleteAll ( ) = 0;
      virtual HRESULT __stdcall raw_findItem (
        /*[in]*/ long nStartIndex,
        /*[in]*/ BSTR newVal,
        /*[out,retval]*/ long * pnPos ) = 0;
      virtual HRESULT __stdcall raw_getNextSelectedItem (
        /*[in]*/ long nStartIndex,
        /*[out,retval]*/ long * pnSelected ) = 0;
      virtual HRESULT __stdcall raw_setSelectedState (
        /*[in]*/ long nPos,
        /*[in]*/ VARIANT_BOOL vbSelected ) = 0;
      virtual HRESULT __stdcall raw_show ( ) = 0;
      virtual HRESULT __stdcall raw_dismiss ( ) = 0;
};

struct __declspec(uuid("d255dfb8-c22a-42cf-b8b7-f15d7bcf65d6"))
IWMPListBoxItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=Putvalue))
    _bstr_t value;

    //
    // Wrapper methods for error-handling
    //

    void Putvalue (
        _bstr_t _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_value (
        /*[in]*/ BSTR _arg1 ) = 0;
};

struct __declspec(uuid("63d9d30f-ae4c-4678-8ca8-5720f4fe4419"))
IWMPPlaylistCtrlColumn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetcolumnName,put=PutcolumnName))
    _bstr_t columnName;
    __declspec(property(get=GetcolumnID,put=PutcolumnID))
    _bstr_t columnID;
    __declspec(property(get=GetcolumnResizeMode,put=PutcolumnResizeMode))
    _bstr_t columnResizeMode;
    __declspec(property(get=GetcolumnWidth,put=PutcolumnWidth))
    long columnWidth;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetcolumnName ( );
    void PutcolumnName (
        _bstr_t pVal );
    _bstr_t GetcolumnID ( );
    void PutcolumnID (
        _bstr_t pVal );
    _bstr_t GetcolumnResizeMode ( );
    void PutcolumnResizeMode (
        _bstr_t pVal );
    long GetcolumnWidth ( );
    void PutcolumnWidth (
        long pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_columnName (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_columnName (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_columnID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_columnID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_columnResizeMode (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_columnResizeMode (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_columnWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_columnWidth (
        /*[in]*/ long pVal ) = 0;
};

struct __declspec(uuid("cdac14d2-8be4-11d3-bb48-00a0c93ca73a"))
IWMPSliderCtrlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT ondragbegin ( );
    HRESULT ondragend ( );
    HRESULT onpositionchange ( );
};

struct __declspec(uuid("f2bf2c90-405f-11d3-bb39-00a0c93ca73a"))
WMPSliderCtrl;
    // [ default ] interface IWMPSliderCtrl
    // [ default, source ] dispinterface IWMPSliderCtrlEvents

struct __declspec(uuid("f2bf2c8f-405f-11d3-bb39-00a0c93ca73a"))
IWMPSliderCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetbackgroundHoverImage,put=PutbackgroundHoverImage))
    _bstr_t backgroundHoverImage;
    __declspec(property(get=GetdisabledImage,put=PutdisabledImage))
    _bstr_t disabledImage;
    __declspec(property(get=GetthumbImage,put=PutthumbImage))
    _bstr_t thumbImage;
    __declspec(property(get=GetthumbHoverImage,put=PutthumbHoverImage))
    _bstr_t thumbHoverImage;
    __declspec(property(get=GetthumbDownImage,put=PutthumbDownImage))
    _bstr_t thumbDownImage;
    __declspec(property(get=GetthumbDisabledImage,put=PutthumbDisabledImage))
    _bstr_t thumbDisabledImage;
    __declspec(property(get=Getmin,put=Putmin))
    float min;
    __declspec(property(get=Getmax,put=Putmax))
    float max;
    __declspec(property(get=Getvalue,put=Putvalue))
    float value;
    __declspec(property(get=GettoolTip,put=PuttoolTip))
    _bstr_t toolTip;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;
    __declspec(property(get=GetborderSize,put=PutborderSize))
    int borderSize;
    __declspec(property(get=GetforegroundHoverImage,put=PutforegroundHoverImage))
    _bstr_t foregroundHoverImage;
    __declspec(property(get=GetforegroundProgress,put=PutforegroundProgress))
    float foregroundProgress;
    __declspec(property(get=GetuseForegroundProgress,put=PutuseForegroundProgress))
    VARIANT_BOOL useForegroundProgress;
    __declspec(property(get=Getdirection,put=Putdirection))
    _bstr_t direction;
    __declspec(property(get=Getslide,put=Putslide))
    VARIANT_BOOL slide;
    __declspec(property(get=Gettiled,put=Puttiled))
    VARIANT_BOOL tiled;
    __declspec(property(get=GetforegroundColor,put=PutforegroundColor))
    _bstr_t foregroundColor;
    __declspec(property(get=GetforegroundEndColor,put=PutforegroundEndColor))
    _bstr_t foregroundEndColor;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetbackgroundEndColor,put=PutbackgroundEndColor))
    _bstr_t backgroundEndColor;
    __declspec(property(get=GetdisabledColor,put=PutdisabledColor))
    _bstr_t disabledColor;
    __declspec(property(get=GettransparencyColor,put=PuttransparencyColor))
    _bstr_t transparencyColor;
    __declspec(property(get=GetforegroundImage,put=PutforegroundImage))
    _bstr_t foregroundImage;
    __declspec(property(get=GetbackgroundImage,put=PutbackgroundImage))
    _bstr_t backgroundImage;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getdirection ( );
    void Putdirection (
        _bstr_t pVal );
    VARIANT_BOOL Getslide ( );
    void Putslide (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Gettiled ( );
    void Puttiled (
        VARIANT_BOOL pVal );
    _bstr_t GetforegroundColor ( );
    void PutforegroundColor (
        _bstr_t pVal );
    _bstr_t GetforegroundEndColor ( );
    void PutforegroundEndColor (
        _bstr_t pVal );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    _bstr_t GetbackgroundEndColor ( );
    void PutbackgroundEndColor (
        _bstr_t pVal );
    _bstr_t GetdisabledColor ( );
    void PutdisabledColor (
        _bstr_t pVal );
    _bstr_t GettransparencyColor ( );
    void PuttransparencyColor (
        _bstr_t pVal );
    _bstr_t GetforegroundImage ( );
    void PutforegroundImage (
        _bstr_t pVal );
    _bstr_t GetbackgroundImage ( );
    void PutbackgroundImage (
        _bstr_t pVal );
    _bstr_t GetbackgroundHoverImage ( );
    void PutbackgroundHoverImage (
        _bstr_t pVal );
    _bstr_t GetdisabledImage ( );
    void PutdisabledImage (
        _bstr_t pVal );
    _bstr_t GetthumbImage ( );
    void PutthumbImage (
        _bstr_t pVal );
    _bstr_t GetthumbHoverImage ( );
    void PutthumbHoverImage (
        _bstr_t pVal );
    _bstr_t GetthumbDownImage ( );
    void PutthumbDownImage (
        _bstr_t pVal );
    _bstr_t GetthumbDisabledImage ( );
    void PutthumbDisabledImage (
        _bstr_t pVal );
    float Getmin ( );
    void Putmin (
        float pVal );
    float Getmax ( );
    void Putmax (
        float pVal );
    float Getvalue ( );
    void Putvalue (
        float pVal );
    _bstr_t GettoolTip ( );
    void PuttoolTip (
        _bstr_t pVal );
    _bstr_t Getcursor ( );
    void Putcursor (
        _bstr_t pVal );
    int GetborderSize ( );
    void PutborderSize (
        int pVal );
    _bstr_t GetforegroundHoverImage ( );
    void PutforegroundHoverImage (
        _bstr_t pVal );
    float GetforegroundProgress ( );
    void PutforegroundProgress (
        float pVal );
    VARIANT_BOOL GetuseForegroundProgress ( );
    void PutuseForegroundProgress (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_direction (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_direction (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_slide (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_slide (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_tiled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_tiled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_foregroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_foregroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_foregroundEndColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_foregroundEndColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundEndColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundEndColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_disabledColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_disabledColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_transparencyColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_transparencyColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_foregroundImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_foregroundImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundHoverImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundHoverImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_disabledImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_disabledImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_thumbImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_thumbImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_thumbHoverImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_thumbHoverImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_thumbDownImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_thumbDownImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_thumbDisabledImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_thumbDisabledImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_min (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_min (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_max (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_max (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_value (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_value (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_toolTip (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_toolTip (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_cursor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_cursor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_borderSize (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_borderSize (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_foregroundHoverImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_foregroundHoverImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_foregroundProgress (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_foregroundProgress (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_useForegroundProgress (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_useForegroundProgress (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("a85c0477-714c-4a06-b9f6-7c8ca38b45dc"))
IWMPVideoCtrlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT onvideostart ( );
    HRESULT onvideoend ( );
};

struct __declspec(uuid("61cecf11-fc3a-11d2-a1cd-005004602752"))
WMPVideoCtrl;
    // [ default ] interface IWMPVideoCtrl
    // [ default, source ] dispinterface IWMPVideoCtrlEvents

struct __declspec(uuid("61cecf10-fc3a-11d2-a1cd-005004602752"))
IWMPVideoCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getwindowless,put=Putwindowless))
    VARIANT_BOOL windowless;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetshrinkToFit,put=PutshrinkToFit))
    VARIANT_BOOL shrinkToFit;
    __declspec(property(get=GetmaintainAspectRatio,put=PutmaintainAspectRatio))
    VARIANT_BOOL maintainAspectRatio;
    __declspec(property(get=GettoolTip,put=PuttoolTip))
    _bstr_t toolTip;
    __declspec(property(get=GetfullScreen,put=PutfullScreen))
    VARIANT_BOOL fullScreen;
    __declspec(property(get=GetstretchToFit,put=PutstretchToFit))
    VARIANT_BOOL stretchToFit;
    __declspec(property(get=Getzoom,put=Putzoom))
    long zoom;

    //
    // Wrapper methods for error-handling
    //

    void Putwindowless (
        VARIANT_BOOL pbClipped );
    VARIANT_BOOL Getwindowless ( );
    void Putcursor (
        _bstr_t pbstrCursor );
    _bstr_t Getcursor ( );
    void PutbackgroundColor (
        _bstr_t pbstrColor );
    _bstr_t GetbackgroundColor ( );
    void PutmaintainAspectRatio (
        VARIANT_BOOL pbMaintainAspectRatio );
    VARIANT_BOOL GetmaintainAspectRatio ( );
    void PuttoolTip (
        _bstr_t bstrToolTip );
    _bstr_t GettoolTip ( );
    VARIANT_BOOL GetfullScreen ( );
    void PutfullScreen (
        VARIANT_BOOL pbFullScreen );
    void PutshrinkToFit (
        VARIANT_BOOL pbShrinkToFit );
    VARIANT_BOOL GetshrinkToFit ( );
    void PutstretchToFit (
        VARIANT_BOOL pbStretchToFit );
    VARIANT_BOOL GetstretchToFit ( );
    void Putzoom (
        long pzoom );
    long Getzoom ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_windowless (
        /*[in]*/ VARIANT_BOOL pbClipped ) = 0;
      virtual HRESULT __stdcall get_windowless (
        /*[out,retval]*/ VARIANT_BOOL * pbClipped ) = 0;
      virtual HRESULT __stdcall put_cursor (
        /*[in]*/ BSTR pbstrCursor ) = 0;
      virtual HRESULT __stdcall get_cursor (
        /*[out,retval]*/ BSTR * pbstrCursor ) = 0;
      virtual HRESULT __stdcall put_backgroundColor (
        /*[in]*/ BSTR pbstrColor ) = 0;
      virtual HRESULT __stdcall get_backgroundColor (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall put_maintainAspectRatio (
        /*[in]*/ VARIANT_BOOL pbMaintainAspectRatio ) = 0;
      virtual HRESULT __stdcall get_maintainAspectRatio (
        /*[out,retval]*/ VARIANT_BOOL * pbMaintainAspectRatio ) = 0;
      virtual HRESULT __stdcall put_toolTip (
        /*[in]*/ BSTR bstrToolTip ) = 0;
      virtual HRESULT __stdcall get_toolTip (
        /*[out,retval]*/ BSTR * bstrToolTip ) = 0;
      virtual HRESULT __stdcall get_fullScreen (
        /*[out,retval]*/ VARIANT_BOOL * pbFullScreen ) = 0;
      virtual HRESULT __stdcall put_fullScreen (
        /*[in]*/ VARIANT_BOOL pbFullScreen ) = 0;
      virtual HRESULT __stdcall put_shrinkToFit (
        /*[in]*/ VARIANT_BOOL pbShrinkToFit ) = 0;
      virtual HRESULT __stdcall get_shrinkToFit (
        /*[out,retval]*/ VARIANT_BOOL * pbShrinkToFit ) = 0;
      virtual HRESULT __stdcall put_stretchToFit (
        /*[in]*/ VARIANT_BOOL pbStretchToFit ) = 0;
      virtual HRESULT __stdcall get_stretchToFit (
        /*[out,retval]*/ VARIANT_BOOL * pbStretchToFit ) = 0;
      virtual HRESULT __stdcall put_zoom (
        /*[in]*/ long pzoom ) = 0;
      virtual HRESULT __stdcall get_zoom (
        /*[out,retval]*/ long * pzoom ) = 0;
};

struct __declspec(uuid("47dea830-d619-4154-b8d8-6b74845d6a2d"))
WMPEffects;
    // [ default ] interface IWMPEffectsCtrl

struct __declspec(uuid("a9efab80-0a60-4c3f-bbd1-4558dd2a9769"))
IWMPEffectsCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetcurrentEffect,put=PutcurrentEffect))
    IDispatchPtr currentEffect;
    __declspec(property(get=GetcurrentEffectTitle))
    _bstr_t currentEffectTitle;
    __declspec(property(get=GetcurrentEffectType,put=PutcurrentEffectType))
    _bstr_t currentEffectType;
    __declspec(property(get=GetcurrentPreset,put=PutcurrentPreset))
    long currentPreset;
    __declspec(property(get=GetcurrentPresetTitle))
    _bstr_t currentPresetTitle;
    __declspec(property(get=GetcurrentEffectPresetCount))
    long currentEffectPresetCount;
    __declspec(property(get=GetfullScreen,put=PutfullScreen))
    VARIANT_BOOL fullScreen;
    __declspec(property(get=GeteffectCanGoFullScreen))
    VARIANT_BOOL effectCanGoFullScreen;
    __declspec(property(get=GeteffectHasPropertyPage))
    VARIANT_BOOL effectHasPropertyPage;
    __declspec(property(get=GeteffectCount))
    long effectCount;
    __declspec(property(get=GeteffectTitle))
    _bstr_t effectTitle[];
    __declspec(property(get=GeteffectType))
    _bstr_t effectType[];
    __declspec(property(get=Getwindowed,put=Putwindowed))
    VARIANT_BOOL windowed;
    __declspec(property(get=GetallowAll,put=PutallowAll))
    VARIANT_BOOL allowAll;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Getwindowed ( );
    void Putwindowed (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetallowAll ( );
    void PutallowAll (
        VARIANT_BOOL pVal );
    void PutcurrentEffectType (
        _bstr_t pVal );
    _bstr_t GetcurrentEffectType ( );
    _bstr_t GetcurrentEffectTitle ( );
    HRESULT next ( );
    HRESULT previous ( );
    HRESULT settings ( );
    IDispatchPtr GetcurrentEffect ( );
    void PutcurrentEffect (
        IDispatch * p );
    HRESULT nextEffect ( );
    HRESULT previousEffect ( );
    HRESULT nextPreset ( );
    HRESULT previousPreset ( );
    long GetcurrentPreset ( );
    void PutcurrentPreset (
        long pVal );
    _bstr_t GetcurrentPresetTitle ( );
    long GetcurrentEffectPresetCount ( );
    VARIANT_BOOL GetfullScreen ( );
    void PutfullScreen (
        VARIANT_BOOL pbFullScreen );
    VARIANT_BOOL GeteffectCanGoFullScreen ( );
    VARIANT_BOOL GeteffectHasPropertyPage ( );
    long GeteffectCount ( );
    _bstr_t GeteffectTitle (
        long index );
    _bstr_t GeteffectType (
        long index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_windowed (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_windowed (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_allowAll (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_allowAll (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall put_currentEffectType (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_currentEffectType (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_currentEffectTitle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_next ( ) = 0;
      virtual HRESULT __stdcall raw_previous ( ) = 0;
      virtual HRESULT __stdcall raw_settings ( ) = 0;
      virtual HRESULT __stdcall get_currentEffect (
        /*[out,retval]*/ IDispatch * * p ) = 0;
      virtual HRESULT __stdcall put_currentEffect (
        /*[in]*/ IDispatch * p ) = 0;
      virtual HRESULT __stdcall raw_nextEffect ( ) = 0;
      virtual HRESULT __stdcall raw_previousEffect ( ) = 0;
      virtual HRESULT __stdcall raw_nextPreset ( ) = 0;
      virtual HRESULT __stdcall raw_previousPreset ( ) = 0;
      virtual HRESULT __stdcall get_currentPreset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_currentPreset (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_currentPresetTitle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_currentEffectPresetCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_fullScreen (
        /*[out,retval]*/ VARIANT_BOOL * pbFullScreen ) = 0;
      virtual HRESULT __stdcall put_fullScreen (
        /*[in]*/ VARIANT_BOOL pbFullScreen ) = 0;
      virtual HRESULT __stdcall get_effectCanGoFullScreen (
        /*[out,retval]*/ VARIANT_BOOL * pbFullScreen ) = 0;
      virtual HRESULT __stdcall get_effectHasPropertyPage (
        /*[out,retval]*/ VARIANT_BOOL * pbPropertyPage ) = 0;
      virtual HRESULT __stdcall get_effectCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_effectTitle (
        /*[in]*/ long index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_effectType (
        /*[in]*/ long index,
        /*[out,retval]*/ BSTR * pVal ) = 0;
};

struct __declspec(uuid("93eb32f5-87b1-45ad-acc6-0f2483db83bb"))
WMPEqualizerSettingsCtrl;
    // [ default ] interface IWMPEqualizerSettingsCtrl

struct __declspec(uuid("2bd3716f-a914-49fb-8655-996d5f495498"))
IWMPEqualizerSettingsCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetgainLevel5,put=PutgainLevel5))
    float gainLevel5;
    __declspec(property(get=GetgainLevel6,put=PutgainLevel6))
    float gainLevel6;
    __declspec(property(get=GetgainLevel7,put=PutgainLevel7))
    float gainLevel7;
    __declspec(property(get=GetgainLevel8,put=PutgainLevel8))
    float gainLevel8;
    __declspec(property(get=GetgainLevel9,put=PutgainLevel9))
    float gainLevel9;
    __declspec(property(get=GetgainLevel10,put=PutgainLevel10))
    float gainLevel10;
    __declspec(property(get=GetgainLevels,put=PutgainLevels))
    float gainLevels[];
    __declspec(property(get=GetcurrentPreset,put=PutcurrentPreset))
    long currentPreset;
    __declspec(property(get=GetcurrentPresetTitle))
    _bstr_t currentPresetTitle;
    __declspec(property(get=GetpresetCount))
    long presetCount;
    __declspec(property(get=GetenhancedAudio,put=PutenhancedAudio))
    VARIANT_BOOL enhancedAudio;
    __declspec(property(get=GetspeakerSize,put=PutspeakerSize))
    long speakerSize;
    __declspec(property(get=GetcurrentSpeakerName))
    _bstr_t currentSpeakerName;
    __declspec(property(get=GettruBassLevel,put=PuttruBassLevel))
    long truBassLevel;
    __declspec(property(get=GetwowLevel,put=PutwowLevel))
    long wowLevel;
    __declspec(property(get=GetenableSplineTension,put=PutenableSplineTension))
    VARIANT_BOOL enableSplineTension;
    __declspec(property(get=GetsplineTension,put=PutsplineTension))
    float splineTension;
    __declspec(property(get=GetpresetTitle))
    _bstr_t presetTitle[];
    __declspec(property(get=Getnormalization,put=Putnormalization))
    VARIANT_BOOL normalization;
    __declspec(property(get=GetnormalizationAverage))
    float normalizationAverage;
    __declspec(property(get=GetnormalizationPeak))
    float normalizationPeak;
    __declspec(property(get=GetcrossFade,put=PutcrossFade))
    VARIANT_BOOL crossFade;
    __declspec(property(get=GetcrossFadeWindow,put=PutcrossFadeWindow))
    long crossFadeWindow;
    __declspec(property(get=Getbypass,put=Putbypass))
    VARIANT_BOOL bypass;
    __declspec(property(get=Getbands))
    long bands;
    __declspec(property(get=GetgainLevel1,put=PutgainLevel1))
    float gainLevel1;
    __declspec(property(get=GetgainLevel2,put=PutgainLevel2))
    float gainLevel2;
    __declspec(property(get=GetgainLevel3,put=PutgainLevel3))
    float gainLevel3;
    __declspec(property(get=GetgainLevel4,put=PutgainLevel4))
    float gainLevel4;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Getbypass ( );
    void Putbypass (
        VARIANT_BOOL pVal );
    float GetgainLevel1 ( );
    void PutgainLevel1 (
        float pflLevel );
    float GetgainLevel2 ( );
    void PutgainLevel2 (
        float pflLevel );
    float GetgainLevel3 ( );
    void PutgainLevel3 (
        float pflLevel );
    float GetgainLevel4 ( );
    void PutgainLevel4 (
        float pflLevel );
    float GetgainLevel5 ( );
    void PutgainLevel5 (
        float pflLevel );
    float GetgainLevel6 ( );
    void PutgainLevel6 (
        float pflLevel );
    float GetgainLevel7 ( );
    void PutgainLevel7 (
        float pflLevel );
    float GetgainLevel8 ( );
    void PutgainLevel8 (
        float pflLevel );
    float GetgainLevel9 ( );
    void PutgainLevel9 (
        float pflLevel );
    float GetgainLevel10 ( );
    void PutgainLevel10 (
        float pflLevel );
    float GetgainLevels (
        long iIndex );
    void PutgainLevels (
        long iIndex,
        float pflLevel );
    HRESULT reset ( );
    long Getbands ( );
    HRESULT nextPreset ( );
    HRESULT previousPreset ( );
    long GetcurrentPreset ( );
    void PutcurrentPreset (
        long pVal );
    _bstr_t GetcurrentPresetTitle ( );
    long GetpresetCount ( );
    VARIANT_BOOL GetenhancedAudio ( );
    void PutenhancedAudio (
        VARIANT_BOOL pfVal );
    long GetspeakerSize ( );
    void PutspeakerSize (
        long plVal );
    _bstr_t GetcurrentSpeakerName ( );
    long GettruBassLevel ( );
    void PuttruBassLevel (
        long plTruBassLevel );
    long GetwowLevel ( );
    void PutwowLevel (
        long plWowLevel );
    float GetsplineTension ( );
    void PutsplineTension (
        float pflSplineTension );
    VARIANT_BOOL GetenableSplineTension ( );
    void PutenableSplineTension (
        VARIANT_BOOL pfEnableSplineTension );
    _bstr_t GetpresetTitle (
        long iIndex );
    VARIANT_BOOL Getnormalization ( );
    void Putnormalization (
        VARIANT_BOOL pfVal );
    float GetnormalizationAverage ( );
    float GetnormalizationPeak ( );
    VARIANT_BOOL GetcrossFade ( );
    void PutcrossFade (
        VARIANT_BOOL pfVal );
    long GetcrossFadeWindow ( );
    void PutcrossFadeWindow (
        long plWindow );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_bypass (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_bypass (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_gainLevel1 (
        /*[out,retval]*/ float * pflLevel ) = 0;
      virtual HRESULT __stdcall put_gainLevel1 (
        /*[in]*/ float pflLevel ) = 0;
      virtual HRESULT __stdcall get_gainLevel2 (
        /*[out,retval]*/ float * pflLevel ) = 0;
      virtual HRESULT __stdcall put_gainLevel2 (
        /*[in]*/ float pflLevel ) = 0;
      virtual HRESULT __stdcall get_gainLevel3 (
        /*[out,retval]*/ float * pflLevel ) = 0;
      virtual HRESULT __stdcall put_gainLevel3 (
        /*[in]*/ float pflLevel ) = 0;
      virtual HRESULT __stdcall get_gainLevel4 (
        /*[out,retval]*/ float * pflLevel ) = 0;
      virtual HRESULT __stdcall put_gainLevel4 (
        /*[in]*/ float pflLevel ) = 0;
      virtual HRESULT __stdcall get_gainLevel5 (
        /*[out,retval]*/ float * pflLevel ) = 0;
      virtual HRESULT __stdcall put_gainLevel5 (
        /*[in]*/ float pflLevel ) = 0;
      virtual HRESULT __stdcall get_gainLevel6 (
        /*[out,retval]*/ float * pflLevel ) = 0;
      virtual HRESULT __stdcall put_gainLevel6 (
        /*[in]*/ float pflLevel ) = 0;
      virtual HRESULT __stdcall get_gainLevel7 (
        /*[out,retval]*/ float * pflLevel ) = 0;
      virtual HRESULT __stdcall put_gainLevel7 (
        /*[in]*/ float pflLevel ) = 0;
      virtual HRESULT __stdcall get_gainLevel8 (
        /*[out,retval]*/ float * pflLevel ) = 0;
      virtual HRESULT __stdcall put_gainLevel8 (
        /*[in]*/ float pflLevel ) = 0;
      virtual HRESULT __stdcall get_gainLevel9 (
        /*[out,retval]*/ float * pflLevel ) = 0;
      virtual HRESULT __stdcall put_gainLevel9 (
        /*[in]*/ float pflLevel ) = 0;
      virtual HRESULT __stdcall get_gainLevel10 (
        /*[out,retval]*/ float * pflLevel ) = 0;
      virtual HRESULT __stdcall put_gainLevel10 (
        /*[in]*/ float pflLevel ) = 0;
      virtual HRESULT __stdcall get_gainLevels (
        /*[in]*/ long iIndex,
        /*[out,retval]*/ float * pflLevel ) = 0;
      virtual HRESULT __stdcall put_gainLevels (
        /*[in]*/ long iIndex,
        /*[in]*/ float pflLevel ) = 0;
      virtual HRESULT __stdcall raw_reset ( ) = 0;
      virtual HRESULT __stdcall get_bands (
        /*[out,retval]*/ long * pbands ) = 0;
      virtual HRESULT __stdcall raw_nextPreset ( ) = 0;
      virtual HRESULT __stdcall raw_previousPreset ( ) = 0;
      virtual HRESULT __stdcall get_currentPreset (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_currentPreset (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_currentPresetTitle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_presetCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_enhancedAudio (
        /*[out,retval]*/ VARIANT_BOOL * pfVal ) = 0;
      virtual HRESULT __stdcall put_enhancedAudio (
        /*[in]*/ VARIANT_BOOL pfVal ) = 0;
      virtual HRESULT __stdcall get_speakerSize (
        /*[out,retval]*/ long * plVal ) = 0;
      virtual HRESULT __stdcall put_speakerSize (
        /*[in]*/ long plVal ) = 0;
      virtual HRESULT __stdcall get_currentSpeakerName (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_truBassLevel (
        /*[out,retval]*/ long * plTruBassLevel ) = 0;
      virtual HRESULT __stdcall put_truBassLevel (
        /*[in]*/ long plTruBassLevel ) = 0;
      virtual HRESULT __stdcall get_wowLevel (
        /*[out,retval]*/ long * plWowLevel ) = 0;
      virtual HRESULT __stdcall put_wowLevel (
        /*[in]*/ long plWowLevel ) = 0;
      virtual HRESULT __stdcall get_splineTension (
        /*[out,retval]*/ float * pflSplineTension ) = 0;
      virtual HRESULT __stdcall put_splineTension (
        /*[in]*/ float pflSplineTension ) = 0;
      virtual HRESULT __stdcall get_enableSplineTension (
        /*[out,retval]*/ VARIANT_BOOL * pfEnableSplineTension ) = 0;
      virtual HRESULT __stdcall put_enableSplineTension (
        /*[in]*/ VARIANT_BOOL pfEnableSplineTension ) = 0;
      virtual HRESULT __stdcall get_presetTitle (
        /*[in]*/ long iIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall get_normalization (
        /*[out,retval]*/ VARIANT_BOOL * pfVal ) = 0;
      virtual HRESULT __stdcall put_normalization (
        /*[in]*/ VARIANT_BOOL pfVal ) = 0;
      virtual HRESULT __stdcall get_normalizationAverage (
        /*[out,retval]*/ float * pflAverage ) = 0;
      virtual HRESULT __stdcall get_normalizationPeak (
        /*[out,retval]*/ float * pflPeak ) = 0;
      virtual HRESULT __stdcall get_crossFade (
        /*[out,retval]*/ VARIANT_BOOL * pfVal ) = 0;
      virtual HRESULT __stdcall put_crossFade (
        /*[in]*/ VARIANT_BOOL pfVal ) = 0;
      virtual HRESULT __stdcall get_crossFadeWindow (
        /*[out,retval]*/ long * plWindow ) = 0;
      virtual HRESULT __stdcall put_crossFadeWindow (
        /*[in]*/ long plWindow ) = 0;
};

struct __declspec(uuid("ae7bfafe-dcc8-4a73-92c8-cc300ca88859"))
WMPVideoSettingsCtrl;
    // [ default ] interface IWMPVideoSettingsCtrl

struct __declspec(uuid("07ec23da-ef73-4bde-a40f-f269e0b7afd6"))
IWMPVideoSettingsCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getbrightness,put=Putbrightness))
    long brightness;
    __declspec(property(get=Getcontrast,put=Putcontrast))
    long contrast;
    __declspec(property(get=Gethue,put=Puthue))
    long hue;
    __declspec(property(get=Getsaturation,put=Putsaturation))
    long saturation;

    //
    // Wrapper methods for error-handling
    //

    long Getbrightness ( );
    void Putbrightness (
        long pVal );
    long Getcontrast ( );
    void Putcontrast (
        long pVal );
    long Gethue ( );
    void Puthue (
        long pVal );
    long Getsaturation ( );
    void Putsaturation (
        long pVal );
    HRESULT reset ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_brightness (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_brightness (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_contrast (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_contrast (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_hue (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_hue (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_saturation (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_saturation (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_reset ( ) = 0;
};

struct __declspec(uuid("1ea16d11-dcb1-41fe-bc17-42cdfbef8f53"))
WMPDolbyDigitalSettingsCtrl;
    // [ default ] interface IWMPDolbyDigitalSettingsCtrl

struct __declspec(uuid("bbd6801a-a1d4-4d05-9f2d-29e0024c3fd9"))
IWMPDolbyDigitalSettingsCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetcurrentPreset,put=PutcurrentPreset))
    long currentPreset;

    //
    // Wrapper methods for error-handling
    //

    HRESULT reset ( );
    long GetcurrentPreset ( );
    void PutcurrentPreset (
        long plCurrentPreset );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_reset ( ) = 0;
      virtual HRESULT __stdcall get_currentPreset (
        /*[out,retval]*/ long * plCurrentPreset ) = 0;
      virtual HRESULT __stdcall put_currentPreset (
        /*[in]*/ long plCurrentPreset ) = 0;
};

struct __declspec(uuid("d9de732a-aee9-4503-9d11-5605589977a8"))
WMPLibraryTreeCtrl;
    // [ default ] interface IWMPLibraryTreeCtrl

struct __declspec(uuid("6342fced-25ea-4033-bddb-d049a14382d3"))
WMPEditCtrl;
    // [ default ] interface IWMPEditCtrl

struct __declspec(uuid("70e1217c-c617-4cfd-bd8a-69ca2043e70b"))
IWMPEditCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getvalue,put=Putvalue))
    _bstr_t value;
    __declspec(property(get=Getborder,put=Putborder))
    VARIANT_BOOL border;
    __declspec(property(get=Getjustification,put=Putjustification))
    _bstr_t justification;
    __declspec(property(get=GeteditStyle,put=PuteditStyle))
    _bstr_t editStyle;
    __declspec(property(get=GetwordWrap,put=PutwordWrap))
    VARIANT_BOOL wordWrap;
    __declspec(property(get=GetreadOnly,put=PutreadOnly))
    VARIANT_BOOL readOnly;
    __declspec(property(get=GetforegroundColor,put=PutforegroundColor))
    _bstr_t foregroundColor;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetfontSize,put=PutfontSize))
    long fontSize;
    __declspec(property(get=GetfontStyle,put=PutfontStyle))
    _bstr_t fontStyle;
    __declspec(property(get=GetfontFace,put=PutfontFace))
    _bstr_t fontFace;
    __declspec(property(get=GettextLimit,put=PuttextLimit))
    long textLimit;
    __declspec(property(get=GetlineCount))
    long lineCount;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getvalue ( );
    void Putvalue (
        _bstr_t pVal );
    VARIANT_BOOL Getborder ( );
    void Putborder (
        VARIANT_BOOL pVal );
    _bstr_t Getjustification ( );
    void Putjustification (
        _bstr_t pVal );
    _bstr_t GeteditStyle ( );
    void PuteditStyle (
        _bstr_t pVal );
    VARIANT_BOOL GetwordWrap ( );
    void PutwordWrap (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetreadOnly ( );
    void PutreadOnly (
        VARIANT_BOOL pVal );
    _bstr_t GetforegroundColor ( );
    void PutforegroundColor (
        _bstr_t pVal );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    long GetfontSize ( );
    void PutfontSize (
        long pVal );
    _bstr_t GetfontStyle ( );
    void PutfontStyle (
        _bstr_t pVal );
    _bstr_t GetfontFace ( );
    void PutfontFace (
        _bstr_t pVal );
    long GettextLimit ( );
    void PuttextLimit (
        long pVal );
    long GetlineCount ( );
    _bstr_t getLine (
        long nIndex );
    long getSelectionStart ( );
    long getSelectionEnd ( );
    HRESULT setSelection (
        long nStart,
        long nEnd );
    HRESULT replaceSelection (
        _bstr_t newVal );
    long getLineIndex (
        long nIndex );
    long getLineFromChar (
        long nPosition );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_value (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_value (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_border (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_border (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_justification (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_justification (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_editStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_editStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_wordWrap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_wordWrap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_readOnly (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_readOnly (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_foregroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_foregroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_fontSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_fontSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_fontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_fontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_fontFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_fontFace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_textLimit (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_textLimit (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_lineCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall raw_getLine (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall raw_getSelectionStart (
        /*[out,retval]*/ long * pnStart ) = 0;
      virtual HRESULT __stdcall raw_getSelectionEnd (
        /*[out,retval]*/ long * pnEnd ) = 0;
      virtual HRESULT __stdcall raw_setSelection (
        /*[in]*/ long nStart,
        /*[in]*/ long nEnd ) = 0;
      virtual HRESULT __stdcall raw_replaceSelection (
        /*[in]*/ BSTR newVal ) = 0;
      virtual HRESULT __stdcall raw_getLineIndex (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ long * pnPosition ) = 0;
      virtual HRESULT __stdcall raw_getLineFromChar (
        /*[in]*/ long nPosition,
        /*[out,retval]*/ long * pnLine ) = 0;
};

struct __declspec(uuid("a8a55fac-82ea-4bd7-bd7b-11586a4d99e4"))
WMPSkinList;
    // [ default ] interface IWMPSkinList

struct __declspec(uuid("8cea03a2-d0c5-4e97-9c38-a676a639a51d"))
IWMPSkinList : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT updateBasketColumns ( );
    HRESULT highContrastChange ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_updateBasketColumns ( ) = 0;
      virtual HRESULT __stdcall raw_highContrastChange ( ) = 0;
};

struct __declspec(uuid("5d0ad945-289e-45c5-a9c6-f301f0152108"))
IWMPPluginUIHost : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetobjectID,put=PutobjectID))
    _bstr_t objectID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    _bstr_t GetobjectID ( );
    void PutobjectID (
        _bstr_t pVal );
    _variant_t getProperty (
        _bstr_t bstrName );
    HRESULT setProperty (
        _bstr_t bstrName,
        const _variant_t & newVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_backgroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_objectID (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_objectID (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_getProperty (
        /*[in]*/ BSTR bstrName,
        /*[out,retval]*/ VARIANT * pVal ) = 0;
      virtual HRESULT __stdcall raw_setProperty (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ VARIANT newVal ) = 0;
};

struct __declspec(uuid("bab3768b-8883-4aec-9f9b-e14c947913ef"))
WMPMenuCtrl;
    // [ default ] interface IWMPMenuCtrl

struct __declspec(uuid("158a7adc-33da-4039-a553-bddbbe389f5c"))
IWMPMenuCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetshowFlags,put=PutshowFlags))
    long showFlags;

    //
    // Wrapper methods for error-handling
    //

    HRESULT deleteAllItems ( );
    HRESULT appendItem (
        long nID,
        _bstr_t bstrItem );
    HRESULT appendSeparator ( );
    HRESULT enableItem (
        long nID,
        VARIANT_BOOL newVal );
    HRESULT checkItem (
        long nID,
        VARIANT_BOOL newVal );
    HRESULT checkRadioItem (
        long nID,
        VARIANT_BOOL newVal );
    long GetshowFlags ( );
    void PutshowFlags (
        long pVal );
    long show ( );
    HRESULT showEx (
        long nID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_deleteAllItems ( ) = 0;
      virtual HRESULT __stdcall raw_appendItem (
        /*[in]*/ long nID,
        /*[in]*/ BSTR bstrItem ) = 0;
      virtual HRESULT __stdcall raw_appendSeparator ( ) = 0;
      virtual HRESULT __stdcall raw_enableItem (
        /*[in]*/ long nID,
        /*[in]*/ VARIANT_BOOL newVal ) = 0;
      virtual HRESULT __stdcall raw_checkItem (
        /*[in]*/ long nID,
        /*[in]*/ VARIANT_BOOL newVal ) = 0;
      virtual HRESULT __stdcall raw_checkRadioItem (
        /*[in]*/ long nID,
        /*[in]*/ VARIANT_BOOL newVal ) = 0;
      virtual HRESULT __stdcall get_showFlags (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_showFlags (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall raw_show (
        /*[out,retval]*/ long * pnID ) = 0;
      virtual HRESULT __stdcall raw_showEx (
        /*[in]*/ long nID ) = 0;
};

struct __declspec(uuid("6b28f900-8d64-4b80-9963-cc52ddd1fbb4"))
WMPAutoMenuCtrl;
    // [ default ] interface IWMPAutoMenuCtrl

struct __declspec(uuid("1ad13e0b-4f3a-41df-9be2-f9e6fe0a7875"))
IWMPAutoMenuCtrl : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT show (
        _bstr_t newVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_show (
        /*[in]*/ BSTR newVal ) = 0;
};

struct __declspec(uuid("ae3b6831-25a9-11d3-bd41-00c04f6ea5ae"))
WMPRegionalButtonCtrl;
    // [ default ] interface IWMPRegionalButtonCtrl

struct __declspec(uuid("58d507b1-2354-11d3-bd41-00c04f6ea5ae"))
IWMPRegionalButtonCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GethueShift,put=PuthueShift))
    float hueShift;
    __declspec(property(get=Getsaturation,put=Putsaturation))
    float saturation;
    __declspec(property(get=GethoverHoverImage,put=PuthoverHoverImage))
    _bstr_t hoverHoverImage;
    __declspec(property(get=Getimage,put=Putimage))
    _bstr_t image;
    __declspec(property(get=GethoverImage,put=PuthoverImage))
    _bstr_t hoverImage;
    __declspec(property(get=GetdownImage,put=PutdownImage))
    _bstr_t downImage;
    __declspec(property(get=GethoverDownImage,put=PuthoverDownImage))
    _bstr_t hoverDownImage;
    __declspec(property(get=GetdisabledImage,put=PutdisabledImage))
    _bstr_t disabledImage;
    __declspec(property(get=GetmappingImage,put=PutmappingImage))
    _bstr_t mappingImage;
    __declspec(property(get=GettransparencyColor,put=PuttransparencyColor))
    _bstr_t transparencyColor;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;
    __declspec(property(get=GetshowBackground,put=PutshowBackground))
    VARIANT_BOOL showBackground;
    __declspec(property(get=Getradio,put=Putradio))
    VARIANT_BOOL radio;
    __declspec(property(get=GetbuttonCount))
    long buttonCount;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getimage ( );
    void Putimage (
        _bstr_t pVal );
    _bstr_t GethoverImage ( );
    void PuthoverImage (
        _bstr_t pVal );
    _bstr_t GetdownImage ( );
    void PutdownImage (
        _bstr_t pVal );
    _bstr_t GethoverDownImage ( );
    void PuthoverDownImage (
        _bstr_t pVal );
    _bstr_t GethoverHoverImage ( );
    void PuthoverHoverImage (
        _bstr_t pVal );
    _bstr_t GetdisabledImage ( );
    void PutdisabledImage (
        _bstr_t pVal );
    _bstr_t GetmappingImage ( );
    void PutmappingImage (
        _bstr_t pVal );
    _bstr_t GettransparencyColor ( );
    void PuttransparencyColor (
        _bstr_t pVal );
    _bstr_t Getcursor ( );
    void Putcursor (
        _bstr_t pVal );
    VARIANT_BOOL GetshowBackground ( );
    void PutshowBackground (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Getradio ( );
    void Putradio (
        VARIANT_BOOL pVal );
    long GetbuttonCount ( );
    IDispatchPtr createButton ( );
    IDispatchPtr getButton (
        long nButton );
    HRESULT Click (
        long nButton );
    float GethueShift ( );
    void PuthueShift (
        float pVal );
    float Getsaturation ( );
    void Putsaturation (
        float pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_image (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_image (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_hoverImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_hoverImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_downImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_downImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_hoverDownImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_hoverDownImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_hoverHoverImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_hoverHoverImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_disabledImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_disabledImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_mappingImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_mappingImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_transparencyColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_transparencyColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_cursor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_cursor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_showBackground (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_showBackground (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_radio (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_radio (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_buttonCount (
        /*[out,retval]*/ long * nButtons ) = 0;
      virtual HRESULT __stdcall raw_createButton (
        /*[out,retval]*/ IDispatch * * pButton ) = 0;
      virtual HRESULT __stdcall raw_getButton (
        /*[in]*/ long nButton,
        /*[out,retval]*/ IDispatch * * pButton ) = 0;
      virtual HRESULT __stdcall raw_Click (
        /*[in]*/ long nButton ) = 0;
      virtual HRESULT __stdcall get_hueShift (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_hueShift (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_saturation (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_saturation (
        /*[in]*/ float pVal ) = 0;
};

struct __declspec(uuid("50fc8d31-67ac-11d3-bd4c-00c04f6ea5ae"))
IWMPRegionalButtonEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT onblur ( );
    HRESULT onfocus ( );
    HRESULT onclick ( );
    HRESULT ondblclick ( );
    HRESULT onmousedown ( );
    HRESULT onmouseup ( );
    HRESULT onmousemove ( );
    HRESULT onmouseover ( );
    HRESULT onmouseout ( );
    HRESULT onkeypress ( );
    HRESULT onkeydown ( );
    HRESULT onkeyup ( );
};

struct __declspec(uuid("09aeff11-69ef-11d3-bd4d-00c04f6ea5ae"))
WMPRegionalButton;
    // [ default ] interface IWMPRegionalButton
    // [ default, source ] dispinterface IWMPRegionalButtonEvents

struct __declspec(uuid("58d507b2-2354-11d3-bd41-00c04f6ea5ae"))
IWMPRegionalButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetaccName,put=PutaccName))
    _bstr_t accName;
    __declspec(property(get=GetaccDescription,put=PutaccDescription))
    _bstr_t accDescription;
    __declspec(property(get=GetaccKeyboardShortcut,put=PutaccKeyboardShortcut))
    _bstr_t accKeyboardShortcut;
    __declspec(property(get=GetupToolTip,put=PutupToolTip))
    _bstr_t upToolTip;
    __declspec(property(get=GetdownToolTip,put=PutdownToolTip))
    _bstr_t downToolTip;
    __declspec(property(get=GetmappingColor,put=PutmappingColor))
    _bstr_t mappingColor;
    __declspec(property(get=Getenabled,put=Putenabled))
    VARIANT_BOOL enabled;
    __declspec(property(get=Getsticky,put=Putsticky))
    VARIANT_BOOL sticky;
    __declspec(property(get=Getdown,put=Putdown))
    VARIANT_BOOL down;
    __declspec(property(get=Getindex))
    long index;
    __declspec(property(get=GettabStop,put=PuttabStop))
    VARIANT_BOOL tabStop;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetupToolTip ( );
    void PutupToolTip (
        _bstr_t pVal );
    _bstr_t GetdownToolTip ( );
    void PutdownToolTip (
        _bstr_t pVal );
    _bstr_t GetmappingColor ( );
    void PutmappingColor (
        _bstr_t pVal );
    VARIANT_BOOL Getenabled ( );
    void Putenabled (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Getsticky ( );
    void Putsticky (
        VARIANT_BOOL pVal );
    VARIANT_BOOL Getdown ( );
    void Putdown (
        VARIANT_BOOL pVal );
    long Getindex ( );
    VARIANT_BOOL GettabStop ( );
    void PuttabStop (
        VARIANT_BOOL pVal );
    _bstr_t Getcursor ( );
    void Putcursor (
        _bstr_t pVal );
    HRESULT Click ( );
    _bstr_t GetaccName ( );
    void PutaccName (
        _bstr_t pszName );
    _bstr_t GetaccDescription ( );
    void PutaccDescription (
        _bstr_t pszDescription );
    _bstr_t GetaccKeyboardShortcut ( );
    void PutaccKeyboardShortcut (
        _bstr_t pszShortcut );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_upToolTip (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_upToolTip (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_downToolTip (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_downToolTip (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_mappingColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_mappingColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_enabled (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_enabled (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_sticky (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_sticky (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_down (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_down (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_index (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_tabStop (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_tabStop (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_cursor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_cursor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall raw_Click ( ) = 0;
      virtual HRESULT __stdcall get_accName (
        /*[out,retval]*/ BSTR * pszName ) = 0;
      virtual HRESULT __stdcall put_accName (
        /*[in]*/ BSTR pszName ) = 0;
      virtual HRESULT __stdcall get_accDescription (
        /*[out,retval]*/ BSTR * pszDescription ) = 0;
      virtual HRESULT __stdcall put_accDescription (
        /*[in]*/ BSTR pszDescription ) = 0;
      virtual HRESULT __stdcall get_accKeyboardShortcut (
        /*[out,retval]*/ BSTR * pszShortcut ) = 0;
      virtual HRESULT __stdcall put_accKeyboardShortcut (
        /*[in]*/ BSTR pszShortcut ) = 0;
};

struct __declspec(uuid("95f45aa4-ed0a-11d2-ba67-0000f80855e6"))
IWMPCustomSliderCtrlEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT ondragbegin ( );
    HRESULT ondragend ( );
    HRESULT onpositionchange ( );
};

struct __declspec(uuid("95f45aa3-ed0a-11d2-ba67-0000f80855e6"))
WMPCustomSliderCtrl;
    // [ default ] interface IWMPCustomSlider
    // [ default, source ] dispinterface IWMPCustomSliderCtrlEvents

struct __declspec(uuid("95f45aa2-ed0a-11d2-ba67-0000f80855e6"))
IWMPCustomSlider : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getimage,put=Putimage))
    _bstr_t image;
    __declspec(property(get=GetpositionImage,put=PutpositionImage))
    _bstr_t positionImage;
    __declspec(property(get=GethoverImage,put=PuthoverImage))
    _bstr_t hoverImage;
    __declspec(property(get=GetdisabledImage,put=PutdisabledImage))
    _bstr_t disabledImage;
    __declspec(property(get=Getmin,put=Putmin))
    float min;
    __declspec(property(get=Getmax,put=Putmax))
    float max;
    __declspec(property(get=GettransparencyColor,put=PuttransparencyColor))
    _bstr_t transparencyColor;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;
    __declspec(property(get=Getvalue,put=Putvalue))
    float value;
    __declspec(property(get=GettoolTip,put=PuttoolTip))
    _bstr_t toolTip;
    __declspec(property(get=GetdownImage,put=PutdownImage))
    _bstr_t downImage;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getcursor ( );
    void Putcursor (
        _bstr_t pVal );
    float Getmin ( );
    void Putmin (
        float pVal );
    float Getmax ( );
    void Putmax (
        float pVal );
    float Getvalue ( );
    void Putvalue (
        float pVal );
    _bstr_t GettoolTip ( );
    void PuttoolTip (
        _bstr_t pVal );
    _bstr_t GetpositionImage ( );
    void PutpositionImage (
        _bstr_t pVal );
    _bstr_t Getimage ( );
    void Putimage (
        _bstr_t pVal );
    _bstr_t GethoverImage ( );
    void PuthoverImage (
        _bstr_t pVal );
    _bstr_t GetdisabledImage ( );
    void PutdisabledImage (
        _bstr_t pVal );
    _bstr_t GetdownImage ( );
    void PutdownImage (
        _bstr_t pVal );
    _bstr_t GettransparencyColor ( );
    void PuttransparencyColor (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_cursor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_cursor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_min (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_min (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_max (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_max (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_value (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_value (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_toolTip (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_toolTip (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_positionImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_positionImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_image (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_image (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_hoverImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_hoverImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_disabledImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_disabledImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_downImage (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_downImage (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_transparencyColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_transparencyColor (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("ddda102e-0e17-11d3-a2e2-00c04f79f88e"))
WMPTextCtrl;
    // [ default ] interface IWMPTextCtrl

struct __declspec(uuid("237dac8e-0e32-11d3-a2e2-00c04f79f88e"))
IWMPTextCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetfontFace,put=PutfontFace))
    _bstr_t fontFace;
    __declspec(property(get=GetfontStyle,put=PutfontStyle))
    _bstr_t fontStyle;
    __declspec(property(get=GetfontSize,put=PutfontSize))
    long fontSize;
    __declspec(property(get=GetforegroundColor,put=PutforegroundColor))
    _bstr_t foregroundColor;
    __declspec(property(get=GethoverBackgroundColor,put=PuthoverBackgroundColor))
    _bstr_t hoverBackgroundColor;
    __declspec(property(get=GethoverForegroundColor,put=PuthoverForegroundColor))
    _bstr_t hoverForegroundColor;
    __declspec(property(get=GethoverFontStyle,put=PuthoverFontStyle))
    _bstr_t hoverFontStyle;
    __declspec(property(get=Getvalue,put=Putvalue))
    _bstr_t value;
    __declspec(property(get=GettoolTip,put=PuttoolTip))
    _bstr_t toolTip;
    __declspec(property(get=GetdisabledFontStyle,put=PutdisabledFontStyle))
    _bstr_t disabledFontStyle;
    __declspec(property(get=GetdisabledForegroundColor,put=PutdisabledForegroundColor))
    _bstr_t disabledForegroundColor;
    __declspec(property(get=GetdisabledBackgroundColor,put=PutdisabledBackgroundColor))
    _bstr_t disabledBackgroundColor;
    __declspec(property(get=GetfontSmoothing,put=PutfontSmoothing))
    VARIANT_BOOL fontSmoothing;
    __declspec(property(get=Getjustification,put=Putjustification))
    _bstr_t justification;
    __declspec(property(get=GetwordWrap,put=PutwordWrap))
    VARIANT_BOOL wordWrap;
    __declspec(property(get=Getcursor,put=Putcursor))
    _bstr_t cursor;
    __declspec(property(get=Getscrolling,put=Putscrolling))
    VARIANT_BOOL scrolling;
    __declspec(property(get=GetscrollingDirection,put=PutscrollingDirection))
    _bstr_t scrollingDirection;
    __declspec(property(get=GetscrollingDelay,put=PutscrollingDelay))
    int scrollingDelay;
    __declspec(property(get=GetscrollingAmount,put=PutscrollingAmount))
    int scrollingAmount;
    __declspec(property(get=GettextWidth))
    int textWidth;
    __declspec(property(get=GetonGlass,put=PutonGlass))
    VARIANT_BOOL onGlass;
    __declspec(property(get=GetdisableGlassBlurBackground,put=PutdisableGlassBlurBackground))
    VARIANT_BOOL disableGlassBlurBackground;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    _bstr_t GetfontFace ( );
    void PutfontFace (
        _bstr_t pVal );
    _bstr_t GetfontStyle ( );
    void PutfontStyle (
        _bstr_t pVal );
    long GetfontSize ( );
    void PutfontSize (
        long pVal );
    _bstr_t GetforegroundColor ( );
    void PutforegroundColor (
        _bstr_t pVal );
    _bstr_t GethoverBackgroundColor ( );
    void PuthoverBackgroundColor (
        _bstr_t pVal );
    _bstr_t GethoverForegroundColor ( );
    void PuthoverForegroundColor (
        _bstr_t pVal );
    _bstr_t GethoverFontStyle ( );
    void PuthoverFontStyle (
        _bstr_t pVal );
    _bstr_t Getvalue ( );
    void Putvalue (
        _bstr_t pVal );
    _bstr_t GettoolTip ( );
    void PuttoolTip (
        _bstr_t pVal );
    _bstr_t GetdisabledFontStyle ( );
    void PutdisabledFontStyle (
        _bstr_t pVal );
    _bstr_t GetdisabledForegroundColor ( );
    void PutdisabledForegroundColor (
        _bstr_t pVal );
    _bstr_t GetdisabledBackgroundColor ( );
    void PutdisabledBackgroundColor (
        _bstr_t pVal );
    VARIANT_BOOL GetfontSmoothing ( );
    void PutfontSmoothing (
        VARIANT_BOOL pVal );
    _bstr_t Getjustification ( );
    void Putjustification (
        _bstr_t pVal );
    VARIANT_BOOL GetwordWrap ( );
    void PutwordWrap (
        VARIANT_BOOL pVal );
    _bstr_t Getcursor ( );
    void Putcursor (
        _bstr_t pVal );
    VARIANT_BOOL Getscrolling ( );
    void Putscrolling (
        VARIANT_BOOL pVal );
    _bstr_t GetscrollingDirection ( );
    void PutscrollingDirection (
        _bstr_t pVal );
    int GetscrollingDelay ( );
    void PutscrollingDelay (
        int pVal );
    int GetscrollingAmount ( );
    void PutscrollingAmount (
        int pVal );
    int GettextWidth ( );
    VARIANT_BOOL GetonGlass ( );
    void PutonGlass (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetdisableGlassBlurBackground ( );
    void PutdisableGlassBlurBackground (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_backgroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_fontFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_fontFace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_fontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_fontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_fontSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_fontSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_foregroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_foregroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_hoverBackgroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_hoverBackgroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_hoverForegroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_hoverForegroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_hoverFontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_hoverFontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_value (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_value (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_toolTip (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_toolTip (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_disabledFontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_disabledFontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_disabledForegroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_disabledForegroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_disabledBackgroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_disabledBackgroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_fontSmoothing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_fontSmoothing (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_justification (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_justification (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_wordWrap (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_wordWrap (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_cursor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_cursor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_scrolling (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_scrolling (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_scrollingDirection (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_scrollingDirection (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_scrollingDelay (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_scrollingDelay (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_scrollingAmount (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall put_scrollingAmount (
        /*[in]*/ int pVal ) = 0;
      virtual HRESULT __stdcall get_textWidth (
        /*[out,retval]*/ int * pVal ) = 0;
      virtual HRESULT __stdcall get_onGlass (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_onGlass (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_disableGlassBlurBackground (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_disableGlassBlurBackground (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("5f9cfd93-8cad-11d3-9a7e-00c04f8efb70"))
WMPPlaylistCtrl;
    // [ default ] interface IWMPPlaylistCtrl

struct __declspec(uuid("891eadb1-1c45-48b0-b704-49a888da98c4"))
ITaskCntrCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCurrentContainer,put=PutCurrentContainer))
    IUnknownPtr CurrentContainer;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr GetCurrentContainer ( );
    void PutCurrentContainer (
        IUnknown * ppUnk );
    HRESULT Activate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CurrentContainer (
        /*[out,retval]*/ IUnknown * * ppUnk ) = 0;
      virtual HRESULT __stdcall put_CurrentContainer (
        /*[in]*/ IUnknown * ppUnk ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
};

struct __declspec(uuid("d84cca96-cce2-11d2-9ecc-0000f8085981"))
_WMPCoreEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OpenStateChange (
        long NewState );
    HRESULT PlayStateChange (
        long NewState );
    HRESULT AudioLanguageChange (
        long LangID );
    HRESULT StatusChange ( );
    HRESULT ScriptCommand (
        _bstr_t scType,
        _bstr_t Param );
    HRESULT NewStream ( );
    HRESULT Disconnect (
        long Result );
    HRESULT Buffering (
        VARIANT_BOOL Start );
    HRESULT Error ( );
    HRESULT Warning (
        long WarningType,
        long Param,
        _bstr_t Description );
    HRESULT EndOfStream (
        long Result );
    HRESULT PositionChange (
        double oldPosition,
        double newPosition );
    HRESULT MarkerHit (
        long MarkerNum );
    HRESULT DurationUnitChange (
        long NewDurationUnit );
    HRESULT CdromMediaChange (
        long CdromNum );
    HRESULT PlaylistChange (
        IDispatch * Playlist,
        enum WMPPlaylistChangeEventType change );
    HRESULT CurrentPlaylistChange (
        enum WMPPlaylistChangeEventType change );
    HRESULT CurrentPlaylistItemAvailable (
        _bstr_t bstrItemName );
    HRESULT MediaChange (
        IDispatch * Item );
    HRESULT CurrentMediaItemAvailable (
        _bstr_t bstrItemName );
    HRESULT CurrentItemChange (
        IDispatch * pdispMedia );
    HRESULT MediaCollectionChange ( );
    HRESULT MediaCollectionAttributeStringAdded (
        _bstr_t bstrAttribName,
        _bstr_t bstrAttribVal );
    HRESULT MediaCollectionAttributeStringRemoved (
        _bstr_t bstrAttribName,
        _bstr_t bstrAttribVal );
    HRESULT MediaCollectionAttributeStringChanged (
        _bstr_t bstrAttribName,
        _bstr_t bstrOldAttribVal,
        _bstr_t bstrNewAttribVal );
    HRESULT PlaylistCollectionChange ( );
    HRESULT PlaylistCollectionPlaylistAdded (
        _bstr_t bstrPlaylistName );
    HRESULT PlaylistCollectionPlaylistRemoved (
        _bstr_t bstrPlaylistName );
    HRESULT PlaylistCollectionPlaylistSetAsDeleted (
        _bstr_t bstrPlaylistName,
        VARIANT_BOOL varfIsDeleted );
    HRESULT ModeChange (
        _bstr_t ModeName,
        VARIANT_BOOL NewValue );
    HRESULT MediaError (
        IDispatch * pMediaObject );
    HRESULT OpenPlaylistSwitch (
        IDispatch * pItem );
    HRESULT DomainChange (
        _bstr_t strDomain );
    HRESULT StringCollectionChange (
        IDispatch * pdispStringCollection,
        enum WMPStringCollectionChangeEventType change,
        long lCollectionIndex );
    HRESULT MediaCollectionMediaAdded (
        IDispatch * pdispMedia );
    HRESULT MediaCollectionMediaRemoved (
        IDispatch * pdispMedia );
};

struct __declspec(uuid("09428d37-e0b9-11d2-b147-00c04f79faa6"))
WMPCore;
    // [ default ] interface IWMPCore3
    // interface IWMPCore2
    // interface IWMPCore
    // interface IWMPControls
    // interface IWMPPlaylist
    // interface IWMPSettings
    // interface IWMPMedia
    // interface IWMPStringCollection
    // interface IWMPMediaCollection
    // interface IWMPPlaylistCollection
    // interface IWMPCdromCollection
    // interface IWMPCdrom
    // interface IWMPErrorItem
    // interface IWMPClosedCaption
    // interface IWMPError
    // interface IWMPDVD
    // interface IWMPControls2
    // interface IWMPMedia2
    // interface IWMPMedia3
    // interface IWMPMetadataPicture
    // interface IWMPMetadataText
    // interface IWMPSettings2
    // interface IWMPControls3
    // interface IWMPClosedCaption2
    // [ default, source ] dispinterface _WMPCoreEvents

struct __declspec(uuid("6b550945-018f-11d3-b14a-00c04f79faa6"))
IWMPGraphEventHandler : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT NotifyGraphStateChange (
        ULONG_PTR punkGraph,
        long lGraphState );
    HRESULT AsyncNotifyGraphStateChange (
        ULONG_PTR punkGraph,
        long lGraphState );
    HRESULT NotifyRateChange (
        ULONG_PTR punkGraph,
        double dRate );
    HRESULT NotifyPlaybackEnd (
        ULONG_PTR punkGraph,
        _bstr_t bstrQueuedUrl,
        ULONG_PTR dwCurrentContext );
    HRESULT NotifyStreamEnd (
        ULONG_PTR punkGraph );
    HRESULT NotifyScriptCommand (
        ULONG_PTR punkGraph,
        _bstr_t bstrCommand,
        _bstr_t bstrParam );
    HRESULT NotifyEarlyScriptCommand (
        ULONG_PTR punkGraph,
        _bstr_t bstrCommand,
        _bstr_t bstrParam,
        double dTime );
    HRESULT NotifyMarkerHit (
        ULONG_PTR punkGraph,
        long lMarker );
    HRESULT NotifyGraphError (
        ULONG_PTR punkGraph,
        long lErrMajor,
        long lErrMinor,
        long lCondition,
        _bstr_t bstrInfo,
        IUnknown * punkGraphData );
    HRESULT NotifyAcquireCredentials (
        ULONG_PTR punkGraph,
        _bstr_t bstrRealm,
        _bstr_t bstrSite,
        _bstr_t bstrUser,
        _bstr_t bstrPassword,
        unsigned long * pdwFlags,
        VARIANT_BOOL * pfCancel );
    HRESULT NotifyUntrustedLicense (
        ULONG_PTR punkGraph,
        _bstr_t bstrURL,
        VARIANT_BOOL * pfCancel );
    HRESULT NotifyLicenseDialog (
        ULONG_PTR punkGraph,
        _bstr_t bstrURL,
        _bstr_t bstrContent,
        unsigned char * pPostData,
        unsigned long dwPostDataSize,
        long lResult );
    HRESULT NotifyNeedsIndividualization (
        ULONG_PTR punkGraph,
        VARIANT_BOOL * pfResult );
    HRESULT NotifyNewMetadata (
        ULONG_PTR punkGraph );
    HRESULT NotifyNewMediaCaps (
        ULONG_PTR punkGraph );
    HRESULT NotifyDisconnect (
        ULONG_PTR punkGraph,
        long lResult );
    HRESULT NotifySave (
        ULONG_PTR punkGraph,
        long fStarted,
        long lResult );
    HRESULT NotifyDelayClose (
        ULONG_PTR punkGraph,
        VARIANT_BOOL fDelay );
    HRESULT NotifyDVD (
        ULONG_PTR punkGraph,
        long lEventCode,
        long lParam1,
        long lParam2 );
    HRESULT NotifyRequestAppThreadAction (
        ULONG_PTR punkGraph,
        unsigned long dwAction );
    HRESULT NotifyPrerollReady (
        ULONG_PTR punkGraph );
    HRESULT NotifyNewIcons (
        ULONG_PTR punkGraph );
    HRESULT NotifyStepComplete (
        ULONG_PTR punkGraph );
    HRESULT NotifyNewBitrate (
        ULONG_PTR punkGraph,
        unsigned long dwBitrate );
    HRESULT NotifyGraphCreationPreRender (
        ULONG_PTR punkGraph,
        ULONG_PTR punkFilterGraph,
        ULONG_PTR punkCardeaEncConfig,
        ULONG_PTR phrContinue,
        ULONG_PTR hEventToSet );
    HRESULT NotifyGraphCreationPostRender (
        ULONG_PTR punkGraph,
        ULONG_PTR punkFilterGraph,
        ULONG_PTR phrContinue,
        ULONG_PTR hEventToSet );
    HRESULT NotifyGraphUserEvent (
        ULONG_PTR punkGraph,
        long EventCode );
    HRESULT NotifyRevocation (
        ULONG_PTR punkGraph,
        VARIANT_BOOL * pfResult );
    HRESULT NotifyNeedsWMGraphIndividualization (
        ULONG_PTR punkGraph,
        ULONG_PTR phWnd,
        ULONG_PTR hIndivEvent,
        VARIANT_BOOL * pfCancel,
        VARIANT_BOOL * pfResult );
    HRESULT NotifyNeedsFullscreen (
        ULONG_PTR punkGraph );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_NotifyGraphStateChange (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ long lGraphState ) = 0;
      virtual HRESULT __stdcall raw_AsyncNotifyGraphStateChange (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ long lGraphState ) = 0;
      virtual HRESULT __stdcall raw_NotifyRateChange (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ double dRate ) = 0;
      virtual HRESULT __stdcall raw_NotifyPlaybackEnd (
        /*[in]*/ ULONG_PTR punkGraph,
        BSTR bstrQueuedUrl,
        ULONG_PTR dwCurrentContext ) = 0;
      virtual HRESULT __stdcall raw_NotifyStreamEnd (
        /*[in]*/ ULONG_PTR punkGraph ) = 0;
      virtual HRESULT __stdcall raw_NotifyScriptCommand (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ BSTR bstrCommand,
        /*[in]*/ BSTR bstrParam ) = 0;
      virtual HRESULT __stdcall raw_NotifyEarlyScriptCommand (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ BSTR bstrCommand,
        /*[in]*/ BSTR bstrParam,
        /*[in]*/ double dTime ) = 0;
      virtual HRESULT __stdcall raw_NotifyMarkerHit (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ long lMarker ) = 0;
      virtual HRESULT __stdcall raw_NotifyGraphError (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ long lErrMajor,
        /*[in]*/ long lErrMinor,
        /*[in]*/ long lCondition,
        /*[in]*/ BSTR bstrInfo,
        /*[in]*/ IUnknown * punkGraphData ) = 0;
      virtual HRESULT __stdcall raw_NotifyAcquireCredentials (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ BSTR bstrRealm,
        /*[in]*/ BSTR bstrSite,
        /*[in,out]*/ BSTR bstrUser,
        /*[in,out]*/ BSTR bstrPassword,
        /*[in,out]*/ unsigned long * pdwFlags,
        /*[out]*/ VARIANT_BOOL * pfCancel ) = 0;
      virtual HRESULT __stdcall raw_NotifyUntrustedLicense (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ BSTR bstrURL,
        /*[out]*/ VARIANT_BOOL * pfCancel ) = 0;
      virtual HRESULT __stdcall raw_NotifyLicenseDialog (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ BSTR bstrURL,
        /*[in]*/ BSTR bstrContent,
        /*[in]*/ unsigned char * pPostData,
        /*[in]*/ unsigned long dwPostDataSize,
        /*[in]*/ long lResult ) = 0;
      virtual HRESULT __stdcall raw_NotifyNeedsIndividualization (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[out]*/ VARIANT_BOOL * pfResult ) = 0;
      virtual HRESULT __stdcall raw_NotifyNewMetadata (
        /*[in]*/ ULONG_PTR punkGraph ) = 0;
      virtual HRESULT __stdcall raw_NotifyNewMediaCaps (
        /*[in]*/ ULONG_PTR punkGraph ) = 0;
      virtual HRESULT __stdcall raw_NotifyDisconnect (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ long lResult ) = 0;
      virtual HRESULT __stdcall raw_NotifySave (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ long fStarted,
        /*[in]*/ long lResult ) = 0;
      virtual HRESULT __stdcall raw_NotifyDelayClose (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ VARIANT_BOOL fDelay ) = 0;
      virtual HRESULT __stdcall raw_NotifyDVD (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ long lEventCode,
        /*[in]*/ long lParam1,
        /*[in]*/ long lParam2 ) = 0;
      virtual HRESULT __stdcall raw_NotifyRequestAppThreadAction (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ unsigned long dwAction ) = 0;
      virtual HRESULT __stdcall raw_NotifyPrerollReady (
        /*[in]*/ ULONG_PTR punkGraph ) = 0;
      virtual HRESULT __stdcall raw_NotifyNewIcons (
        /*[in]*/ ULONG_PTR punkGraph ) = 0;
      virtual HRESULT __stdcall raw_NotifyStepComplete (
        /*[in]*/ ULONG_PTR punkGraph ) = 0;
      virtual HRESULT __stdcall raw_NotifyNewBitrate (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ unsigned long dwBitrate ) = 0;
      virtual HRESULT __stdcall raw_NotifyGraphCreationPreRender (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ ULONG_PTR punkFilterGraph,
        /*[in]*/ ULONG_PTR punkCardeaEncConfig,
        /*[in]*/ ULONG_PTR phrContinue,
        /*[in]*/ ULONG_PTR hEventToSet ) = 0;
      virtual HRESULT __stdcall raw_NotifyGraphCreationPostRender (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ ULONG_PTR punkFilterGraph,
        /*[in]*/ ULONG_PTR phrContinue,
        /*[in]*/ ULONG_PTR hEventToSet ) = 0;
      virtual HRESULT __stdcall raw_NotifyGraphUserEvent (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ long EventCode ) = 0;
      virtual HRESULT __stdcall raw_NotifyRevocation (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[out]*/ VARIANT_BOOL * pfResult ) = 0;
      virtual HRESULT __stdcall raw_NotifyNeedsWMGraphIndividualization (
        /*[in]*/ ULONG_PTR punkGraph,
        /*[in]*/ ULONG_PTR phWnd,
        /*[in]*/ ULONG_PTR hIndivEvent,
        /*[out]*/ VARIANT_BOOL * pfCancel,
        /*[out]*/ VARIANT_BOOL * pfResult ) = 0;
      virtual HRESULT __stdcall raw_NotifyNeedsFullscreen (
        /*[in]*/ ULONG_PTR punkGraph ) = 0;
};

struct __declspec(uuid("f8578bfa-cd8f-4ce1-a684-5b7e85fca7dc"))
IBattery : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetpresetCount))
    long presetCount;
    __declspec(property(get=Getpreset))
    IDispatchPtr preset[];

    //
    // Wrapper methods for error-handling
    //

    long GetpresetCount ( );
    IDispatchPtr Getpreset (
        long nIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_presetCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_preset (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ IDispatch * * ppDispatch ) = 0;
};

struct __declspec(uuid("40c6bde7-9c90-49d4-ad20-bef81a6c5f22"))
IBatteryPreset : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Gettitle,put=Puttitle))
    _bstr_t title;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Gettitle ( );
    void Puttitle (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_title (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_title (
        /*[in]*/ BSTR pVal ) = 0;
};

struct __declspec(uuid("f85e2d65-207d-48db-84b1-915e1735db17"))
IBatteryRandomPreset : IBatteryPreset
{};

struct __declspec(uuid("876e7208-0172-4ebb-b08b-2e1d30dfe44c"))
IBatterySavedPreset : IBatteryPreset
{};

struct __declspec(uuid("33e9291a-f6a9-11d2-9435-00a0c92a2f2d"))
IBarsEffect : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdisplayMode,put=PutdisplayMode))
    long displayMode;
    __declspec(property(get=GetshowPeaks,put=PutshowPeaks))
    VARIANT_BOOL showPeaks;
    __declspec(property(get=GetpeakHangTime,put=PutpeakHangTime))
    long peakHangTime;
    __declspec(property(get=GetpeakFallbackAcceleration,put=PutpeakFallbackAcceleration))
    float peakFallbackAcceleration;
    __declspec(property(get=GetpeakFallbackSpeed,put=PutpeakFallbackSpeed))
    float peakFallbackSpeed;
    __declspec(property(get=GetlevelFallbackAcceleration,put=PutlevelFallbackAcceleration))
    float levelFallbackAcceleration;
    __declspec(property(get=GetlevelFallbackSpeed,put=PutlevelFallbackSpeed))
    float levelFallbackSpeed;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetlevelColor,put=PutlevelColor))
    _bstr_t levelColor;
    __declspec(property(get=GetpeakColor,put=PutpeakColor))
    _bstr_t peakColor;
    __declspec(property(get=GethorizontalSpacing,put=PuthorizontalSpacing))
    long horizontalSpacing;
    __declspec(property(get=GetlevelWidth,put=PutlevelWidth))
    long levelWidth;
    __declspec(property(get=GetlevelScale,put=PutlevelScale))
    float levelScale;
    __declspec(property(get=GetfadeRate,put=PutfadeRate))
    long fadeRate;
    __declspec(property(get=GetfadeMode,put=PutfadeMode))
    long fadeMode;
    __declspec(property(get=Gettransparent,put=Puttransparent))
    VARIANT_BOOL transparent;

    //
    // Wrapper methods for error-handling
    //

    long GetdisplayMode ( );
    void PutdisplayMode (
        long pVal );
    VARIANT_BOOL GetshowPeaks ( );
    void PutshowPeaks (
        VARIANT_BOOL pVal );
    long GetpeakHangTime ( );
    void PutpeakHangTime (
        long pVal );
    float GetpeakFallbackAcceleration ( );
    void PutpeakFallbackAcceleration (
        float pVal );
    float GetpeakFallbackSpeed ( );
    void PutpeakFallbackSpeed (
        float pVal );
    float GetlevelFallbackAcceleration ( );
    void PutlevelFallbackAcceleration (
        float pVal );
    float GetlevelFallbackSpeed ( );
    void PutlevelFallbackSpeed (
        float pVal );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    _bstr_t GetlevelColor ( );
    void PutlevelColor (
        _bstr_t pVal );
    _bstr_t GetpeakColor ( );
    void PutpeakColor (
        _bstr_t pVal );
    long GethorizontalSpacing ( );
    void PuthorizontalSpacing (
        long pVal );
    long GetlevelWidth ( );
    void PutlevelWidth (
        long pVal );
    float GetlevelScale ( );
    void PutlevelScale (
        float pVal );
    long GetfadeRate ( );
    void PutfadeRate (
        long pVal );
    long GetfadeMode ( );
    void PutfadeMode (
        long pVal );
    VARIANT_BOOL Gettransparent ( );
    void Puttransparent (
        VARIANT_BOOL pVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_displayMode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_displayMode (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_showPeaks (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_showPeaks (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_peakHangTime (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_peakHangTime (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_peakFallbackAcceleration (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_peakFallbackAcceleration (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_peakFallbackSpeed (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_peakFallbackSpeed (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_levelFallbackAcceleration (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_levelFallbackAcceleration (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_levelFallbackSpeed (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_levelFallbackSpeed (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_levelColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_levelColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_peakColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_peakColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_horizontalSpacing (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_horizontalSpacing (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_levelWidth (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_levelWidth (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_levelScale (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_levelScale (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_fadeRate (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_fadeRate (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_fadeMode (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_fadeMode (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_transparent (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_transparent (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
};

struct __declspec(uuid("e2cc638c-fd2c-409b-a1ea-5ddb72dc8e84"))
IWMPExternal : IDispatch
{
    //
    // Property data
    //

    __declspec(property(put=PutOnColorChange))
    IDispatchPtr OnColorChange;
    __declspec(property(get=Getversion))
    _bstr_t version;
    __declspec(property(get=GetappColorLight))
    _bstr_t appColorLight;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getversion ( );
    _bstr_t GetappColorLight ( );
    void PutOnColorChange (
        IDispatch * _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_version (
        /*[out,retval]*/ BSTR * pBSTR ) = 0;
      virtual HRESULT __stdcall get_appColorLight (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall put_OnColorChange (
        /*[in]*/ IDispatch * _arg1 ) = 0;
};

struct __declspec(uuid("d10ccdff-472d-498c-b5fe-3630e5405e0a"))
IWMPExternalColors : IWMPExternal
{
    //
    // Property data
    //

    __declspec(property(get=GetappColorButtonShadow))
    _bstr_t appColorButtonShadow;
    __declspec(property(get=GetappColorButtonHoverFace))
    _bstr_t appColorButtonHoverFace;
    __declspec(property(get=GetappColorMedium))
    _bstr_t appColorMedium;
    __declspec(property(get=GetappColorDark))
    _bstr_t appColorDark;
    __declspec(property(get=GetappColorButtonHighlight))
    _bstr_t appColorButtonHighlight;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetappColorMedium ( );
    _bstr_t GetappColorDark ( );
    _bstr_t GetappColorButtonHighlight ( );
    _bstr_t GetappColorButtonShadow ( );
    _bstr_t GetappColorButtonHoverFace ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_appColorMedium (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall get_appColorDark (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall get_appColorButtonHighlight (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall get_appColorButtonShadow (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall get_appColorButtonHoverFace (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
};

struct __declspec(uuid("54df358e-cf38-4010-99f1-f44b0e9000e5"))
IWMPSubscriptionServiceLimited : IWMPExternalColors
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedTaskPane,put=PutSelectedTaskPane))
    _bstr_t SelectedTaskPane;

    //
    // Wrapper methods for error-handling
    //

    HRESULT NavigateTaskPaneURL (
        _bstr_t bstrKeyName,
        _bstr_t bstrTaskPane,
        _bstr_t bstrParams );
    void PutSelectedTaskPane (
        _bstr_t bstrTaskPane );
    _bstr_t GetSelectedTaskPane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_NavigateTaskPaneURL (
        /*[in]*/ BSTR bstrKeyName,
        /*[in]*/ BSTR bstrTaskPane,
        /*[in]*/ BSTR bstrParams ) = 0;
      virtual HRESULT __stdcall put_SelectedTaskPane (
        /*[in]*/ BSTR bstrTaskPane ) = 0;
      virtual HRESULT __stdcall get_SelectedTaskPane (
        /*[out,retval]*/ BSTR * bstrTaskPane ) = 0;
};

enum WMPSubscriptionDownloadState
{
    wmpsdlsDownloading = 0,
    wmpsdlsPaused = 1,
    wmpsdlsProcessing = 2,
    wmpsdlsCompleted = 3,
    wmpsdlsCancelled = 4
};

struct __declspec(uuid("c9470e8e-3f6b-46a9-a0a9-452815c34297"))
IWMPDownloadItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetsourceURL))
    _bstr_t sourceURL;
    __declspec(property(get=Getsize))
    long size;
    __declspec(property(get=Gettype))
    _bstr_t type;
    __declspec(property(get=Getprogress))
    long progress;
    __declspec(property(get=GetdownloadState))
    enum WMPSubscriptionDownloadState downloadState;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetsourceURL ( );
    long Getsize ( );
    _bstr_t Gettype ( );
    long Getprogress ( );
    enum WMPSubscriptionDownloadState GetdownloadState ( );
    HRESULT pause ( );
    HRESULT resume ( );
    HRESULT cancel ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_sourceURL (
        /*[out,retval]*/ BSTR * pbstrURL ) = 0;
      virtual HRESULT __stdcall get_size (
        /*[out,retval]*/ long * plSize ) = 0;
      virtual HRESULT __stdcall get_type (
        /*[out,retval]*/ BSTR * pbstrType ) = 0;
      virtual HRESULT __stdcall get_progress (
        /*[out,retval]*/ long * plProgress ) = 0;
      virtual HRESULT __stdcall get_downloadState (
        /*[out,retval]*/ enum WMPSubscriptionDownloadState * pwmpsdls ) = 0;
      virtual HRESULT __stdcall raw_pause ( ) = 0;
      virtual HRESULT __stdcall raw_resume ( ) = 0;
      virtual HRESULT __stdcall raw_cancel ( ) = 0;
};

struct __declspec(uuid("9fbb3336-6da3-479d-b8ff-67d46e20a987"))
IWMPDownloadItem2 : IWMPDownloadItem
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getItemInfo (
        _bstr_t bstrItemName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getItemInfo (
        /*[in]*/ BSTR bstrItemName,
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
};

struct __declspec(uuid("0a319c7f-85f9-436c-b88e-82fd88000e1c"))
IWMPDownloadCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetID))
    long ID;
    __declspec(property(get=Getcount))
    long count;

    //
    // Wrapper methods for error-handling
    //

    long GetID ( );
    long Getcount ( );
    IWMPDownloadItem2Ptr Item (
        long lItem );
    IWMPDownloadItem2Ptr startDownload (
        _bstr_t bstrSourceURL,
        _bstr_t bstrType );
    HRESULT removeItem (
        long lItem );
    HRESULT clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ long * plId ) = 0;
      virtual HRESULT __stdcall get_count (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long lItem,
        /*[out,retval]*/ struct IWMPDownloadItem2 * * ppDownload ) = 0;
      virtual HRESULT __stdcall raw_startDownload (
        /*[in]*/ BSTR bstrSourceURL,
        /*[in]*/ BSTR bstrType,
        /*[out,retval]*/ struct IWMPDownloadItem2 * * ppDownload ) = 0;
      virtual HRESULT __stdcall raw_removeItem (
        /*[in]*/ long lItem ) = 0;
      virtual HRESULT __stdcall raw_clear ( ) = 0;
};

struct __declspec(uuid("e15e9ad1-8f20-4cc4-9ec7-1a328ca86a0d"))
IWMPDownloadManager : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IWMPDownloadCollectionPtr getDownloadCollection (
        long lCollectionId );
    IWMPDownloadCollectionPtr createDownloadCollection ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getDownloadCollection (
        /*[in]*/ long lCollectionId,
        /*[out,retval]*/ struct IWMPDownloadCollection * * ppCollection ) = 0;
      virtual HRESULT __stdcall raw_createDownloadCollection (
        /*[out,retval]*/ struct IWMPDownloadCollection * * ppCollection ) = 0;
};

struct __declspec(uuid("2e922378-ee70-4ceb-bbab-ce7ce4a04816"))
IWMPSubscriptionServiceExternal : IWMPSubscriptionServiceLimited
{
    //
    // Property data
    //

    __declspec(property(get=GetDownloadManager))
    IWMPDownloadManagerPtr DownloadManager;

    //
    // Wrapper methods for error-handling
    //

    IWMPDownloadManagerPtr GetDownloadManager ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DownloadManager (
        /*[out,retval]*/ struct IWMPDownloadManager * * ppDownloadMgr ) = 0;
};

struct __declspec(uuid("5f0248c1-62b3-42d7-b927-029119e6ad14"))
IWMPSubscriptionServicePlayMedia : IWMPSubscriptionServiceLimited
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT playMedia (
        _bstr_t bstrURL );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_playMedia (
        /*[in]*/ BSTR bstrURL ) = 0;
};

struct __declspec(uuid("a915cea2-72df-41e1-a576-ef0bae5e5169"))
IWMPDiscoExternal : IWMPSubscriptionServiceExternal
{
    //
    // Property data
    //

    __declspec(property(put=PutOnSendMessageComplete))
    IDispatchPtr OnSendMessageComplete;
    __declspec(property(put=PutignoreIEHistory))
    VARIANT_BOOL ignoreIEHistory;
    __declspec(property(get=GetpluginRunning))
    VARIANT_BOOL pluginRunning;
    __declspec(property(get=GettemplateBeingDisplayedInLocalLibrary))
    VARIANT_BOOL templateBeingDisplayedInLocalLibrary;
    __declspec(property(put=PutOnChangeViewError))
    IDispatchPtr OnChangeViewError;
    __declspec(property(put=PutOnChangeViewOnlineListError))
    IDispatchPtr OnChangeViewOnlineListError;
    __declspec(property(put=PutOnLoginChange))
    IDispatchPtr OnLoginChange;
    __declspec(property(get=GetuserLoggedIn))
    VARIANT_BOOL userLoggedIn;
    __declspec(property(get=GetaccountType))
    _bstr_t accountType;
    __declspec(property(put=PutOnViewChange))
    IDispatchPtr OnViewChange;
    __declspec(property(get=GetlibraryLocationType))
    _bstr_t libraryLocationType;
    __declspec(property(get=GetlibraryLocationID))
    _bstr_t libraryLocationID;
    __declspec(property(get=GetselectedItemType))
    _bstr_t selectedItemType;
    __declspec(property(get=GetselectedItemID))
    _bstr_t selectedItemID;
    __declspec(property(get=Getfilter))
    _bstr_t filter;
    __declspec(property(get=Gettask))
    _bstr_t task;
    __declspec(property(get=GetviewParameters))
    _bstr_t viewParameters;
    __declspec(property(get=GetbasketTitle))
    _bstr_t basketTitle;

    //
    // Wrapper methods for error-handling
    //

    void PutOnLoginChange (
        IDispatch * _arg1 );
    VARIANT_BOOL GetuserLoggedIn ( );
    HRESULT attemptLogin ( );
    _bstr_t GetaccountType ( );
    void PutOnViewChange (
        IDispatch * _arg1 );
    HRESULT changeView (
        _bstr_t bstrLibraryLocationType,
        _bstr_t bstrLibraryLocationID,
        _bstr_t bstrFilter,
        _bstr_t bstrViewParams );
    HRESULT changeViewOnlineList (
        _bstr_t bstrLibraryLocationType,
        _bstr_t bstrLibraryLocationID,
        _bstr_t bstrParams,
        _bstr_t bstrFriendlyName,
        _bstr_t bstrListType,
        _bstr_t bstrViewMode );
    _bstr_t GetlibraryLocationType ( );
    _bstr_t GetlibraryLocationID ( );
    _bstr_t GetselectedItemType ( );
    _bstr_t GetselectedItemID ( );
    _bstr_t Getfilter ( );
    _bstr_t Gettask ( );
    _bstr_t GetviewParameters ( );
    HRESULT cancelNavigate ( );
    HRESULT showPopup (
        long lPopupIndex,
        _bstr_t bstrParameters );
    HRESULT addToBasket (
        _bstr_t bstrViewType,
        _bstr_t bstrViewIDs );
    _bstr_t GetbasketTitle ( );
    HRESULT play (
        _bstr_t bstrLibraryLocationType,
        _bstr_t bstrLibraryLocationIDs );
    HRESULT download (
        _bstr_t bstrViewType,
        _bstr_t bstrViewIDs );
    HRESULT buy (
        _bstr_t bstrViewType,
        _bstr_t bstrViewIDs );
    HRESULT saveCurrentViewToLibrary (
        _bstr_t bstrFriendlyListType,
        VARIANT_BOOL fDynamic );
    HRESULT authenticate (
        long lAuthenticationIndex );
    HRESULT sendMessage (
        _bstr_t bstrMsg,
        _bstr_t bstrParam );
    void PutOnSendMessageComplete (
        IDispatch * _arg1 );
    void PutignoreIEHistory (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetpluginRunning ( );
    VARIANT_BOOL GettemplateBeingDisplayedInLocalLibrary ( );
    void PutOnChangeViewError (
        IDispatch * _arg1 );
    void PutOnChangeViewOnlineListError (
        IDispatch * _arg1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_OnLoginChange (
        /*[in]*/ IDispatch * _arg1 ) = 0;
      virtual HRESULT __stdcall get_userLoggedIn (
        /*[out,retval]*/ VARIANT_BOOL * pvbLoggedIn ) = 0;
      virtual HRESULT __stdcall raw_attemptLogin ( ) = 0;
      virtual HRESULT __stdcall get_accountType (
        /*[out,retval]*/ BSTR * pbstrAcctType ) = 0;
      virtual HRESULT __stdcall put_OnViewChange (
        /*[in]*/ IDispatch * _arg1 ) = 0;
      virtual HRESULT __stdcall raw_changeView (
        /*[in]*/ BSTR bstrLibraryLocationType,
        /*[in]*/ BSTR bstrLibraryLocationID,
        /*[in]*/ BSTR bstrFilter,
        /*[in]*/ BSTR bstrViewParams ) = 0;
      virtual HRESULT __stdcall raw_changeViewOnlineList (
        /*[in]*/ BSTR bstrLibraryLocationType,
        /*[in]*/ BSTR bstrLibraryLocationID,
        /*[in]*/ BSTR bstrParams,
        /*[in]*/ BSTR bstrFriendlyName,
        /*[in]*/ BSTR bstrListType,
        /*[in]*/ BSTR bstrViewMode ) = 0;
      virtual HRESULT __stdcall get_libraryLocationType (
        /*[out,retval]*/ BSTR * pbstrLibraryLocationType ) = 0;
      virtual HRESULT __stdcall get_libraryLocationID (
        /*[out,retval]*/ BSTR * pbstrLibraryLocationID ) = 0;
      virtual HRESULT __stdcall get_selectedItemType (
        /*[out,retval]*/ BSTR * pbstrSelectedItemType ) = 0;
      virtual HRESULT __stdcall get_selectedItemID (
        /*[out,retval]*/ BSTR * pbstrLibraryLocationID ) = 0;
      virtual HRESULT __stdcall get_filter (
        /*[out,retval]*/ BSTR * pbstrFilter ) = 0;
      virtual HRESULT __stdcall get_task (
        /*[out,retval]*/ BSTR * pbstrTask ) = 0;
      virtual HRESULT __stdcall get_viewParameters (
        /*[out,retval]*/ BSTR * pbstrViewParameters ) = 0;
      virtual HRESULT __stdcall raw_cancelNavigate ( ) = 0;
      virtual HRESULT __stdcall raw_showPopup (
        /*[in]*/ long lPopupIndex,
        /*[in]*/ BSTR bstrParameters ) = 0;
      virtual HRESULT __stdcall raw_addToBasket (
        /*[in]*/ BSTR bstrViewType,
        /*[in]*/ BSTR bstrViewIDs ) = 0;
      virtual HRESULT __stdcall get_basketTitle (
        /*[out,retval]*/ BSTR * bstrParams ) = 0;
      virtual HRESULT __stdcall raw_play (
        /*[in]*/ BSTR bstrLibraryLocationType,
        /*[in]*/ BSTR bstrLibraryLocationIDs ) = 0;
      virtual HRESULT __stdcall raw_download (
        /*[in]*/ BSTR bstrViewType,
        /*[in]*/ BSTR bstrViewIDs ) = 0;
      virtual HRESULT __stdcall raw_buy (
        /*[in]*/ BSTR bstrViewType,
        /*[in]*/ BSTR bstrViewIDs ) = 0;
      virtual HRESULT __stdcall raw_saveCurrentViewToLibrary (
        /*[in]*/ BSTR bstrFriendlyListType,
        /*[in]*/ VARIANT_BOOL fDynamic ) = 0;
      virtual HRESULT __stdcall raw_authenticate (
        /*[in]*/ long lAuthenticationIndex ) = 0;
      virtual HRESULT __stdcall raw_sendMessage (
        /*[in]*/ BSTR bstrMsg,
        /*[in]*/ BSTR bstrParam ) = 0;
      virtual HRESULT __stdcall put_OnSendMessageComplete (
        /*[in]*/ IDispatch * _arg1 ) = 0;
      virtual HRESULT __stdcall put_ignoreIEHistory (
        /*[in]*/ VARIANT_BOOL _arg1 ) = 0;
      virtual HRESULT __stdcall get_pluginRunning (
        /*[out,retval]*/ VARIANT_BOOL * pfPluginRunning ) = 0;
      virtual HRESULT __stdcall get_templateBeingDisplayedInLocalLibrary (
        /*[out,retval]*/ VARIANT_BOOL * pfTemplateDisplayed ) = 0;
      virtual HRESULT __stdcall put_OnChangeViewError (
        /*[in]*/ IDispatch * _arg1 ) = 0;
      virtual HRESULT __stdcall put_OnChangeViewOnlineListError (
        /*[in]*/ IDispatch * _arg1 ) = 0;
};

enum WMP_WRITENAMESEX_TYPE
{
    WMP_WRITENAMES_TYPE_CD_BY_TOC = 0,
    WMP_WRITENAMES_TYPE_CD_BY_CONTENT_ID = 1,
    WMP_WRITENAMES_TYPE_CD_BY_MDQCD = 2,
    WMP_WRITENAMES_TYPE_DVD_BY_DVDID = 3
};

struct __declspec(uuid("2d7ef888-1d3c-484a-a906-9f49d99bb344"))
IWMPCDDVDWizardExternal : IWMPExternalColors
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT WriteNames (
        _bstr_t bstrTOC,
        _bstr_t bstrMetadata );
    HRESULT ReturnToMainTask ( );
    HRESULT WriteNamesEx (
        enum WMP_WRITENAMESEX_TYPE type,
        _bstr_t bstrTypeId,
        _bstr_t bstrMetadata,
        VARIANT_BOOL fRenameRegroupFiles );
    _bstr_t GetMDQByRequestID (
        _bstr_t bstrRequestID );
    HRESULT EditMetadata ( );
    VARIANT_BOOL IsMetadataAvailableForEdit ( );
    HRESULT BuyCD (
        _bstr_t bstrTitle,
        _bstr_t bstrArtist,
        _bstr_t bstrAlbum,
        _bstr_t bstrUFID,
        _bstr_t bstrWMID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_WriteNames (
        /*[in]*/ BSTR bstrTOC,
        /*[in]*/ BSTR bstrMetadata ) = 0;
      virtual HRESULT __stdcall raw_ReturnToMainTask ( ) = 0;
      virtual HRESULT __stdcall raw_WriteNamesEx (
        /*[in]*/ enum WMP_WRITENAMESEX_TYPE type,
        /*[in]*/ BSTR bstrTypeId,
        /*[in]*/ BSTR bstrMetadata,
        /*[in]*/ VARIANT_BOOL fRenameRegroupFiles ) = 0;
      virtual HRESULT __stdcall raw_GetMDQByRequestID (
        /*[in]*/ BSTR bstrRequestID,
        /*[out,retval]*/ BSTR * pbstrMDQ ) = 0;
      virtual HRESULT __stdcall raw_EditMetadata ( ) = 0;
      virtual HRESULT __stdcall raw_IsMetadataAvailableForEdit (
        /*[out,retval]*/ VARIANT_BOOL * pbIsAvailable ) = 0;
      virtual HRESULT __stdcall raw_BuyCD (
        /*[in]*/ BSTR bstrTitle,
        /*[in]*/ BSTR bstrArtist,
        /*[in]*/ BSTR bstrAlbum,
        /*[in]*/ BSTR bstrUFID,
        /*[in]*/ BSTR bstrWMID ) = 0;
};

struct __declspec(uuid("f81b2a59-02bc-4003-8b2f-c124af66fc66"))
IWMPBaseExternal : IWMPExternal
{};

struct __declspec(uuid("3148e685-b243-423d-8341-8480d6eff674"))
IWMPOfflineExternal : IWMPExternal
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT forceOnline ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_forceOnline ( ) = 0;
};

struct __declspec(uuid("4e195db1-9e29-47fc-9ce1-de9937d32925"))
IWMPDMRAVTransportService : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTransportState))
    _bstr_t TransportState;
    __declspec(property(get=GetTransportStatus))
    _bstr_t TransportStatus;
    __declspec(property(get=GetPlaybackStorageMedium))
    _bstr_t PlaybackStorageMedium;
    __declspec(property(get=GetRecordStorageMedium))
    _bstr_t RecordStorageMedium;
    __declspec(property(get=GetPossiblePlaybackStorageMedia))
    _bstr_t PossiblePlaybackStorageMedia;
    __declspec(property(get=GetPossibleRecordStorageMedia))
    _bstr_t PossibleRecordStorageMedia;
    __declspec(property(get=GetCurrentPlayMode))
    _bstr_t CurrentPlayMode;
    __declspec(property(get=GetTransportPlaySpeed))
    _bstr_t TransportPlaySpeed;
    __declspec(property(get=GetRecordMediumWriteStatus))
    _bstr_t RecordMediumWriteStatus;
    __declspec(property(get=GetCurrentRecordQualityMode))
    _bstr_t CurrentRecordQualityMode;
    __declspec(property(get=GetPossibleRecordQualityModes))
    _bstr_t PossibleRecordQualityModes;
    __declspec(property(get=GetNumberOfTracks))
    unsigned long NumberOfTracks;
    __declspec(property(get=GetCurrentTrack))
    unsigned long CurrentTrack;
    __declspec(property(get=GetCurrentTrackDuration))
    _bstr_t CurrentTrackDuration;
    __declspec(property(get=GetCurrentMediaDuration))
    _bstr_t CurrentMediaDuration;
    __declspec(property(get=GetCurrentTrackMetaData))
    _bstr_t CurrentTrackMetaData;
    __declspec(property(get=GetCurrentTrackURI))
    _bstr_t CurrentTrackURI;
    __declspec(property(get=GetAVTransportURI))
    _bstr_t AVTransportURI;
    __declspec(property(get=GetAVTransportURIMetaData))
    _bstr_t AVTransportURIMetaData;
    __declspec(property(get=GetNextAVTransportURI))
    _bstr_t NextAVTransportURI;
    __declspec(property(get=GetNextAVTransportURIMetaData))
    _bstr_t NextAVTransportURIMetaData;
    __declspec(property(get=GetRelativeTimePosition))
    _bstr_t RelativeTimePosition;
    __declspec(property(get=GetAbsoluteTimePosition))
    _bstr_t AbsoluteTimePosition;
    __declspec(property(get=GetRelativeCounterPosition))
    long RelativeCounterPosition;
    __declspec(property(get=GetAbsoluteCounterPosition))
    long AbsoluteCounterPosition;
    __declspec(property(get=GetCurrentTransportActions))
    _bstr_t CurrentTransportActions;
    __declspec(property(get=GetLastChange))
    _bstr_t LastChange;
    __declspec(property(get=GetA_ARG_TYPE_SeekMode))
    _bstr_t A_ARG_TYPE_SeekMode;
    __declspec(property(get=GetA_ARG_TYPE_SeekTarget))
    _bstr_t A_ARG_TYPE_SeekTarget;
    __declspec(property(get=GetA_ARG_TYPE_InstanceID))
    unsigned long A_ARG_TYPE_InstanceID;
    __declspec(property(get=GetCurrentProtocolInfo))
    _bstr_t CurrentProtocolInfo;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTransportState ( );
    _bstr_t GetTransportStatus ( );
    _bstr_t GetPlaybackStorageMedium ( );
    _bstr_t GetRecordStorageMedium ( );
    _bstr_t GetPossiblePlaybackStorageMedia ( );
    _bstr_t GetPossibleRecordStorageMedia ( );
    _bstr_t GetCurrentPlayMode ( );
    _bstr_t GetTransportPlaySpeed ( );
    _bstr_t GetRecordMediumWriteStatus ( );
    _bstr_t GetCurrentRecordQualityMode ( );
    _bstr_t GetPossibleRecordQualityModes ( );
    unsigned long GetNumberOfTracks ( );
    unsigned long GetCurrentTrack ( );
    _bstr_t GetCurrentTrackDuration ( );
    _bstr_t GetCurrentMediaDuration ( );
    _bstr_t GetCurrentTrackMetaData ( );
    _bstr_t GetCurrentTrackURI ( );
    _bstr_t GetAVTransportURI ( );
    _bstr_t GetAVTransportURIMetaData ( );
    _bstr_t GetNextAVTransportURI ( );
    _bstr_t GetNextAVTransportURIMetaData ( );
    _bstr_t GetRelativeTimePosition ( );
    _bstr_t GetAbsoluteTimePosition ( );
    long GetRelativeCounterPosition ( );
    long GetAbsoluteCounterPosition ( );
    _bstr_t GetCurrentTransportActions ( );
    _bstr_t GetLastChange ( );
    _bstr_t GetA_ARG_TYPE_SeekMode ( );
    _bstr_t GetA_ARG_TYPE_SeekTarget ( );
    unsigned long GetA_ARG_TYPE_InstanceID ( );
    _bstr_t GetCurrentProtocolInfo ( );
    HRESULT SetAVTransportURI (
        IUnknown * punkRemoteEndpointInfo,
        unsigned long ulInstanceID,
        _bstr_t bstrCurrentURI,
        _bstr_t bstrCurrentURIMetaData );
    HRESULT GetMediaInfo (
        unsigned long ulInstanceID,
        unsigned long * pulNumTracks,
        BSTR * pbstrMediaDuration,
        BSTR * pbstrCurrentURI,
        BSTR * pbstrCurrentURIMetaData,
        BSTR * pbstrNextURI,
        BSTR * pNextURIMetaData,
        BSTR * pbstrPlayMedium,
        BSTR * pbstrRecordMedium,
        BSTR * pbstrWriteStatus );
    HRESULT GetTransportInfo (
        unsigned long ulInstanceID,
        BSTR * pbstrCurrentTransportState,
        BSTR * pbstrCurrentTransportStatus,
        BSTR * pbstrCurrentSpeed );
    HRESULT GetPositionInfo (
        unsigned long ulInstanceID,
        unsigned long * pTrack,
        BSTR * pbstrTrackDuration,
        BSTR * pbstrTrackMetaData,
        BSTR * pbstrTrackURI,
        BSTR * pbstrRelTime,
        BSTR * pbstrAbsTime,
        long * plRelCount,
        long * plAbsCount );
    HRESULT GetDeviceCapabilities (
        unsigned long ulInstanceID,
        BSTR * pbstrPlayMedia,
        BSTR * pbstrRecMedia,
        BSTR * pbstrRecQualityModes );
    HRESULT GetTransportSettings (
        unsigned long ulInstanceID,
        BSTR * pbstrPlayMode,
        BSTR * pbstrRecQualityMode );
    HRESULT stop (
        unsigned long ulInstanceID );
    HRESULT play (
        unsigned long ulInstanceID,
        _bstr_t bstrSpeed );
    HRESULT pause (
        unsigned long ulInstanceID );
    HRESULT Seek (
        unsigned long ulInstanceID,
        _bstr_t bstrUnit,
        _bstr_t bstrTarget );
    HRESULT next (
        unsigned long ulInstanceID );
    HRESULT previous (
        unsigned long ulInstanceID );
    HRESULT GetCurrentTransportActions (
        unsigned long ulInstanceID,
        BSTR * pbstrActions );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TransportState (
        /*[out,retval]*/ BSTR * pbstrTransportState ) = 0;
      virtual HRESULT __stdcall get_TransportStatus (
        /*[out,retval]*/ BSTR * pbstrTransportStatus ) = 0;
      virtual HRESULT __stdcall get_PlaybackStorageMedium (
        /*[out,retval]*/ BSTR * pbstrPlaybackStorageMedium ) = 0;
      virtual HRESULT __stdcall get_RecordStorageMedium (
        /*[out,retval]*/ BSTR * pbstrRecordStorageMedium ) = 0;
      virtual HRESULT __stdcall get_PossiblePlaybackStorageMedia (
        /*[out,retval]*/ BSTR * pbstrPossiblePlaybackStorageMedia ) = 0;
      virtual HRESULT __stdcall get_PossibleRecordStorageMedia (
        /*[out,retval]*/ BSTR * pbstrPossibleRecordStorageMedia ) = 0;
      virtual HRESULT __stdcall get_CurrentPlayMode (
        /*[out,retval]*/ BSTR * pbstrCurrentPlayMode ) = 0;
      virtual HRESULT __stdcall get_TransportPlaySpeed (
        /*[out,retval]*/ BSTR * pbstrTransportPlaySpeed ) = 0;
      virtual HRESULT __stdcall get_RecordMediumWriteStatus (
        /*[out,retval]*/ BSTR * pbstrRecordMediumWriteStatus ) = 0;
      virtual HRESULT __stdcall get_CurrentRecordQualityMode (
        /*[out,retval]*/ BSTR * pbstrCurrentRecordQualityMode ) = 0;
      virtual HRESULT __stdcall get_PossibleRecordQualityModes (
        /*[out,retval]*/ BSTR * pbstrPossibleRecordQualityModes ) = 0;
      virtual HRESULT __stdcall get_NumberOfTracks (
        /*[out,retval]*/ unsigned long * pulNumberOfTracks ) = 0;
      virtual HRESULT __stdcall get_CurrentTrack (
        /*[out,retval]*/ unsigned long * pulCurrentTrack ) = 0;
      virtual HRESULT __stdcall get_CurrentTrackDuration (
        /*[out,retval]*/ BSTR * pbstrCurrentTrackDuration ) = 0;
      virtual HRESULT __stdcall get_CurrentMediaDuration (
        /*[out,retval]*/ BSTR * pbstrCurrentMediaDuration ) = 0;
      virtual HRESULT __stdcall get_CurrentTrackMetaData (
        /*[out,retval]*/ BSTR * pbstrCurrentTrackMetaData ) = 0;
      virtual HRESULT __stdcall get_CurrentTrackURI (
        /*[out,retval]*/ BSTR * pbstrCurrentTrackURI ) = 0;
      virtual HRESULT __stdcall get_AVTransportURI (
        /*[out,retval]*/ BSTR * pbstrAVTransportURI ) = 0;
      virtual HRESULT __stdcall get_AVTransportURIMetaData (
        /*[out,retval]*/ BSTR * pbstrAVTransportURIMetaData ) = 0;
      virtual HRESULT __stdcall get_NextAVTransportURI (
        /*[out,retval]*/ BSTR * pbstrNextAVTransportURI ) = 0;
      virtual HRESULT __stdcall get_NextAVTransportURIMetaData (
        /*[out,retval]*/ BSTR * pbstrNextAVTransportURIMetaData ) = 0;
      virtual HRESULT __stdcall get_RelativeTimePosition (
        /*[out,retval]*/ BSTR * pRelativeTimePosition ) = 0;
      virtual HRESULT __stdcall get_AbsoluteTimePosition (
        /*[out,retval]*/ BSTR * pbstrAbsoluteTimePosition ) = 0;
      virtual HRESULT __stdcall get_RelativeCounterPosition (
        /*[out,retval]*/ long * plRelativeCounterPosition ) = 0;
      virtual HRESULT __stdcall get_AbsoluteCounterPosition (
        /*[out,retval]*/ long * plAbsoluteCounterPosition ) = 0;
      virtual HRESULT __stdcall get_CurrentTransportActions (
        /*[out,retval]*/ BSTR * pbstrCurrentTransportActions ) = 0;
      virtual HRESULT __stdcall get_LastChange (
        /*[out,retval]*/ BSTR * pbstrLastChange ) = 0;
      virtual HRESULT __stdcall get_A_ARG_TYPE_SeekMode (
        /*[out,retval]*/ BSTR * pbstrSeekMode ) = 0;
      virtual HRESULT __stdcall get_A_ARG_TYPE_SeekTarget (
        /*[out,retval]*/ BSTR * pbstrSeekTarget ) = 0;
      virtual HRESULT __stdcall get_A_ARG_TYPE_InstanceID (
        /*[out,retval]*/ unsigned long * pulInstanceID ) = 0;
      virtual HRESULT __stdcall get_CurrentProtocolInfo (
        /*[out,retval]*/ BSTR * pstrProtocolInfo ) = 0;
      virtual HRESULT __stdcall raw_SetAVTransportURI (
        /*[in]*/ IUnknown * punkRemoteEndpointInfo,
        /*[in]*/ unsigned long ulInstanceID,
        /*[in]*/ BSTR bstrCurrentURI,
        /*[in]*/ BSTR bstrCurrentURIMetaData ) = 0;
      virtual HRESULT __stdcall raw_GetMediaInfo (
        /*[in]*/ unsigned long ulInstanceID,
        /*[out]*/ unsigned long * pulNumTracks,
        /*[out]*/ BSTR * pbstrMediaDuration,
        /*[out]*/ BSTR * pbstrCurrentURI,
        /*[out]*/ BSTR * pbstrCurrentURIMetaData,
        /*[out]*/ BSTR * pbstrNextURI,
        /*[out]*/ BSTR * pNextURIMetaData,
        /*[out]*/ BSTR * pbstrPlayMedium,
        /*[out]*/ BSTR * pbstrRecordMedium,
        /*[out]*/ BSTR * pbstrWriteStatus ) = 0;
      virtual HRESULT __stdcall raw_GetTransportInfo (
        /*[in]*/ unsigned long ulInstanceID,
        /*[out]*/ BSTR * pbstrCurrentTransportState,
        /*[out]*/ BSTR * pbstrCurrentTransportStatus,
        /*[out]*/ BSTR * pbstrCurrentSpeed ) = 0;
      virtual HRESULT __stdcall raw_GetPositionInfo (
        /*[in]*/ unsigned long ulInstanceID,
        /*[out]*/ unsigned long * pTrack,
        /*[out]*/ BSTR * pbstrTrackDuration,
        /*[out]*/ BSTR * pbstrTrackMetaData,
        /*[out]*/ BSTR * pbstrTrackURI,
        /*[out]*/ BSTR * pbstrRelTime,
        /*[out]*/ BSTR * pbstrAbsTime,
        /*[out]*/ long * plRelCount,
        /*[out]*/ long * plAbsCount ) = 0;
      virtual HRESULT __stdcall raw_GetDeviceCapabilities (
        /*[in]*/ unsigned long ulInstanceID,
        /*[out]*/ BSTR * pbstrPlayMedia,
        /*[out]*/ BSTR * pbstrRecMedia,
        /*[out]*/ BSTR * pbstrRecQualityModes ) = 0;
      virtual HRESULT __stdcall raw_GetTransportSettings (
        /*[in]*/ unsigned long ulInstanceID,
        /*[out]*/ BSTR * pbstrPlayMode,
        /*[out]*/ BSTR * pbstrRecQualityMode ) = 0;
      virtual HRESULT __stdcall raw_stop (
        /*[in]*/ unsigned long ulInstanceID ) = 0;
      virtual HRESULT __stdcall raw_play (
        /*[in]*/ unsigned long ulInstanceID,
        /*[in]*/ BSTR bstrSpeed ) = 0;
      virtual HRESULT __stdcall raw_pause (
        /*[in]*/ unsigned long ulInstanceID ) = 0;
      virtual HRESULT __stdcall raw_Seek (
        /*[in]*/ unsigned long ulInstanceID,
        /*[in]*/ BSTR bstrUnit,
        /*[in]*/ BSTR bstrTarget ) = 0;
      virtual HRESULT __stdcall raw_next (
        /*[in]*/ unsigned long ulInstanceID ) = 0;
      virtual HRESULT __stdcall raw_previous (
        /*[in]*/ unsigned long ulInstanceID ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentTransportActions (
        /*[in]*/ unsigned long ulInstanceID,
        /*[in,out]*/ BSTR * pbstrActions ) = 0;
};

struct __declspec(uuid("fb61cd38-8de7-4479-8b76-a8d097c20c70"))
IWMPDMRConnectionManagerService : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSourceProtocolInfo))
    _bstr_t SourceProtocolInfo;
    __declspec(property(get=GetSinkProtocolInfo))
    _bstr_t SinkProtocolInfo;
    __declspec(property(get=GetCurrentConnectionIDs))
    _bstr_t CurrentConnectionIDs;
    __declspec(property(get=GetA_ARG_TYPE_ConnectionStatus))
    _bstr_t A_ARG_TYPE_ConnectionStatus;
    __declspec(property(get=GetA_ARG_TYPE_ConnectionManager))
    _bstr_t A_ARG_TYPE_ConnectionManager;
    __declspec(property(get=GetA_ARG_TYPE_Direction))
    _bstr_t A_ARG_TYPE_Direction;
    __declspec(property(get=GetA_ARG_TYPE_ProtocolInfo))
    _bstr_t A_ARG_TYPE_ProtocolInfo;
    __declspec(property(get=GetA_ARG_TYPE_ConnectionID))
    long A_ARG_TYPE_ConnectionID;
    __declspec(property(get=GetA_ARG_TYPE_AVTransportID))
    long A_ARG_TYPE_AVTransportID;
    __declspec(property(get=GetA_ARG_TYPE_RcsID))
    long A_ARG_TYPE_RcsID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetSourceProtocolInfo ( );
    _bstr_t GetSinkProtocolInfo ( );
    _bstr_t GetCurrentConnectionIDs ( );
    _bstr_t GetA_ARG_TYPE_ConnectionStatus ( );
    _bstr_t GetA_ARG_TYPE_ConnectionManager ( );
    _bstr_t GetA_ARG_TYPE_Direction ( );
    _bstr_t GetA_ARG_TYPE_ProtocolInfo ( );
    long GetA_ARG_TYPE_ConnectionID ( );
    long GetA_ARG_TYPE_AVTransportID ( );
    long GetA_ARG_TYPE_RcsID ( );
    HRESULT GetProtocolInfo (
        BSTR * pbstrSource,
        BSTR * pbstrSink );
    HRESULT GetCurrentConnectionIDs (
        BSTR * pbstrConnectionIDs );
    HRESULT GetCurrentConnectionInfo (
        long lConnectionID,
        long * plResID,
        long * plAVTransportID,
        BSTR * pbstrProtocolInfo,
        BSTR * pbstrPeerConnectionManager,
        long * plPeerConnectionID,
        BSTR * pbstrDirection,
        BSTR * pbstrStatus );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SourceProtocolInfo (
        /*[out,retval]*/ BSTR * pbstrSourceProtocolInfo ) = 0;
      virtual HRESULT __stdcall get_SinkProtocolInfo (
        /*[out,retval]*/ BSTR * pbstrSinkProtocolInfo ) = 0;
      virtual HRESULT __stdcall get_CurrentConnectionIDs (
        /*[out,retval]*/ BSTR * pbstrCurrentConnectionIDs ) = 0;
      virtual HRESULT __stdcall get_A_ARG_TYPE_ConnectionStatus (
        /*[out,retval]*/ BSTR * pbstrA_ARG_TYPE_ConnectionStatus ) = 0;
      virtual HRESULT __stdcall get_A_ARG_TYPE_ConnectionManager (
        /*[out,retval]*/ BSTR * pbstrA_ARG_TYPE_ConnectionManager ) = 0;
      virtual HRESULT __stdcall get_A_ARG_TYPE_Direction (
        /*[out,retval]*/ BSTR * pbstrA_ARG_TYPE_Direction ) = 0;
      virtual HRESULT __stdcall get_A_ARG_TYPE_ProtocolInfo (
        /*[out,retval]*/ BSTR * pbstrA_ARG_TYPE_ProtocolInfo ) = 0;
      virtual HRESULT __stdcall get_A_ARG_TYPE_ConnectionID (
        /*[out,retval]*/ long * plA_ARG_TYPE_ConnectionID ) = 0;
      virtual HRESULT __stdcall get_A_ARG_TYPE_AVTransportID (
        /*[out,retval]*/ long * plA_ARG_TYPE_AVTransportID ) = 0;
      virtual HRESULT __stdcall get_A_ARG_TYPE_RcsID (
        /*[out,retval]*/ long * plA_ARG_TYPE_RcsID ) = 0;
      virtual HRESULT __stdcall raw_GetProtocolInfo (
        /*[in,out]*/ BSTR * pbstrSource,
        /*[in,out]*/ BSTR * pbstrSink ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentConnectionIDs (
        /*[in,out]*/ BSTR * pbstrConnectionIDs ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentConnectionInfo (
        /*[in]*/ long lConnectionID,
        /*[in,out]*/ long * plResID,
        /*[in,out]*/ long * plAVTransportID,
        /*[in,out]*/ BSTR * pbstrProtocolInfo,
        /*[in,out]*/ BSTR * pbstrPeerConnectionManager,
        /*[in,out]*/ long * plPeerConnectionID,
        /*[in,out]*/ BSTR * pbstrDirection,
        /*[in,out]*/ BSTR * pbstrStatus ) = 0;
};

struct __declspec(uuid("ff4b1bda-19f0-42cf-8dda-19162950c543"))
IWMPDMRRenderingControlService : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLastChange))
    _bstr_t LastChange;
    __declspec(property(get=GetPresetNameList))
    _bstr_t PresetNameList;
    __declspec(property(get=Getmute))
    VARIANT_BOOL mute;
    __declspec(property(get=Getvolume))
    unsigned short volume;
    __declspec(property(get=GetA_ARG_TYPE_Channel))
    _bstr_t A_ARG_TYPE_Channel;
    __declspec(property(get=GetA_ARG_TYPE_InstanceID))
    unsigned long A_ARG_TYPE_InstanceID;
    __declspec(property(get=GetA_ARG_TYPE_PresetName))
    _bstr_t A_ARG_TYPE_PresetName;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetLastChange ( );
    _bstr_t GetPresetNameList ( );
    VARIANT_BOOL Getmute ( );
    unsigned short Getvolume ( );
    _bstr_t GetA_ARG_TYPE_Channel ( );
    unsigned long GetA_ARG_TYPE_InstanceID ( );
    _bstr_t GetA_ARG_TYPE_PresetName ( );
    HRESULT ListPresets (
        unsigned long ulInstanceID,
        BSTR * pbstrCurrentPresetList );
    HRESULT SelectPreset (
        unsigned long ulInstanceID,
        _bstr_t bstrPresetName );
    HRESULT GetMute (
        unsigned long ulInstanceID,
        _bstr_t bstrChannel,
        VARIANT_BOOL * pbCurrentMute );
    HRESULT SetMute (
        unsigned long ulInstanceID,
        _bstr_t bstrChannel,
        VARIANT_BOOL bDesiredMute );
    HRESULT GetVolume (
        unsigned long ulInstanceID,
        _bstr_t bstrChannel,
        unsigned short * puiCurrentVolume );
    HRESULT SetVolume (
        unsigned long ulInstanceID,
        _bstr_t bstrChannel,
        unsigned short uiDesiredVolume );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LastChange (
        /*[out,retval]*/ BSTR * pbstrLastChange ) = 0;
      virtual HRESULT __stdcall get_PresetNameList (
        /*[out,retval]*/ BSTR * pbstrPresetNameList ) = 0;
      virtual HRESULT __stdcall get_mute (
        /*[out,retval]*/ VARIANT_BOOL * pbMute ) = 0;
      virtual HRESULT __stdcall get_volume (
        /*[out,retval]*/ unsigned short * puiVolume ) = 0;
      virtual HRESULT __stdcall get_A_ARG_TYPE_Channel (
        /*[out,retval]*/ BSTR * pbstrA_ARG_TYPE_Channel ) = 0;
      virtual HRESULT __stdcall get_A_ARG_TYPE_InstanceID (
        /*[out,retval]*/ unsigned long * pulA_ARG_TYPE_InstanceID ) = 0;
      virtual HRESULT __stdcall get_A_ARG_TYPE_PresetName (
        /*[out,retval]*/ BSTR * pbstrA_ARG_TYPE_PresetName ) = 0;
      virtual HRESULT __stdcall raw_ListPresets (
        /*[in]*/ unsigned long ulInstanceID,
        /*[in,out]*/ BSTR * pbstrCurrentPresetList ) = 0;
      virtual HRESULT __stdcall raw_SelectPreset (
        /*[in]*/ unsigned long ulInstanceID,
        /*[in]*/ BSTR bstrPresetName ) = 0;
      virtual HRESULT __stdcall raw_GetMute (
        /*[in]*/ unsigned long ulInstanceID,
        /*[in]*/ BSTR bstrChannel,
        /*[in,out]*/ VARIANT_BOOL * pbCurrentMute ) = 0;
      virtual HRESULT __stdcall raw_SetMute (
        /*[in]*/ unsigned long ulInstanceID,
        /*[in]*/ BSTR bstrChannel,
        /*[in]*/ VARIANT_BOOL bDesiredMute ) = 0;
      virtual HRESULT __stdcall raw_GetVolume (
        /*[in]*/ unsigned long ulInstanceID,
        /*[in]*/ BSTR bstrChannel,
        /*[in,out]*/ unsigned short * puiCurrentVolume ) = 0;
      virtual HRESULT __stdcall raw_SetVolume (
        /*[in]*/ unsigned long ulInstanceID,
        /*[in]*/ BSTR bstrChannel,
        /*[in]*/ unsigned short uiDesiredVolume ) = 0;
};

struct __declspec(uuid("1f504270-a66b-4223-8e96-26a06c63d69f"))
IWMPEvents3 : IWMPEvents2
{
    //
    // Raw methods provided by interface
    //

      virtual void __stdcall CdromRipStateChange (
        /*[in]*/ struct IWMPCdromRip * pCdromRip,
        /*[in]*/ enum WMPRipState wmprs ) = 0;
      virtual void __stdcall CdromRipMediaError (
        /*[in]*/ struct IWMPCdromRip * pCdromRip,
        /*[in]*/ IDispatch * pMedia ) = 0;
      virtual void __stdcall CdromBurnStateChange (
        /*[in]*/ struct IWMPCdromBurn * pCdromBurn,
        /*[in]*/ enum WMPBurnState wmpbs ) = 0;
      virtual void __stdcall CdromBurnMediaError (
        /*[in]*/ struct IWMPCdromBurn * pCdromBurn,
        /*[in]*/ IDispatch * pMedia ) = 0;
      virtual void __stdcall CdromBurnError (
        /*[in]*/ struct IWMPCdromBurn * pCdromBurn,
        /*[in]*/ HRESULT hrError ) = 0;
      virtual void __stdcall LibraryConnect (
        /*[in]*/ struct IWMPLibrary * pLibrary ) = 0;
      virtual void __stdcall LibraryDisconnect (
        /*[in]*/ struct IWMPLibrary * pLibrary ) = 0;
      virtual void __stdcall FolderScanStateChange (
        /*[in]*/ enum WMPFolderScanState wmpfss ) = 0;
      virtual void __stdcall StringCollectionChange (
        /*[in]*/ IDispatch * pdispStringCollection,
        /*[in]*/ enum WMPStringCollectionChangeEventType change,
        /*[in]*/ long lCollectionIndex ) = 0;
      virtual void __stdcall MediaCollectionMediaAdded (
        /*[in]*/ IDispatch * pdispMedia ) = 0;
      virtual void __stdcall MediaCollectionMediaRemoved (
        /*[in]*/ IDispatch * pdispMedia ) = 0;
};

struct __declspec(uuid("26dabcfa-306b-404d-9a6f-630a8405048d"))
IWMPEvents4 : IWMPEvents3
{
    //
    // Raw methods provided by interface
    //

      virtual void __stdcall DeviceEstimation (
        /*[in]*/ struct IWMPSyncDevice * pDevice,
        /*[in]*/ HRESULT hrResult,
        /*[in]*/ __int64 qwEstimatedUsedSpace,
        /*[in]*/ __int64 qwEstimatedSpace ) = 0;
};

struct __declspec(uuid("bd94dbeb-417f-4928-aa06-087d56ed9b59"))
IWMPCdromBurn : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=Getlabel,put=Putlabel))
    _bstr_t label;
    __declspec(property(get=GetburnFormat,put=PutburnFormat))
    enum WMPBurnFormat burnFormat;
    __declspec(property(get=GetburnPlaylist,put=PutburnPlaylist))
    IWMPPlaylistPtr burnPlaylist;
    __declspec(property(get=GetburnState))
    enum WMPBurnState burnState;
    __declspec(property(get=GetburnProgress))
    long burnProgress;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL isAvailable (
        _bstr_t bstrItem );
    _bstr_t getItemInfo (
        _bstr_t bstrItem );
    _bstr_t Getlabel ( );
    void Putlabel (
        _bstr_t pbstrLabel );
    enum WMPBurnFormat GetburnFormat ( );
    void PutburnFormat (
        enum WMPBurnFormat pwmpbf );
    IWMPPlaylistPtr GetburnPlaylist ( );
    void PutburnPlaylist (
        struct IWMPPlaylist * ppPlaylist );
    HRESULT refreshStatus ( );
    enum WMPBurnState GetburnState ( );
    long GetburnProgress ( );
    HRESULT startBurn ( );
    HRESULT stopBurn ( );
    HRESULT erase ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_isAvailable (
        /*[in]*/ BSTR bstrItem,
        /*[out,retval]*/ VARIANT_BOOL * pIsAvailable ) = 0;
      virtual HRESULT __stdcall raw_getItemInfo (
        /*[in]*/ BSTR bstrItem,
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall get_label (
        /*[out,retval]*/ BSTR * pbstrLabel ) = 0;
      virtual HRESULT __stdcall put_label (
        /*[in]*/ BSTR pbstrLabel ) = 0;
      virtual HRESULT __stdcall get_burnFormat (
        /*[out,retval]*/ enum WMPBurnFormat * pwmpbf ) = 0;
      virtual HRESULT __stdcall put_burnFormat (
        /*[in]*/ enum WMPBurnFormat pwmpbf ) = 0;
      virtual HRESULT __stdcall get_burnPlaylist (
        /*[out,retval]*/ struct IWMPPlaylist * * ppPlaylist ) = 0;
      virtual HRESULT __stdcall put_burnPlaylist (
        /*[in]*/ struct IWMPPlaylist * ppPlaylist ) = 0;
      virtual HRESULT __stdcall raw_refreshStatus ( ) = 0;
      virtual HRESULT __stdcall get_burnState (
        /*[out,retval]*/ enum WMPBurnState * pwmpbs ) = 0;
      virtual HRESULT __stdcall get_burnProgress (
        /*[out,retval]*/ long * plProgress ) = 0;
      virtual HRESULT __stdcall raw_startBurn ( ) = 0;
      virtual HRESULT __stdcall raw_stopBurn ( ) = 0;
      virtual HRESULT __stdcall raw_erase ( ) = 0;
};

struct __declspec(uuid("d5f0f4f1-130c-11d3-b14e-00c04f79faa6"))
IWMPPlaylist : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcount))
    long count;
    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;
    __declspec(property(get=GetattributeCount))
    long attributeCount;
    __declspec(property(get=GetattributeName))
    _bstr_t attributeName[];
    __declspec(property(get=GetisIdentical))
    VARIANT_BOOL isIdentical[];

    //
    // Wrapper methods for error-handling
    //

    long Getcount ( );
    _bstr_t Getname ( );
    void Putname (
        _bstr_t pbstrName );
    long GetattributeCount ( );
    _bstr_t GetattributeName (
        long lIndex );
    IWMPMediaPtr GetItem (
        long lIndex );
    _bstr_t getItemInfo (
        _bstr_t bstrName );
    HRESULT setItemInfo (
        _bstr_t bstrName,
        _bstr_t bstrValue );
    VARIANT_BOOL GetisIdentical (
        struct IWMPPlaylist * pIWMPPlaylist );
    HRESULT clear ( );
    HRESULT insertItem (
        long lIndex,
        struct IWMPMedia * pIWMPMedia );
    HRESULT appendItem (
        struct IWMPMedia * pIWMPMedia );
    HRESULT removeItem (
        struct IWMPMedia * pIWMPMedia );
    HRESULT moveItem (
        long lIndexOld,
        long lIndexNew );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_count (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall get_name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall put_name (
        /*[in]*/ BSTR pbstrName ) = 0;
      virtual HRESULT __stdcall get_attributeCount (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall get_attributeName (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ BSTR * pbstrAttributeName ) = 0;
      virtual HRESULT __stdcall get_Item (
        long lIndex,
        /*[out,retval]*/ struct IWMPMedia * * ppIWMPMedia ) = 0;
      virtual HRESULT __stdcall raw_getItemInfo (
        /*[in]*/ BSTR bstrName,
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_setItemInfo (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrValue ) = 0;
      virtual HRESULT __stdcall get_isIdentical (
        /*[in]*/ struct IWMPPlaylist * pIWMPPlaylist,
        /*[out,retval]*/ VARIANT_BOOL * pvbool ) = 0;
      virtual HRESULT __stdcall raw_clear ( ) = 0;
      virtual HRESULT __stdcall raw_insertItem (
        /*[in]*/ long lIndex,
        /*[in]*/ struct IWMPMedia * pIWMPMedia ) = 0;
      virtual HRESULT __stdcall raw_appendItem (
        /*[in]*/ struct IWMPMedia * pIWMPMedia ) = 0;
      virtual HRESULT __stdcall raw_removeItem (
        /*[in]*/ struct IWMPMedia * pIWMPMedia ) = 0;
      virtual HRESULT __stdcall raw_moveItem (
        long lIndexOld,
        long lIndexNew ) = 0;
};

struct __declspec(uuid("94d55e95-3fac-11d3-b155-00c04f79faa6"))
IWMPMedia : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetsourceURL))
    _bstr_t sourceURL;
    __declspec(property(get=GetimageSourceWidth))
    long imageSourceWidth;
    __declspec(property(get=GetimageSourceHeight))
    long imageSourceHeight;
    __declspec(property(get=GetmarkerCount))
    long markerCount;
    __declspec(property(get=Getduration))
    double duration;
    __declspec(property(get=GetdurationString))
    _bstr_t durationString;
    __declspec(property(get=GetattributeCount))
    long attributeCount;
    __declspec(property(get=GetisIdentical))
    VARIANT_BOOL isIdentical[];
    __declspec(property(get=Getname,put=Putname))
    _bstr_t name;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetisIdentical (
        struct IWMPMedia * pIWMPMedia );
    _bstr_t GetsourceURL ( );
    _bstr_t Getname ( );
    void Putname (
        _bstr_t pbstrName );
    long GetimageSourceWidth ( );
    long GetimageSourceHeight ( );
    long GetmarkerCount ( );
    double getMarkerTime (
        long MarkerNum );
    _bstr_t getMarkerName (
        long MarkerNum );
    double Getduration ( );
    _bstr_t GetdurationString ( );
    long GetattributeCount ( );
    _bstr_t getAttributeName (
        long lIndex );
    _bstr_t getItemInfo (
        _bstr_t bstrItemName );
    HRESULT setItemInfo (
        _bstr_t bstrItemName,
        _bstr_t bstrVal );
    _bstr_t getItemInfoByAtom (
        long lAtom );
    VARIANT_BOOL isMemberOf (
        struct IWMPPlaylist * pPlaylist );
    VARIANT_BOOL isReadOnlyItem (
        _bstr_t bstrItemName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_isIdentical (
        /*[in]*/ struct IWMPMedia * pIWMPMedia,
        /*[out,retval]*/ VARIANT_BOOL * pvbool ) = 0;
      virtual HRESULT __stdcall get_sourceURL (
        /*[out,retval]*/ BSTR * pbstrSourceURL ) = 0;
      virtual HRESULT __stdcall get_name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall put_name (
        /*[in]*/ BSTR pbstrName ) = 0;
      virtual HRESULT __stdcall get_imageSourceWidth (
        /*[out,retval]*/ long * pWidth ) = 0;
      virtual HRESULT __stdcall get_imageSourceHeight (
        /*[out,retval]*/ long * pHeight ) = 0;
      virtual HRESULT __stdcall get_markerCount (
        /*[out,retval]*/ long * pMarkerCount ) = 0;
      virtual HRESULT __stdcall raw_getMarkerTime (
        /*[in]*/ long MarkerNum,
        /*[out,retval]*/ double * pMarkerTime ) = 0;
      virtual HRESULT __stdcall raw_getMarkerName (
        /*[in]*/ long MarkerNum,
        /*[out,retval]*/ BSTR * pbstrMarkerName ) = 0;
      virtual HRESULT __stdcall get_duration (
        /*[out,retval]*/ double * pDuration ) = 0;
      virtual HRESULT __stdcall get_durationString (
        /*[out,retval]*/ BSTR * pbstrDuration ) = 0;
      virtual HRESULT __stdcall get_attributeCount (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_getAttributeName (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ BSTR * pbstrItemName ) = 0;
      virtual HRESULT __stdcall raw_getItemInfo (
        /*[in]*/ BSTR bstrItemName,
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_setItemInfo (
        /*[in]*/ BSTR bstrItemName,
        /*[in]*/ BSTR bstrVal ) = 0;
      virtual HRESULT __stdcall raw_getItemInfoByAtom (
        /*[in]*/ long lAtom,
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
      virtual HRESULT __stdcall raw_isMemberOf (
        /*[in]*/ struct IWMPPlaylist * pPlaylist,
        /*[out,retval]*/ VARIANT_BOOL * pvarfIsMemberOf ) = 0;
      virtual HRESULT __stdcall raw_isReadOnlyItem (
        /*[in]*/ BSTR bstrItemName,
        /*[out,retval]*/ VARIANT_BOOL * pvarfIsReadOnly ) = 0;
};

struct __declspec(uuid("8363bc22-b4b4-4b19-989d-1cd765749dd1"))
IWMPMediaCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IWMPMediaPtr add (
        _bstr_t bstrURL );
    IWMPPlaylistPtr getAll ( );
    IWMPPlaylistPtr getByName (
        _bstr_t bstrName );
    IWMPPlaylistPtr getByGenre (
        _bstr_t bstrGenre );
    IWMPPlaylistPtr getByAuthor (
        _bstr_t bstrAuthor );
    IWMPPlaylistPtr getByAlbum (
        _bstr_t bstrAlbum );
    IWMPPlaylistPtr getByAttribute (
        _bstr_t bstrAttribute,
        _bstr_t bstrValue );
    HRESULT remove (
        struct IWMPMedia * pItem,
        VARIANT_BOOL varfDeleteFile );
    IWMPStringCollectionPtr getAttributeStringCollection (
        _bstr_t bstrAttribute,
        _bstr_t bstrMediaType );
    long getMediaAtom (
        _bstr_t bstrItemName );
    HRESULT setDeleted (
        struct IWMPMedia * pItem,
        VARIANT_BOOL varfIsDeleted );
    VARIANT_BOOL isDeleted (
        struct IWMPMedia * pItem );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_add (
        /*[in]*/ BSTR bstrURL,
        /*[out,retval]*/ struct IWMPMedia * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_getAll (
        /*[out,retval]*/ struct IWMPPlaylist * * ppMediaItems ) = 0;
      virtual HRESULT __stdcall raw_getByName (
        /*[in]*/ BSTR bstrName,
        /*[out,retval]*/ struct IWMPPlaylist * * ppMediaItems ) = 0;
      virtual HRESULT __stdcall raw_getByGenre (
        /*[in]*/ BSTR bstrGenre,
        /*[out,retval]*/ struct IWMPPlaylist * * ppMediaItems ) = 0;
      virtual HRESULT __stdcall raw_getByAuthor (
        /*[in]*/ BSTR bstrAuthor,
        /*[out,retval]*/ struct IWMPPlaylist * * ppMediaItems ) = 0;
      virtual HRESULT __stdcall raw_getByAlbum (
        /*[in]*/ BSTR bstrAlbum,
        /*[out,retval]*/ struct IWMPPlaylist * * ppMediaItems ) = 0;
      virtual HRESULT __stdcall raw_getByAttribute (
        /*[in]*/ BSTR bstrAttribute,
        /*[in]*/ BSTR bstrValue,
        /*[out,retval]*/ struct IWMPPlaylist * * ppMediaItems ) = 0;
      virtual HRESULT __stdcall raw_remove (
        /*[in]*/ struct IWMPMedia * pItem,
        /*[in]*/ VARIANT_BOOL varfDeleteFile ) = 0;
      virtual HRESULT __stdcall raw_getAttributeStringCollection (
        /*[in]*/ BSTR bstrAttribute,
        /*[in]*/ BSTR bstrMediaType,
        /*[out,retval]*/ struct IWMPStringCollection * * ppStringCollection ) = 0;
      virtual HRESULT __stdcall raw_getMediaAtom (
        /*[in]*/ BSTR bstrItemName,
        /*[out,retval]*/ long * plAtom ) = 0;
      virtual HRESULT __stdcall raw_setDeleted (
        /*[in]*/ struct IWMPMedia * pItem,
        /*[in]*/ VARIANT_BOOL varfIsDeleted ) = 0;
      virtual HRESULT __stdcall raw_isDeleted (
        /*[in]*/ struct IWMPMedia * pItem,
        /*[out,retval]*/ VARIANT_BOOL * pvarfIsDeleted ) = 0;
};

struct __declspec(uuid("3df47861-7df1-4c1f-a81b-4c26f0f7a7c6"))
IWMPLibrary : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=Getname))
    _bstr_t name;
    __declspec(property(get=Gettype))
    enum WMPLibraryType type;
    __declspec(property(get=GetmediaCollection))
    IWMPMediaCollectionPtr mediaCollection;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t Getname ( );
    enum WMPLibraryType Gettype ( );
    IWMPMediaCollectionPtr GetmediaCollection ( );
    VARIANT_BOOL isIdentical (
        struct IWMPLibrary * pIWMPLibrary );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_name (
        /*[out,retval]*/ BSTR * pbstrName ) = 0;
      virtual HRESULT __stdcall get_type (
        /*[out,retval]*/ enum WMPLibraryType * pwmplt ) = 0;
      virtual HRESULT __stdcall get_mediaCollection (
        /*[out,retval]*/ struct IWMPMediaCollection * * ppIWMPMediaCollection ) = 0;
      virtual HRESULT __stdcall raw_isIdentical (
        /*[in]*/ struct IWMPLibrary * pIWMPLibrary,
        /*[out,retval]*/ VARIANT_BOOL * pvbool ) = 0;
};

struct __declspec(uuid("74c09e02-f828-11d2-a74b-00a0c905f36e"))
IWMPControls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetcurrentPosition,put=PutcurrentPosition))
    double currentPosition;
    __declspec(property(get=GetcurrentPositionString))
    _bstr_t currentPositionString;
    __declspec(property(get=GetcurrentItem,put=PutcurrentItem))
    IWMPMediaPtr currentItem;
    __declspec(property(get=GetcurrentMarker,put=PutcurrentMarker))
    long currentMarker;
    __declspec(property(get=GetisAvailable))
    VARIANT_BOOL isAvailable[];

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetisAvailable (
        _bstr_t bstrItem );
    HRESULT play ( );
    HRESULT stop ( );
    HRESULT pause ( );
    HRESULT fastForward ( );
    HRESULT fastReverse ( );
    double GetcurrentPosition ( );
    void PutcurrentPosition (
        double pdCurrentPosition );
    _bstr_t GetcurrentPositionString ( );
    HRESULT next ( );
    HRESULT previous ( );
    IWMPMediaPtr GetcurrentItem ( );
    void PutcurrentItem (
        struct IWMPMedia * ppIWMPMedia );
    long GetcurrentMarker ( );
    void PutcurrentMarker (
        long plMarker );
    HRESULT playItem (
        struct IWMPMedia * pIWMPMedia );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_isAvailable (
        /*[in]*/ BSTR bstrItem,
        /*[out,retval]*/ VARIANT_BOOL * pIsAvailable ) = 0;
      virtual HRESULT __stdcall raw_play ( ) = 0;
      virtual HRESULT __stdcall raw_stop ( ) = 0;
      virtual HRESULT __stdcall raw_pause ( ) = 0;
      virtual HRESULT __stdcall raw_fastForward ( ) = 0;
      virtual HRESULT __stdcall raw_fastReverse ( ) = 0;
      virtual HRESULT __stdcall get_currentPosition (
        /*[out,retval]*/ double * pdCurrentPosition ) = 0;
      virtual HRESULT __stdcall put_currentPosition (
        /*[in]*/ double pdCurrentPosition ) = 0;
      virtual HRESULT __stdcall get_currentPositionString (
        /*[out,retval]*/ BSTR * pbstrCurrentPosition ) = 0;
      virtual HRESULT __stdcall raw_next ( ) = 0;
      virtual HRESULT __stdcall raw_previous ( ) = 0;
      virtual HRESULT __stdcall get_currentItem (
        /*[out,retval]*/ struct IWMPMedia * * ppIWMPMedia ) = 0;
      virtual HRESULT __stdcall put_currentItem (
        /*[in]*/ struct IWMPMedia * ppIWMPMedia ) = 0;
      virtual HRESULT __stdcall get_currentMarker (
        /*[out,retval]*/ long * plMarker ) = 0;
      virtual HRESULT __stdcall put_currentMarker (
        /*[in]*/ long plMarker ) = 0;
      virtual HRESULT __stdcall raw_playItem (
        /*[in]*/ struct IWMPMedia * pIWMPMedia ) = 0;
};

struct __declspec(uuid("679409c0-99f7-11d3-9fb7-00105aa620bb"))
IWMPPlaylistArray : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcount))
    long count;

    //
    // Wrapper methods for error-handling
    //

    long Getcount ( );
    IWMPPlaylistPtr Item (
        long lIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_count (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct IWMPPlaylist * * ppItem ) = 0;
};

struct __declspec(uuid("10a13217-23a7-439b-b1c0-d847c79b7774"))
IWMPPlaylistCollection : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IWMPPlaylistPtr newPlaylist (
        _bstr_t bstrName );
    IWMPPlaylistArrayPtr getAll ( );
    IWMPPlaylistArrayPtr getByName (
        _bstr_t bstrName );
    HRESULT remove (
        struct IWMPPlaylist * pItem );
    HRESULT setDeleted (
        struct IWMPPlaylist * pItem,
        VARIANT_BOOL varfIsDeleted );
    VARIANT_BOOL isDeleted (
        struct IWMPPlaylist * pItem );
    IWMPPlaylistPtr importPlaylist (
        struct IWMPPlaylist * pItem );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_newPlaylist (
        /*[in]*/ BSTR bstrName,
        /*[out,retval]*/ struct IWMPPlaylist * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_getAll (
        /*[out,retval]*/ struct IWMPPlaylistArray * * ppPlaylistArray ) = 0;
      virtual HRESULT __stdcall raw_getByName (
        /*[in]*/ BSTR bstrName,
        /*[out,retval]*/ struct IWMPPlaylistArray * * ppPlaylistArray ) = 0;
      virtual HRESULT __stdcall raw_remove (
        /*[in]*/ struct IWMPPlaylist * pItem ) = 0;
      virtual HRESULT __stdcall raw_setDeleted (
        /*[in]*/ struct IWMPPlaylist * pItem,
        /*[in]*/ VARIANT_BOOL varfIsDeleted ) = 0;
      virtual HRESULT __stdcall raw_isDeleted (
        /*[in]*/ struct IWMPPlaylist * pItem,
        /*[out,retval]*/ VARIANT_BOOL * pvarfIsDeleted ) = 0;
      virtual HRESULT __stdcall raw_importPlaylist (
        /*[in]*/ struct IWMPPlaylist * pItem,
        /*[out,retval]*/ struct IWMPPlaylist * * ppImportedItem ) = 0;
};

struct __declspec(uuid("cfab6e98-8730-11d3-b388-00c04f68574b"))
IWMPCdrom : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdriveSpecifier))
    _bstr_t driveSpecifier;
    __declspec(property(get=GetPlaylist))
    IWMPPlaylistPtr Playlist;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetdriveSpecifier ( );
    IWMPPlaylistPtr GetPlaylist ( );
    HRESULT eject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_driveSpecifier (
        /*[out,retval]*/ BSTR * pbstrDrive ) = 0;
      virtual HRESULT __stdcall get_Playlist (
        /*[out,retval]*/ struct IWMPPlaylist * * ppPlaylist ) = 0;
      virtual HRESULT __stdcall raw_eject ( ) = 0;
};

struct __declspec(uuid("ee4c8fe2-34b2-11d3-a3bf-006097c9b344"))
IWMPCdromCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getcount))
    long count;

    //
    // Wrapper methods for error-handling
    //

    long Getcount ( );
    IWMPCdromPtr Item (
        long lIndex );
    IWMPCdromPtr getByDriveSpecifier (
        _bstr_t bstrDriveSpecifier );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_count (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct IWMPCdrom * * ppItem ) = 0;
      virtual HRESULT __stdcall raw_getByDriveSpecifier (
        /*[in]*/ BSTR bstrDriveSpecifier,
        /*[out,retval]*/ struct IWMPCdrom * * ppCdrom ) = 0;
};

struct __declspec(uuid("d84cca99-cce2-11d2-9ecc-0000f8085981"))
IWMPCore : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetURL,put=PutURL))
    _bstr_t URL;
    __declspec(property(get=GetopenState))
    enum WMPOpenState openState;
    __declspec(property(get=Getcontrols))
    IWMPControlsPtr controls;
    __declspec(property(get=Getsettings))
    IWMPSettingsPtr settings;
    __declspec(property(get=GetcurrentMedia,put=PutcurrentMedia))
    IWMPMediaPtr currentMedia;
    __declspec(property(get=Getnetwork))
    IWMPNetworkPtr network;
    __declspec(property(get=GetmediaCollection))
    IWMPMediaCollectionPtr mediaCollection;
    __declspec(property(get=GetplaylistCollection))
    IWMPPlaylistCollectionPtr playlistCollection;
    __declspec(property(get=GetplayState))
    enum WMPPlayState playState;
    __declspec(property(get=GetversionInfo))
    _bstr_t versionInfo;
    __declspec(property(get=GetcurrentPlaylist,put=PutcurrentPlaylist))
    IWMPPlaylistPtr currentPlaylist;
    __declspec(property(get=GetcdromCollection))
    IWMPCdromCollectionPtr cdromCollection;
    __declspec(property(get=GetclosedCaption))
    IWMPClosedCaptionPtr closedCaption;
    __declspec(property(get=GetisOnline))
    VARIANT_BOOL isOnline;
    __declspec(property(get=GetError))
    IWMPErrorPtr Error;
    __declspec(property(get=Getstatus))
    _bstr_t status;

    //
    // Wrapper methods for error-handling
    //

    HRESULT close ( );
    _bstr_t GetURL ( );
    void PutURL (
        _bstr_t pbstrURL );
    enum WMPOpenState GetopenState ( );
    enum WMPPlayState GetplayState ( );
    IWMPControlsPtr Getcontrols ( );
    IWMPSettingsPtr Getsettings ( );
    IWMPMediaPtr GetcurrentMedia ( );
    void PutcurrentMedia (
        struct IWMPMedia * ppMedia );
    IWMPMediaCollectionPtr GetmediaCollection ( );
    IWMPPlaylistCollectionPtr GetplaylistCollection ( );
    _bstr_t GetversionInfo ( );
    HRESULT launchURL (
        _bstr_t bstrURL );
    IWMPNetworkPtr Getnetwork ( );
    IWMPPlaylistPtr GetcurrentPlaylist ( );
    void PutcurrentPlaylist (
        struct IWMPPlaylist * ppPL );
    IWMPCdromCollectionPtr GetcdromCollection ( );
    IWMPClosedCaptionPtr GetclosedCaption ( );
    VARIANT_BOOL GetisOnline ( );
    IWMPErrorPtr GetError ( );
    _bstr_t Getstatus ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_close ( ) = 0;
      virtual HRESULT __stdcall get_URL (
        /*[out,retval]*/ BSTR * pbstrURL ) = 0;
      virtual HRESULT __stdcall put_URL (
        /*[in]*/ BSTR pbstrURL ) = 0;
      virtual HRESULT __stdcall get_openState (
        /*[out,retval]*/ enum WMPOpenState * pwmpos ) = 0;
      virtual HRESULT __stdcall get_playState (
        /*[out,retval]*/ enum WMPPlayState * pwmpps ) = 0;
      virtual HRESULT __stdcall get_controls (
        /*[out,retval]*/ struct IWMPControls * * ppControl ) = 0;
      virtual HRESULT __stdcall get_settings (
        /*[out,retval]*/ struct IWMPSettings * * ppSettings ) = 0;
      virtual HRESULT __stdcall get_currentMedia (
        /*[out,retval]*/ struct IWMPMedia * * ppMedia ) = 0;
      virtual HRESULT __stdcall put_currentMedia (
        /*[in]*/ struct IWMPMedia * ppMedia ) = 0;
      virtual HRESULT __stdcall get_mediaCollection (
        /*[out,retval]*/ struct IWMPMediaCollection * * ppMediaCollection ) = 0;
      virtual HRESULT __stdcall get_playlistCollection (
        /*[out,retval]*/ struct IWMPPlaylistCollection * * ppPlaylistCollection ) = 0;
      virtual HRESULT __stdcall get_versionInfo (
        /*[out,retval]*/ BSTR * pbstrVersionInfo ) = 0;
      virtual HRESULT __stdcall raw_launchURL (
        /*[in]*/ BSTR bstrURL ) = 0;
      virtual HRESULT __stdcall get_network (
        /*[out,retval]*/ struct IWMPNetwork * * ppQNI ) = 0;
      virtual HRESULT __stdcall get_currentPlaylist (
        /*[out,retval]*/ struct IWMPPlaylist * * ppPL ) = 0;
      virtual HRESULT __stdcall put_currentPlaylist (
        /*[in]*/ struct IWMPPlaylist * ppPL ) = 0;
      virtual HRESULT __stdcall get_cdromCollection (
        /*[out,retval]*/ struct IWMPCdromCollection * * ppCdromCollection ) = 0;
      virtual HRESULT __stdcall get_closedCaption (
        /*[out,retval]*/ struct IWMPClosedCaption * * ppClosedCaption ) = 0;
      virtual HRESULT __stdcall get_isOnline (
        /*[out,retval]*/ VARIANT_BOOL * pfOnline ) = 0;
      virtual HRESULT __stdcall get_Error (
        /*[out,retval]*/ struct IWMPError * * ppError ) = 0;
      virtual HRESULT __stdcall get_status (
        /*[out,retval]*/ BSTR * pbstrStatus ) = 0;
};

struct __declspec(uuid("bc17e5b7-7561-4c18-bb90-17d485775659"))
IWMPCore2 : IWMPCore
{
    //
    // Property data
    //

    __declspec(property(get=Getdvd))
    IWMPDVDPtr dvd;

    //
    // Wrapper methods for error-handling
    //

    IWMPDVDPtr Getdvd ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_dvd (
        /*[out,retval]*/ struct IWMPDVD * * ppDVD ) = 0;
};

struct __declspec(uuid("7587c667-628f-499f-88e7-6a6f4e888464"))
IWMPCore3 : IWMPCore2
{
    //
    // Wrapper methods for error-handling
    //

    IWMPPlaylistPtr newPlaylist (
        _bstr_t bstrName,
        _bstr_t bstrURL );
    IWMPMediaPtr newMedia (
        _bstr_t bstrURL );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_newPlaylist (
        /*[in]*/ BSTR bstrName,
        /*[in]*/ BSTR bstrURL,
        /*[out,retval]*/ struct IWMPPlaylist * * ppPlaylist ) = 0;
      virtual HRESULT __stdcall raw_newMedia (
        /*[in]*/ BSTR bstrURL,
        /*[out,retval]*/ struct IWMPMedia * * ppMedia ) = 0;
};

struct __declspec(uuid("6c497d62-8919-413c-82db-e935fb3ec584"))
IWMPPlayer4 : IWMPCore3
{
    //
    // Property data
    //

    __declspec(property(get=Getenabled,put=Putenabled))
    VARIANT_BOOL enabled;
    __declspec(property(get=GetuiMode,put=PutuiMode))
    _bstr_t uiMode;
    __declspec(property(get=GetstretchToFit,put=PutstretchToFit))
    VARIANT_BOOL stretchToFit;
    __declspec(property(get=GetwindowlessVideo,put=PutwindowlessVideo))
    VARIANT_BOOL windowlessVideo;
    __declspec(property(get=GetisRemote))
    VARIANT_BOOL isRemote;
    __declspec(property(get=GetplayerApplication))
    IWMPPlayerApplicationPtr playerApplication;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Getenabled ( );
    void Putenabled (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetfullScreen ( );
    void PutfullScreen (
        VARIANT_BOOL pbFullScreen );
    VARIANT_BOOL GetenableContextMenu ( );
    void PutenableContextMenu (
        VARIANT_BOOL pbEnableContextMenu );
    void PutuiMode (
        _bstr_t pbstrMode );
    _bstr_t GetuiMode ( );
    VARIANT_BOOL GetstretchToFit ( );
    void PutstretchToFit (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetwindowlessVideo ( );
    void PutwindowlessVideo (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetisRemote ( );
    IWMPPlayerApplicationPtr GetplayerApplication ( );
    HRESULT openPlayer (
        _bstr_t bstrURL );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_enabled (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_enabled (
        /*[in]*/ VARIANT_BOOL pbEnabled ) = 0;
      virtual HRESULT __stdcall get_fullScreen (
        /*[out,retval]*/ VARIANT_BOOL * pbFullScreen ) = 0;
      virtual HRESULT __stdcall put_fullScreen (
        VARIANT_BOOL pbFullScreen ) = 0;
      virtual HRESULT __stdcall get_enableContextMenu (
        /*[out,retval]*/ VARIANT_BOOL * pbEnableContextMenu ) = 0;
      virtual HRESULT __stdcall put_enableContextMenu (
        VARIANT_BOOL pbEnableContextMenu ) = 0;
      virtual HRESULT __stdcall put_uiMode (
        /*[in]*/ BSTR pbstrMode ) = 0;
      virtual HRESULT __stdcall get_uiMode (
        /*[out,retval]*/ BSTR * pbstrMode ) = 0;
      virtual HRESULT __stdcall get_stretchToFit (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_stretchToFit (
        /*[in]*/ VARIANT_BOOL pbEnabled ) = 0;
      virtual HRESULT __stdcall get_windowlessVideo (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_windowlessVideo (
        /*[in]*/ VARIANT_BOOL pbEnabled ) = 0;
      virtual HRESULT __stdcall get_isRemote (
        /*[out,retval]*/ VARIANT_BOOL * pvarfIsRemote ) = 0;
      virtual HRESULT __stdcall get_playerApplication (
        /*[out,retval]*/ struct IWMPPlayerApplication * * ppIWMPPlayerApplication ) = 0;
      virtual HRESULT __stdcall raw_openPlayer (
        /*[in]*/ BSTR bstrURL ) = 0;
};

struct __declspec(uuid("54062b68-052a-4c25-a39f-8b63346511d4"))
IWMPPlayer3 : IWMPCore2
{
    //
    // Property data
    //

    __declspec(property(get=Getenabled,put=Putenabled))
    VARIANT_BOOL enabled;
    __declspec(property(get=GetuiMode,put=PutuiMode))
    _bstr_t uiMode;
    __declspec(property(get=GetstretchToFit,put=PutstretchToFit))
    VARIANT_BOOL stretchToFit;
    __declspec(property(get=GetwindowlessVideo,put=PutwindowlessVideo))
    VARIANT_BOOL windowlessVideo;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Getenabled ( );
    void Putenabled (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetfullScreen ( );
    void PutfullScreen (
        VARIANT_BOOL pbFullScreen );
    VARIANT_BOOL GetenableContextMenu ( );
    void PutenableContextMenu (
        VARIANT_BOOL pbEnableContextMenu );
    void PutuiMode (
        _bstr_t pbstrMode );
    _bstr_t GetuiMode ( );
    VARIANT_BOOL GetstretchToFit ( );
    void PutstretchToFit (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetwindowlessVideo ( );
    void PutwindowlessVideo (
        VARIANT_BOOL pbEnabled );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_enabled (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_enabled (
        /*[in]*/ VARIANT_BOOL pbEnabled ) = 0;
      virtual HRESULT __stdcall get_fullScreen (
        /*[out,retval]*/ VARIANT_BOOL * pbFullScreen ) = 0;
      virtual HRESULT __stdcall put_fullScreen (
        VARIANT_BOOL pbFullScreen ) = 0;
      virtual HRESULT __stdcall get_enableContextMenu (
        /*[out,retval]*/ VARIANT_BOOL * pbEnableContextMenu ) = 0;
      virtual HRESULT __stdcall put_enableContextMenu (
        VARIANT_BOOL pbEnableContextMenu ) = 0;
      virtual HRESULT __stdcall put_uiMode (
        /*[in]*/ BSTR pbstrMode ) = 0;
      virtual HRESULT __stdcall get_uiMode (
        /*[out,retval]*/ BSTR * pbstrMode ) = 0;
      virtual HRESULT __stdcall get_stretchToFit (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_stretchToFit (
        /*[in]*/ VARIANT_BOOL pbEnabled ) = 0;
      virtual HRESULT __stdcall get_windowlessVideo (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_windowlessVideo (
        /*[in]*/ VARIANT_BOOL pbEnabled ) = 0;
};

struct __declspec(uuid("0e6b01d1-d407-4c85-bf5f-1c01f6150280"))
IWMPPlayer2 : IWMPCore
{
    //
    // Property data
    //

    __declspec(property(get=Getenabled,put=Putenabled))
    VARIANT_BOOL enabled;
    __declspec(property(get=GetuiMode,put=PutuiMode))
    _bstr_t uiMode;
    __declspec(property(get=GetstretchToFit,put=PutstretchToFit))
    VARIANT_BOOL stretchToFit;
    __declspec(property(get=GetwindowlessVideo,put=PutwindowlessVideo))
    VARIANT_BOOL windowlessVideo;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Getenabled ( );
    void Putenabled (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetfullScreen ( );
    void PutfullScreen (
        VARIANT_BOOL pbFullScreen );
    VARIANT_BOOL GetenableContextMenu ( );
    void PutenableContextMenu (
        VARIANT_BOOL pbEnableContextMenu );
    void PutuiMode (
        _bstr_t pbstrMode );
    _bstr_t GetuiMode ( );
    VARIANT_BOOL GetstretchToFit ( );
    void PutstretchToFit (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetwindowlessVideo ( );
    void PutwindowlessVideo (
        VARIANT_BOOL pbEnabled );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_enabled (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_enabled (
        /*[in]*/ VARIANT_BOOL pbEnabled ) = 0;
      virtual HRESULT __stdcall get_fullScreen (
        /*[out,retval]*/ VARIANT_BOOL * pbFullScreen ) = 0;
      virtual HRESULT __stdcall put_fullScreen (
        VARIANT_BOOL pbFullScreen ) = 0;
      virtual HRESULT __stdcall get_enableContextMenu (
        /*[out,retval]*/ VARIANT_BOOL * pbEnableContextMenu ) = 0;
      virtual HRESULT __stdcall put_enableContextMenu (
        VARIANT_BOOL pbEnableContextMenu ) = 0;
      virtual HRESULT __stdcall put_uiMode (
        /*[in]*/ BSTR pbstrMode ) = 0;
      virtual HRESULT __stdcall get_uiMode (
        /*[out,retval]*/ BSTR * pbstrMode ) = 0;
      virtual HRESULT __stdcall get_stretchToFit (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_stretchToFit (
        /*[in]*/ VARIANT_BOOL pbEnabled ) = 0;
      virtual HRESULT __stdcall get_windowlessVideo (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_windowlessVideo (
        /*[in]*/ VARIANT_BOOL pbEnabled ) = 0;
};

struct __declspec(uuid("6bf52a4f-394a-11d3-b153-00c04f79faa6"))
IWMPPlayer : IWMPCore
{
    //
    // Property data
    //

    __declspec(property(get=Getenabled,put=Putenabled))
    VARIANT_BOOL enabled;
    __declspec(property(get=GetuiMode,put=PutuiMode))
    _bstr_t uiMode;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Getenabled ( );
    void Putenabled (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetfullScreen ( );
    void PutfullScreen (
        VARIANT_BOOL pbFullScreen );
    VARIANT_BOOL GetenableContextMenu ( );
    void PutenableContextMenu (
        VARIANT_BOOL pbEnableContextMenu );
    void PutuiMode (
        _bstr_t pbstrMode );
    _bstr_t GetuiMode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_enabled (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_enabled (
        /*[in]*/ VARIANT_BOOL pbEnabled ) = 0;
      virtual HRESULT __stdcall get_fullScreen (
        /*[out,retval]*/ VARIANT_BOOL * pbFullScreen ) = 0;
      virtual HRESULT __stdcall put_fullScreen (
        VARIANT_BOOL pbFullScreen ) = 0;
      virtual HRESULT __stdcall get_enableContextMenu (
        /*[out,retval]*/ VARIANT_BOOL * pbEnableContextMenu ) = 0;
      virtual HRESULT __stdcall put_enableContextMenu (
        VARIANT_BOOL pbEnableContextMenu ) = 0;
      virtual HRESULT __stdcall put_uiMode (
        /*[in]*/ BSTR pbstrMode ) = 0;
      virtual HRESULT __stdcall get_uiMode (
        /*[out,retval]*/ BSTR * pbstrMode ) = 0;
};

struct __declspec(uuid("6f030d25-0890-480f-9775-1f7e40ab5b8e"))
IWMPControls2 : IWMPControls
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT step (
        long lStep );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_step (
        /*[in]*/ long lStep ) = 0;
};

struct __declspec(uuid("ab7c88bb-143e-4ea4-acc3-e4350b2106c3"))
IWMPMedia2 : IWMPMedia
{
    //
    // Property data
    //

    __declspec(property(get=GetError))
    IWMPErrorItemPtr Error;

    //
    // Wrapper methods for error-handling
    //

    IWMPErrorItemPtr GetError ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Error (
        /*[out,retval]*/ struct IWMPErrorItem * * ppIWMPErrorItem ) = 0;
};

struct __declspec(uuid("f118efc7-f03a-4fb4-99c9-1c02a5c1065b"))
IWMPMedia3 : IWMPMedia2
{
    //
    // Wrapper methods for error-handling
    //

    long getAttributeCountByType (
        _bstr_t bstrType,
        _bstr_t bstrLanguage );
    _variant_t getItemInfoByType (
        _bstr_t bstrType,
        _bstr_t bstrLanguage,
        long lIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getAttributeCountByType (
        /*[in]*/ BSTR bstrType,
        /*[in]*/ BSTR bstrLanguage,
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_getItemInfoByType (
        /*[in]*/ BSTR bstrType,
        /*[in]*/ BSTR bstrLanguage,
        /*[in]*/ long lIndex,
        /*[out,retval]*/ VARIANT * pvarValue ) = 0;
};

struct __declspec(uuid("a1d1110e-d545-476a-9a78-ac3e4cb1e6bd"))
IWMPControls3 : IWMPControls2
{
    //
    // Property data
    //

    __declspec(property(get=GetaudioLanguageCount))
    long audioLanguageCount;
    __declspec(property(get=GetcurrentAudioLanguage,put=PutcurrentAudioLanguage))
    long currentAudioLanguage;
    __declspec(property(get=GetcurrentAudioLanguageIndex,put=PutcurrentAudioLanguageIndex))
    long currentAudioLanguageIndex;
    __declspec(property(get=GetcurrentPositionTimecode,put=PutcurrentPositionTimecode))
    _bstr_t currentPositionTimecode;

    //
    // Wrapper methods for error-handling
    //

    long GetaudioLanguageCount ( );
    long getAudioLanguageID (
        long lIndex );
    _bstr_t getAudioLanguageDescription (
        long lIndex );
    long GetcurrentAudioLanguage ( );
    void PutcurrentAudioLanguage (
        long plLangID );
    long GetcurrentAudioLanguageIndex ( );
    void PutcurrentAudioLanguageIndex (
        long plIndex );
    _bstr_t getLanguageName (
        long lLangID );
    _bstr_t GetcurrentPositionTimecode ( );
    void PutcurrentPositionTimecode (
        _bstr_t bstrTimecode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_audioLanguageCount (
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_getAudioLanguageID (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ long * plLangID ) = 0;
      virtual HRESULT __stdcall raw_getAudioLanguageDescription (
        /*[in]*/ long lIndex,
        /*[out,retval]*/ BSTR * pbstrLangDesc ) = 0;
      virtual HRESULT __stdcall get_currentAudioLanguage (
        /*[out,retval]*/ long * plLangID ) = 0;
      virtual HRESULT __stdcall put_currentAudioLanguage (
        /*[in]*/ long plLangID ) = 0;
      virtual HRESULT __stdcall get_currentAudioLanguageIndex (
        /*[out,retval]*/ long * plIndex ) = 0;
      virtual HRESULT __stdcall put_currentAudioLanguageIndex (
        /*[in]*/ long plIndex ) = 0;
      virtual HRESULT __stdcall raw_getLanguageName (
        /*[in]*/ long lLangID,
        /*[out,retval]*/ BSTR * pbstrLangName ) = 0;
      virtual HRESULT __stdcall get_currentPositionTimecode (
        /*[out,retval]*/ BSTR * bstrTimecode ) = 0;
      virtual HRESULT __stdcall put_currentPositionTimecode (
        /*[in]*/ BSTR bstrTimecode ) = 0;
};

struct __declspec(uuid("8ba957f5-fd8c-4791-b82d-f840401ee474"))
IWMPMediaCollection2 : IWMPMediaCollection
{
    //
    // Wrapper methods for error-handling
    //

    IWMPQueryPtr createQuery ( );
    IWMPPlaylistPtr getPlaylistByQuery (
        struct IWMPQuery * pQuery,
        _bstr_t bstrMediaType,
        _bstr_t bstrSortAttribute,
        VARIANT_BOOL fSortAscending );
    IWMPStringCollectionPtr getStringCollectionByQuery (
        _bstr_t bstrAttribute,
        struct IWMPQuery * pQuery,
        _bstr_t bstrMediaType,
        _bstr_t bstrSortAttribute,
        VARIANT_BOOL fSortAscending );
    IWMPPlaylistPtr getByAttributeAndMediaType (
        _bstr_t bstrAttribute,
        _bstr_t bstrValue,
        _bstr_t bstrMediaType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_createQuery (
        /*[out,retval]*/ struct IWMPQuery * * ppQuery ) = 0;
      virtual HRESULT __stdcall raw_getPlaylistByQuery (
        /*[in]*/ struct IWMPQuery * pQuery,
        /*[in]*/ BSTR bstrMediaType,
        /*[in]*/ BSTR bstrSortAttribute,
        /*[in]*/ VARIANT_BOOL fSortAscending,
        /*[out,retval]*/ struct IWMPPlaylist * * ppPlaylist ) = 0;
      virtual HRESULT __stdcall raw_getStringCollectionByQuery (
        /*[in]*/ BSTR bstrAttribute,
        /*[in]*/ struct IWMPQuery * pQuery,
        /*[in]*/ BSTR bstrMediaType,
        /*[in]*/ BSTR bstrSortAttribute,
        /*[in]*/ VARIANT_BOOL fSortAscending,
        /*[out,retval]*/ struct IWMPStringCollection * * ppStringCollection ) = 0;
      virtual HRESULT __stdcall raw_getByAttributeAndMediaType (
        /*[in]*/ BSTR bstrAttribute,
        /*[in]*/ BSTR bstrValue,
        /*[in]*/ BSTR bstrMediaType,
        /*[out,retval]*/ struct IWMPPlaylist * * ppMediaItems ) = 0;
};

struct __declspec(uuid("39c2f8d5-1cf2-4d5e-ae09-d73492cf9eaa"))
IWMPLibraryServices : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    long getCountByType (
        enum WMPLibraryType wmplt );
    IWMPLibraryPtr getLibraryByType (
        enum WMPLibraryType wmplt,
        long lIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getCountByType (
        /*[in]*/ enum WMPLibraryType wmplt,
        /*[out,retval]*/ long * plCount ) = 0;
      virtual HRESULT __stdcall raw_getLibraryByType (
        /*[in]*/ enum WMPLibraryType wmplt,
        /*[in]*/ long lIndex,
        /*[out,retval]*/ struct IWMPLibrary * * ppIWMPLibrary ) = 0;
};

struct __declspec(uuid("dd578a4e-79b1-426c-bf8f-3add9072500b"))
IWMPLibrary2 : IWMPLibrary
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t getItemInfo (
        _bstr_t bstrItemName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_getItemInfo (
        /*[in]*/ BSTR bstrItemName,
        /*[out,retval]*/ BSTR * pbstrVal ) = 0;
};

struct __declspec(uuid("b22c85f9-263c-4372-a0da-b518db9b4098"))
IWMPSyncDevice3 : IWMPSyncDevice2
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT estimateSyncSize (
        struct IWMPPlaylist * pNonRulePlaylist,
        struct IWMPPlaylist * pRulesPlaylist );
    HRESULT cancelEstimation ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_estimateSyncSize (
        /*[in]*/ struct IWMPPlaylist * pNonRulePlaylist,
        /*[in]*/ struct IWMPPlaylist * pRulesPlaylist ) = 0;
      virtual HRESULT __stdcall raw_cancelEstimation ( ) = 0;
};

struct __declspec(uuid("5f9cfd92-8cad-11d3-9a7e-00c04f8efb70"))
IWMPPlaylistCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetitemErrorColor,put=PutitemErrorColor))
    _bstr_t itemErrorColor;
    __declspec(property(get=GetitemCount))
    long itemCount;
    __declspec(property(get=GetitemMedia))
    IWMPMediaPtr itemMedia[];
    __declspec(property(get=GetitemPlaylist))
    IWMPPlaylistPtr itemPlaylist[];
    __declspec(property(get=GetleftStatus,put=PutleftStatus))
    _bstr_t leftStatus;
    __declspec(property(get=GetrightStatus,put=PutrightStatus))
    _bstr_t rightStatus;
    __declspec(property(get=GeteditButtonVisible,put=PuteditButtonVisible))
    VARIANT_BOOL editButtonVisible;
    __declspec(property(get=GetdropDownImage,put=PutdropDownImage))
    _bstr_t dropDownImage;
    __declspec(property(get=GetdropDownBackgroundImage,put=PutdropDownBackgroundImage))
    _bstr_t dropDownBackgroundImage;
    __declspec(property(get=GethueShift,put=PuthueShift))
    float hueShift;
    __declspec(property(get=Getsaturation,put=Putsaturation))
    float saturation;
    __declspec(property(get=GetstatusColor,put=PutstatusColor))
    _bstr_t statusColor;
    __declspec(property(get=GettoolbarVisible,put=PuttoolbarVisible))
    VARIANT_BOOL toolbarVisible;
    __declspec(property(get=GetPlaylist,put=PutPlaylist))
    IWMPPlaylistPtr Playlist;
    __declspec(property(get=Getcolumns,put=Putcolumns))
    _bstr_t columns;
    __declspec(property(get=GetcolumnCount))
    long columnCount;
    __declspec(property(get=GetcolumnOrder,put=PutcolumnOrder))
    _bstr_t columnOrder;
    __declspec(property(get=GetcolumnsVisible,put=PutcolumnsVisible))
    VARIANT_BOOL columnsVisible;
    __declspec(property(get=GetitemSelectedColor,put=PutitemSelectedColor))
    _bstr_t itemSelectedColor;
    __declspec(property(get=GetdropDownVisible,put=PutdropDownVisible))
    VARIANT_BOOL dropDownVisible;
    __declspec(property(get=GetplaylistItemsVisible,put=PutplaylistItemsVisible))
    VARIANT_BOOL playlistItemsVisible;
    __declspec(property(get=GetcheckboxesVisible,put=PutcheckboxesVisible))
    VARIANT_BOOL checkboxesVisible;
    __declspec(property(get=GetitemSelectedFocusLostColor,put=PutitemSelectedFocusLostColor))
    _bstr_t itemSelectedFocusLostColor;
    __declspec(property(get=GetitemSelectedBackgroundColor,put=PutitemSelectedBackgroundColor))
    _bstr_t itemSelectedBackgroundColor;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetforegroundColor,put=PutforegroundColor))
    _bstr_t foregroundColor;
    __declspec(property(get=GetdisabledItemColor,put=PutdisabledItemColor))
    _bstr_t disabledItemColor;
    __declspec(property(get=GetitemPlayingColor,put=PutitemPlayingColor))
    _bstr_t itemPlayingColor;
    __declspec(property(get=GetitemPlayingBackgroundColor,put=PutitemPlayingBackgroundColor))
    _bstr_t itemPlayingBackgroundColor;
    __declspec(property(get=GetbackgroundImage,put=PutbackgroundImage))
    _bstr_t backgroundImage;
    __declspec(property(get=GetallowItemEditing,put=PutallowItemEditing))
    VARIANT_BOOL allowItemEditing;
    __declspec(property(get=GetallowColumnSorting,put=PutallowColumnSorting))
    VARIANT_BOOL allowColumnSorting;
    __declspec(property(get=GetdropDownList,put=PutdropDownList))
    _bstr_t dropDownList;
    __declspec(property(get=GetdropDownToolTip,put=PutdropDownToolTip))
    _bstr_t dropDownToolTip;
    __declspec(property(get=Getcopying,put=Putcopying))
    VARIANT_BOOL copying;
    __declspec(property(get=GetitemSelectedBackgroundFocusLostColor,put=PutitemSelectedBackgroundFocusLostColor))
    _bstr_t itemSelectedBackgroundFocusLostColor;
    __declspec(property(get=GetbackgroundSplitColor,put=PutbackgroundSplitColor))
    _bstr_t backgroundSplitColor;
    __declspec(property(get=GetstatusTextColor,put=PutstatusTextColor))
    _bstr_t statusTextColor;

    //
    // Wrapper methods for error-handling
    //

    IWMPPlaylistPtr GetPlaylist ( );
    void PutPlaylist (
        struct IWMPPlaylist * ppdispPlaylist );
    _bstr_t Getcolumns ( );
    void Putcolumns (
        _bstr_t pbstrColumns );
    long GetcolumnCount ( );
    _bstr_t GetcolumnOrder ( );
    void PutcolumnOrder (
        _bstr_t pbstrColumnOrder );
    VARIANT_BOOL GetcolumnsVisible ( );
    void PutcolumnsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetdropDownVisible ( );
    void PutdropDownVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetplaylistItemsVisible ( );
    void PutplaylistItemsVisible (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetcheckboxesVisible ( );
    void PutcheckboxesVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pbstrColor );
    _bstr_t GetforegroundColor ( );
    void PutforegroundColor (
        _bstr_t pbstrColor );
    _bstr_t GetdisabledItemColor ( );
    void PutdisabledItemColor (
        _bstr_t pbstrColor );
    _bstr_t GetitemPlayingColor ( );
    void PutitemPlayingColor (
        _bstr_t pbstrColor );
    _bstr_t GetitemPlayingBackgroundColor ( );
    void PutitemPlayingBackgroundColor (
        _bstr_t pbstrBackgroundColor );
    _bstr_t GetbackgroundImage ( );
    void PutbackgroundImage (
        _bstr_t pbstrImage );
    VARIANT_BOOL GetallowItemEditing ( );
    void PutallowItemEditing (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetallowColumnSorting ( );
    void PutallowColumnSorting (
        VARIANT_BOOL pVal );
    _bstr_t GetdropDownList ( );
    void PutdropDownList (
        _bstr_t pbstrList );
    _bstr_t GetdropDownToolTip ( );
    void PutdropDownToolTip (
        _bstr_t pbstrToolTip );
    VARIANT_BOOL Getcopying ( );
    void Putcopying (
        VARIANT_BOOL pVal );
    HRESULT copy ( );
    HRESULT abortCopy ( );
    HRESULT deleteSelected ( );
    HRESULT deleteSelectedFromLibrary ( );
    HRESULT moveSelectedUp ( );
    HRESULT moveSelectedDown ( );
    HRESULT addSelectedToPlaylist (
        struct IWMPPlaylist * pdispPlaylist );
    long getNextSelectedItem (
        long nStartIndex );
    long getNextCheckedItem (
        long nStartIndex );
    HRESULT setSelectedState (
        long nIndex,
        VARIANT_BOOL vbSelected );
    HRESULT setCheckedState (
        long nIndex,
        VARIANT_BOOL vbChecked );
    HRESULT sortColumn (
        long nIndex );
    HRESULT setColumnResizeMode (
        long nIndex,
        _bstr_t newMode );
    HRESULT setColumnWidth (
        long nIndex,
        long nWidth );
    _bstr_t GetitemErrorColor ( );
    void PutitemErrorColor (
        _bstr_t pbstrColor );
    long GetitemCount ( );
    IWMPMediaPtr GetitemMedia (
        long nIndex );
    IWMPPlaylistPtr GetitemPlaylist (
        long nIndex );
    long getNextSelectedItem2 (
        long nStartIndex );
    long getNextCheckedItem2 (
        long nStartIndex );
    HRESULT setSelectedState2 (
        long nIndex,
        VARIANT_BOOL vbSelected );
    HRESULT setCheckedState2 (
        long nIndex,
        VARIANT_BOOL vbChecked );
    _bstr_t GetleftStatus ( );
    void PutleftStatus (
        _bstr_t pbstrStatus );
    _bstr_t GetrightStatus ( );
    void PutrightStatus (
        _bstr_t pbstrStatus );
    VARIANT_BOOL GeteditButtonVisible ( );
    void PuteditButtonVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetdropDownImage ( );
    void PutdropDownImage (
        _bstr_t pbstrImage );
    _bstr_t GetdropDownBackgroundImage ( );
    void PutdropDownBackgroundImage (
        _bstr_t pbstrImage );
    float GethueShift ( );
    void PuthueShift (
        float pVal );
    float Getsaturation ( );
    void Putsaturation (
        float pVal );
    _bstr_t GetstatusColor ( );
    void PutstatusColor (
        _bstr_t pbstrColor );
    VARIANT_BOOL GettoolbarVisible ( );
    void PuttoolbarVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetitemSelectedColor ( );
    void PutitemSelectedColor (
        _bstr_t pbstrColor );
    _bstr_t GetitemSelectedFocusLostColor ( );
    void PutitemSelectedFocusLostColor (
        _bstr_t pbstrFocusLostColor );
    _bstr_t GetitemSelectedBackgroundColor ( );
    void PutitemSelectedBackgroundColor (
        _bstr_t pbstrColor );
    _bstr_t GetitemSelectedBackgroundFocusLostColor ( );
    void PutitemSelectedBackgroundFocusLostColor (
        _bstr_t pbstrFocusLostColor );
    _bstr_t GetbackgroundSplitColor ( );
    void PutbackgroundSplitColor (
        _bstr_t pbstrColor );
    _bstr_t GetstatusTextColor ( );
    void PutstatusTextColor (
        _bstr_t pbstrColor );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Playlist (
        /*[out,retval]*/ struct IWMPPlaylist * * ppdispPlaylist ) = 0;
      virtual HRESULT __stdcall put_Playlist (
        /*[in]*/ struct IWMPPlaylist * ppdispPlaylist ) = 0;
      virtual HRESULT __stdcall get_columns (
        /*[out,retval]*/ BSTR * pbstrColumns ) = 0;
      virtual HRESULT __stdcall put_columns (
        /*[in]*/ BSTR pbstrColumns ) = 0;
      virtual HRESULT __stdcall get_columnCount (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall get_columnOrder (
        /*[out,retval]*/ BSTR * pbstrColumnOrder ) = 0;
      virtual HRESULT __stdcall put_columnOrder (
        /*[in]*/ BSTR pbstrColumnOrder ) = 0;
      virtual HRESULT __stdcall get_columnsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_columnsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_dropDownVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_dropDownVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_playlistItemsVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_playlistItemsVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_checkboxesVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_checkboxesVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundColor (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall put_backgroundColor (
        /*[in]*/ BSTR pbstrColor ) = 0;
      virtual HRESULT __stdcall get_foregroundColor (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall put_foregroundColor (
        /*[in]*/ BSTR pbstrColor ) = 0;
      virtual HRESULT __stdcall get_disabledItemColor (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall put_disabledItemColor (
        /*[in]*/ BSTR pbstrColor ) = 0;
      virtual HRESULT __stdcall get_itemPlayingColor (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall put_itemPlayingColor (
        /*[in]*/ BSTR pbstrColor ) = 0;
      virtual HRESULT __stdcall get_itemPlayingBackgroundColor (
        /*[out,retval]*/ BSTR * pbstrBackgroundColor ) = 0;
      virtual HRESULT __stdcall put_itemPlayingBackgroundColor (
        /*[in]*/ BSTR pbstrBackgroundColor ) = 0;
      virtual HRESULT __stdcall get_backgroundImage (
        /*[out,retval]*/ BSTR * pbstrImage ) = 0;
      virtual HRESULT __stdcall put_backgroundImage (
        /*[in]*/ BSTR pbstrImage ) = 0;
      virtual HRESULT __stdcall get_allowItemEditing (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_allowItemEditing (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_allowColumnSorting (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_allowColumnSorting (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_dropDownList (
        /*[out,retval]*/ BSTR * pbstrList ) = 0;
      virtual HRESULT __stdcall put_dropDownList (
        /*[in]*/ BSTR pbstrList ) = 0;
      virtual HRESULT __stdcall get_dropDownToolTip (
        /*[out,retval]*/ BSTR * pbstrToolTip ) = 0;
      virtual HRESULT __stdcall put_dropDownToolTip (
        /*[in]*/ BSTR pbstrToolTip ) = 0;
      virtual HRESULT __stdcall get_copying (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_copying (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall raw_copy ( ) = 0;
      virtual HRESULT __stdcall raw_abortCopy ( ) = 0;
      virtual HRESULT __stdcall raw_deleteSelected ( ) = 0;
      virtual HRESULT __stdcall raw_deleteSelectedFromLibrary ( ) = 0;
      virtual HRESULT __stdcall raw_moveSelectedUp ( ) = 0;
      virtual HRESULT __stdcall raw_moveSelectedDown ( ) = 0;
      virtual HRESULT __stdcall raw_addSelectedToPlaylist (
        /*[in]*/ struct IWMPPlaylist * pdispPlaylist ) = 0;
      virtual HRESULT __stdcall raw_getNextSelectedItem (
        /*[in]*/ long nStartIndex,
        /*[out,retval]*/ long * pnSelected ) = 0;
      virtual HRESULT __stdcall raw_getNextCheckedItem (
        /*[in]*/ long nStartIndex,
        /*[out,retval]*/ long * pnChecked ) = 0;
      virtual HRESULT __stdcall raw_setSelectedState (
        /*[in]*/ long nIndex,
        /*[in]*/ VARIANT_BOOL vbSelected ) = 0;
      virtual HRESULT __stdcall raw_setCheckedState (
        /*[in]*/ long nIndex,
        /*[in]*/ VARIANT_BOOL vbChecked ) = 0;
      virtual HRESULT __stdcall raw_sortColumn (
        /*[in]*/ long nIndex ) = 0;
      virtual HRESULT __stdcall raw_setColumnResizeMode (
        /*[in]*/ long nIndex,
        /*[in]*/ BSTR newMode ) = 0;
      virtual HRESULT __stdcall raw_setColumnWidth (
        /*[in]*/ long nIndex,
        /*[in]*/ long nWidth ) = 0;
      virtual HRESULT __stdcall get_itemErrorColor (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall put_itemErrorColor (
        /*[in]*/ BSTR pbstrColor ) = 0;
      virtual HRESULT __stdcall get_itemCount (
        /*[out,retval]*/ long * pnItemCount ) = 0;
      virtual HRESULT __stdcall get_itemMedia (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ struct IWMPMedia * * ppMedia ) = 0;
      virtual HRESULT __stdcall get_itemPlaylist (
        /*[in]*/ long nIndex,
        /*[out,retval]*/ struct IWMPPlaylist * * ppPlaylist ) = 0;
      virtual HRESULT __stdcall raw_getNextSelectedItem2 (
        /*[in]*/ long nStartIndex,
        /*[out,retval]*/ long * pnSelected ) = 0;
      virtual HRESULT __stdcall raw_getNextCheckedItem2 (
        /*[in]*/ long nStartIndex,
        /*[out,retval]*/ long * pnChecked ) = 0;
      virtual HRESULT __stdcall raw_setSelectedState2 (
        /*[in]*/ long nIndex,
        /*[in]*/ VARIANT_BOOL vbSelected ) = 0;
      virtual HRESULT __stdcall raw_setCheckedState2 (
        /*[in]*/ long nIndex,
        /*[in]*/ VARIANT_BOOL vbChecked ) = 0;
      virtual HRESULT __stdcall get_leftStatus (
        /*[out,retval]*/ BSTR * pbstrStatus ) = 0;
      virtual HRESULT __stdcall put_leftStatus (
        /*[in]*/ BSTR pbstrStatus ) = 0;
      virtual HRESULT __stdcall get_rightStatus (
        /*[out,retval]*/ BSTR * pbstrStatus ) = 0;
      virtual HRESULT __stdcall put_rightStatus (
        /*[in]*/ BSTR pbstrStatus ) = 0;
      virtual HRESULT __stdcall get_editButtonVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_editButtonVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_dropDownImage (
        /*[out,retval]*/ BSTR * pbstrImage ) = 0;
      virtual HRESULT __stdcall put_dropDownImage (
        /*[in]*/ BSTR pbstrImage ) = 0;
      virtual HRESULT __stdcall get_dropDownBackgroundImage (
        /*[out,retval]*/ BSTR * pbstrImage ) = 0;
      virtual HRESULT __stdcall put_dropDownBackgroundImage (
        /*[in]*/ BSTR pbstrImage ) = 0;
      virtual HRESULT __stdcall get_hueShift (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_hueShift (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_saturation (
        /*[out,retval]*/ float * pVal ) = 0;
      virtual HRESULT __stdcall put_saturation (
        /*[in]*/ float pVal ) = 0;
      virtual HRESULT __stdcall get_statusColor (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall put_statusColor (
        /*[in]*/ BSTR pbstrColor ) = 0;
      virtual HRESULT __stdcall get_toolbarVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_toolbarVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_itemSelectedColor (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall put_itemSelectedColor (
        /*[in]*/ BSTR pbstrColor ) = 0;
      virtual HRESULT __stdcall get_itemSelectedFocusLostColor (
        /*[out,retval]*/ BSTR * pbstrFocusLostColor ) = 0;
      virtual HRESULT __stdcall put_itemSelectedFocusLostColor (
        /*[in]*/ BSTR pbstrFocusLostColor ) = 0;
      virtual HRESULT __stdcall get_itemSelectedBackgroundColor (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall put_itemSelectedBackgroundColor (
        /*[in]*/ BSTR pbstrColor ) = 0;
      virtual HRESULT __stdcall get_itemSelectedBackgroundFocusLostColor (
        /*[out,retval]*/ BSTR * pbstrFocusLostColor ) = 0;
      virtual HRESULT __stdcall put_itemSelectedBackgroundFocusLostColor (
        /*[in]*/ BSTR pbstrFocusLostColor ) = 0;
      virtual HRESULT __stdcall get_backgroundSplitColor (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall put_backgroundSplitColor (
        /*[in]*/ BSTR pbstrColor ) = 0;
      virtual HRESULT __stdcall get_statusTextColor (
        /*[out,retval]*/ BSTR * pbstrColor ) = 0;
      virtual HRESULT __stdcall put_statusTextColor (
        /*[in]*/ BSTR pbstrColor ) = 0;
};

struct __declspec(uuid("b738fcae-f089-45df-aed6-034b9e7db632"))
IWMPLibraryTreeCtrl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetdropDownVisible,put=PutdropDownVisible))
    VARIANT_BOOL dropDownVisible;
    __declspec(property(get=GetforegroundColor,put=PutforegroundColor))
    _bstr_t foregroundColor;
    __declspec(property(get=GetbackgroundColor,put=PutbackgroundColor))
    _bstr_t backgroundColor;
    __declspec(property(get=GetfontSize,put=PutfontSize))
    long fontSize;
    __declspec(property(get=GetfontStyle,put=PutfontStyle))
    _bstr_t fontStyle;
    __declspec(property(get=GetfontFace,put=PutfontFace))
    _bstr_t fontFace;
    __declspec(property(get=Getfilter,put=Putfilter))
    _bstr_t filter;
    __declspec(property(get=GetexpandState,put=PutexpandState))
    _bstr_t expandState;
    __declspec(property(get=GetPlaylist,put=PutPlaylist))
    IWMPPlaylistPtr Playlist;
    __declspec(property(get=GetselectedPlaylist))
    IWMPPlaylistPtr selectedPlaylist;
    __declspec(property(get=GetselectedMedia))
    IWMPMediaPtr selectedMedia;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetdropDownVisible ( );
    void PutdropDownVisible (
        VARIANT_BOOL pVal );
    _bstr_t GetforegroundColor ( );
    void PutforegroundColor (
        _bstr_t pVal );
    _bstr_t GetbackgroundColor ( );
    void PutbackgroundColor (
        _bstr_t pVal );
    long GetfontSize ( );
    void PutfontSize (
        long pVal );
    _bstr_t GetfontStyle ( );
    void PutfontStyle (
        _bstr_t pVal );
    _bstr_t GetfontFace ( );
    void PutfontFace (
        _bstr_t pVal );
    _bstr_t Getfilter ( );
    void Putfilter (
        _bstr_t pVal );
    _bstr_t GetexpandState ( );
    void PutexpandState (
        _bstr_t pVal );
    IWMPPlaylistPtr GetPlaylist ( );
    void PutPlaylist (
        struct IWMPPlaylist * ppPlaylist );
    IWMPPlaylistPtr GetselectedPlaylist ( );
    IWMPMediaPtr GetselectedMedia ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_dropDownVisible (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_dropDownVisible (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_foregroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_foregroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_backgroundColor (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_backgroundColor (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_fontSize (
        /*[out,retval]*/ long * pVal ) = 0;
      virtual HRESULT __stdcall put_fontSize (
        /*[in]*/ long pVal ) = 0;
      virtual HRESULT __stdcall get_fontStyle (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_fontStyle (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_fontFace (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_fontFace (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_filter (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_filter (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_expandState (
        /*[out,retval]*/ BSTR * pVal ) = 0;
      virtual HRESULT __stdcall put_expandState (
        /*[in]*/ BSTR pVal ) = 0;
      virtual HRESULT __stdcall get_Playlist (
        /*[out,retval]*/ struct IWMPPlaylist * * ppPlaylist ) = 0;
      virtual HRESULT __stdcall put_Playlist (
        /*[in]*/ struct IWMPPlaylist * ppPlaylist ) = 0;
      virtual HRESULT __stdcall get_selectedPlaylist (
        /*[out,retval]*/ struct IWMPPlaylist * * ppPlaylist ) = 0;
      virtual HRESULT __stdcall get_selectedMedia (
        /*[out,retval]*/ struct IWMPMedia * * ppMedia ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region("Utils\wmp.tli")
__declspec(implementation_key(1)) _bstr_t IWMPSyncDevice::GetfriendlyName ( );
__declspec(implementation_key(2)) void IWMPSyncDevice::PutfriendlyName ( _bstr_t pbstrName );
__declspec(implementation_key(3)) _bstr_t IWMPSyncDevice::GetdeviceName ( );
__declspec(implementation_key(4)) _bstr_t IWMPSyncDevice::GetdeviceId ( );
__declspec(implementation_key(5)) long IWMPSyncDevice::GetpartnershipIndex ( );
__declspec(implementation_key(6)) VARIANT_BOOL IWMPSyncDevice::Getconnected ( );
__declspec(implementation_key(7)) enum WMPDeviceStatus IWMPSyncDevice::Getstatus ( );
__declspec(implementation_key(8)) enum WMPSyncState IWMPSyncDevice::GetsyncState ( );
__declspec(implementation_key(9)) long IWMPSyncDevice::Getprogress ( );
__declspec(implementation_key(10)) _bstr_t IWMPSyncDevice::getItemInfo ( _bstr_t bstrItemName );
__declspec(implementation_key(11)) HRESULT IWMPSyncDevice::createPartnership ( VARIANT_BOOL vbShowUI );
__declspec(implementation_key(12)) HRESULT IWMPSyncDevice::deletePartnership ( );
__declspec(implementation_key(13)) HRESULT IWMPSyncDevice::Start ( );
__declspec(implementation_key(14)) HRESULT IWMPSyncDevice::stop ( );
__declspec(implementation_key(15)) HRESULT IWMPSyncDevice::showSettings ( );
__declspec(implementation_key(16)) VARIANT_BOOL IWMPSyncDevice::isIdentical ( struct IWMPSyncDevice * pDevice );
__declspec(implementation_key(17)) enum WMPRipState IWMPCdromRip::GetripState ( );
__declspec(implementation_key(18)) long IWMPCdromRip::GetripProgress ( );
__declspec(implementation_key(19)) HRESULT IWMPCdromRip::startRip ( );
__declspec(implementation_key(20)) HRESULT IWMPCdromRip::stopRip ( );
__declspec(implementation_key(21)) long IWMPStringCollection::Getcount ( );
__declspec(implementation_key(22)) _bstr_t IWMPStringCollection::Item ( long lIndex );
__declspec(implementation_key(23)) HRESULT _WMPOCXEvents::OpenStateChange ( long NewState );
__declspec(implementation_key(24)) HRESULT _WMPOCXEvents::PlayStateChange ( long NewState );
__declspec(implementation_key(25)) HRESULT _WMPOCXEvents::AudioLanguageChange ( long LangID );
__declspec(implementation_key(26)) HRESULT _WMPOCXEvents::StatusChange ( );
__declspec(implementation_key(27)) HRESULT _WMPOCXEvents::ScriptCommand ( _bstr_t scType, _bstr_t Param );
__declspec(implementation_key(28)) HRESULT _WMPOCXEvents::NewStream ( );
__declspec(implementation_key(29)) HRESULT _WMPOCXEvents::Disconnect ( long Result );
__declspec(implementation_key(30)) HRESULT _WMPOCXEvents::Buffering ( VARIANT_BOOL Start );
__declspec(implementation_key(31)) HRESULT _WMPOCXEvents::Error ( );
__declspec(implementation_key(32)) HRESULT _WMPOCXEvents::Warning ( long WarningType, long Param, _bstr_t Description );
__declspec(implementation_key(33)) HRESULT _WMPOCXEvents::EndOfStream ( long Result );
__declspec(implementation_key(34)) HRESULT _WMPOCXEvents::PositionChange ( double oldPosition, double newPosition );
__declspec(implementation_key(35)) HRESULT _WMPOCXEvents::MarkerHit ( long MarkerNum );
__declspec(implementation_key(36)) HRESULT _WMPOCXEvents::DurationUnitChange ( long NewDurationUnit );
__declspec(implementation_key(37)) HRESULT _WMPOCXEvents::CdromMediaChange ( long CdromNum );
__declspec(implementation_key(38)) HRESULT _WMPOCXEvents::PlaylistChange ( IDispatch * Playlist, enum WMPPlaylistChangeEventType change );
__declspec(implementation_key(39)) HRESULT _WMPOCXEvents::CurrentPlaylistChange ( enum WMPPlaylistChangeEventType change );
__declspec(implementation_key(40)) HRESULT _WMPOCXEvents::CurrentPlaylistItemAvailable ( _bstr_t bstrItemName );
__declspec(implementation_key(41)) HRESULT _WMPOCXEvents::MediaChange ( IDispatch * Item );
__declspec(implementation_key(42)) HRESULT _WMPOCXEvents::CurrentMediaItemAvailable ( _bstr_t bstrItemName );
__declspec(implementation_key(43)) HRESULT _WMPOCXEvents::CurrentItemChange ( IDispatch * pdispMedia );
__declspec(implementation_key(44)) HRESULT _WMPOCXEvents::MediaCollectionChange ( );
__declspec(implementation_key(45)) HRESULT _WMPOCXEvents::MediaCollectionAttributeStringAdded ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal );
__declspec(implementation_key(46)) HRESULT _WMPOCXEvents::MediaCollectionAttributeStringRemoved ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal );
__declspec(implementation_key(47)) HRESULT _WMPOCXEvents::MediaCollectionAttributeStringChanged ( _bstr_t bstrAttribName, _bstr_t bstrOldAttribVal, _bstr_t bstrNewAttribVal );
__declspec(implementation_key(48)) HRESULT _WMPOCXEvents::PlaylistCollectionChange ( );
__declspec(implementation_key(49)) HRESULT _WMPOCXEvents::PlaylistCollectionPlaylistAdded ( _bstr_t bstrPlaylistName );
__declspec(implementation_key(50)) HRESULT _WMPOCXEvents::PlaylistCollectionPlaylistRemoved ( _bstr_t bstrPlaylistName );
__declspec(implementation_key(51)) HRESULT _WMPOCXEvents::PlaylistCollectionPlaylistSetAsDeleted ( _bstr_t bstrPlaylistName, VARIANT_BOOL varfIsDeleted );
__declspec(implementation_key(52)) HRESULT _WMPOCXEvents::ModeChange ( _bstr_t ModeName, VARIANT_BOOL NewValue );
__declspec(implementation_key(53)) HRESULT _WMPOCXEvents::MediaError ( IDispatch * pMediaObject );
__declspec(implementation_key(54)) HRESULT _WMPOCXEvents::OpenPlaylistSwitch ( IDispatch * pItem );
__declspec(implementation_key(55)) HRESULT _WMPOCXEvents::DomainChange ( _bstr_t strDomain );
__declspec(implementation_key(56)) HRESULT _WMPOCXEvents::SwitchedToPlayerApplication ( );
__declspec(implementation_key(57)) HRESULT _WMPOCXEvents::SwitchedToControl ( );
__declspec(implementation_key(58)) HRESULT _WMPOCXEvents::PlayerDockedStateChange ( );
__declspec(implementation_key(59)) HRESULT _WMPOCXEvents::PlayerReconnect ( );
__declspec(implementation_key(60)) HRESULT _WMPOCXEvents::Click ( short nButton, short nShiftState, long fX, long fY );
__declspec(implementation_key(61)) HRESULT _WMPOCXEvents::DoubleClick ( short nButton, short nShiftState, long fX, long fY );
__declspec(implementation_key(62)) HRESULT _WMPOCXEvents::KeyDown ( short nKeyCode, short nShiftState );
__declspec(implementation_key(63)) HRESULT _WMPOCXEvents::KeyPress ( short nKeyAscii );
__declspec(implementation_key(64)) HRESULT _WMPOCXEvents::KeyUp ( short nKeyCode, short nShiftState );
__declspec(implementation_key(65)) HRESULT _WMPOCXEvents::MouseDown ( short nButton, short nShiftState, long fX, long fY );
__declspec(implementation_key(66)) HRESULT _WMPOCXEvents::MouseMove ( short nButton, short nShiftState, long fX, long fY );
__declspec(implementation_key(67)) HRESULT _WMPOCXEvents::MouseUp ( short nButton, short nShiftState, long fX, long fY );
__declspec(implementation_key(68)) HRESULT _WMPOCXEvents::DeviceConnect ( struct IWMPSyncDevice * pDevice );
__declspec(implementation_key(69)) HRESULT _WMPOCXEvents::DeviceDisconnect ( struct IWMPSyncDevice * pDevice );
__declspec(implementation_key(70)) HRESULT _WMPOCXEvents::DeviceStatusChange ( struct IWMPSyncDevice * pDevice, enum WMPDeviceStatus NewStatus );
__declspec(implementation_key(71)) HRESULT _WMPOCXEvents::DeviceSyncStateChange ( struct IWMPSyncDevice * pDevice, enum WMPSyncState NewState );
__declspec(implementation_key(72)) HRESULT _WMPOCXEvents::DeviceSyncError ( struct IWMPSyncDevice * pDevice, IDispatch * pMedia );
__declspec(implementation_key(73)) HRESULT _WMPOCXEvents::CreatePartnershipComplete ( struct IWMPSyncDevice * pDevice, HRESULT hrResult );
__declspec(implementation_key(74)) HRESULT _WMPOCXEvents::DeviceEstimation ( struct IWMPSyncDevice * pDevice, HRESULT hrResult, __int64 qwEstimatedUsedSpace, __int64 qwEstimatedSpace );
__declspec(implementation_key(75)) HRESULT _WMPOCXEvents::CdromRipStateChange ( struct IWMPCdromRip * pCdromRip, enum WMPRipState wmprs );
__declspec(implementation_key(76)) HRESULT _WMPOCXEvents::CdromRipMediaError ( struct IWMPCdromRip * pCdromRip, IDispatch * pMedia );
__declspec(implementation_key(77)) HRESULT _WMPOCXEvents::CdromBurnStateChange ( struct IWMPCdromBurn * pCdromBurn, enum WMPBurnState wmpbs );
__declspec(implementation_key(78)) HRESULT _WMPOCXEvents::CdromBurnMediaError ( struct IWMPCdromBurn * pCdromBurn, IDispatch * pMedia );
__declspec(implementation_key(79)) HRESULT _WMPOCXEvents::CdromBurnError ( struct IWMPCdromBurn * pCdromBurn, HRESULT hrError );
__declspec(implementation_key(80)) HRESULT _WMPOCXEvents::LibraryConnect ( struct IWMPLibrary * pLibrary );
__declspec(implementation_key(81)) HRESULT _WMPOCXEvents::LibraryDisconnect ( struct IWMPLibrary * pLibrary );
__declspec(implementation_key(82)) HRESULT _WMPOCXEvents::FolderScanStateChange ( enum WMPFolderScanState wmpfss );
__declspec(implementation_key(83)) HRESULT _WMPOCXEvents::StringCollectionChange ( IDispatch * pdispStringCollection, enum WMPStringCollectionChangeEventType change, long lCollectionIndex );
__declspec(implementation_key(84)) HRESULT _WMPOCXEvents::MediaCollectionMediaAdded ( IDispatch * pdispMedia );
__declspec(implementation_key(85)) HRESULT _WMPOCXEvents::MediaCollectionMediaRemoved ( IDispatch * pdispMedia );
__declspec(implementation_key(86)) VARIANT_BOOL IWMPSettings::GetisAvailable ( _bstr_t bstrItem );
__declspec(implementation_key(87)) VARIANT_BOOL IWMPSettings::GetautoStart ( );
__declspec(implementation_key(88)) void IWMPSettings::PutautoStart ( VARIANT_BOOL pfAutoStart );
__declspec(implementation_key(89)) _bstr_t IWMPSettings::GetbaseURL ( );
__declspec(implementation_key(90)) void IWMPSettings::PutbaseURL ( _bstr_t pbstrBaseURL );
__declspec(implementation_key(91)) _bstr_t IWMPSettings::GetdefaultFrame ( );
__declspec(implementation_key(92)) void IWMPSettings::PutdefaultFrame ( _bstr_t pbstrDefaultFrame );
__declspec(implementation_key(93)) VARIANT_BOOL IWMPSettings::GetinvokeURLs ( );
__declspec(implementation_key(94)) void IWMPSettings::PutinvokeURLs ( VARIANT_BOOL pfInvokeURLs );
__declspec(implementation_key(95)) VARIANT_BOOL IWMPSettings::Getmute ( );
__declspec(implementation_key(96)) void IWMPSettings::Putmute ( VARIANT_BOOL pfMute );
__declspec(implementation_key(97)) long IWMPSettings::GetplayCount ( );
__declspec(implementation_key(98)) void IWMPSettings::PutplayCount ( long plCount );
__declspec(implementation_key(99)) double IWMPSettings::Getrate ( );
__declspec(implementation_key(100)) void IWMPSettings::Putrate ( double pdRate );
__declspec(implementation_key(101)) long IWMPSettings::Getbalance ( );
__declspec(implementation_key(102)) void IWMPSettings::Putbalance ( long plBalance );
__declspec(implementation_key(103)) long IWMPSettings::Getvolume ( );
__declspec(implementation_key(104)) void IWMPSettings::Putvolume ( long plVolume );
__declspec(implementation_key(105)) VARIANT_BOOL IWMPSettings::getMode ( _bstr_t bstrMode );
__declspec(implementation_key(106)) HRESULT IWMPSettings::setMode ( _bstr_t bstrMode, VARIANT_BOOL varfMode );
__declspec(implementation_key(107)) VARIANT_BOOL IWMPSettings::GetenableErrorDialogs ( );
__declspec(implementation_key(108)) void IWMPSettings::PutenableErrorDialogs ( VARIANT_BOOL pfEnableErrorDialogs );
__declspec(implementation_key(109)) long IWMPNetwork::GetbandWidth ( );
__declspec(implementation_key(110)) long IWMPNetwork::GetrecoveredPackets ( );
__declspec(implementation_key(111)) _bstr_t IWMPNetwork::GetsourceProtocol ( );
__declspec(implementation_key(112)) long IWMPNetwork::GetreceivedPackets ( );
__declspec(implementation_key(113)) long IWMPNetwork::GetlostPackets ( );
__declspec(implementation_key(114)) long IWMPNetwork::GetreceptionQuality ( );
__declspec(implementation_key(115)) long IWMPNetwork::GetbufferingCount ( );
__declspec(implementation_key(116)) long IWMPNetwork::GetbufferingProgress ( );
__declspec(implementation_key(117)) long IWMPNetwork::GetbufferingTime ( );
__declspec(implementation_key(118)) void IWMPNetwork::PutbufferingTime ( long plBufferingTime );
__declspec(implementation_key(119)) long IWMPNetwork::GetframeRate ( );
__declspec(implementation_key(120)) long IWMPNetwork::GetmaxBitRate ( );
__declspec(implementation_key(121)) long IWMPNetwork::GetbitRate ( );
__declspec(implementation_key(122)) long IWMPNetwork::getProxySettings ( _bstr_t bstrProtocol );
__declspec(implementation_key(123)) HRESULT IWMPNetwork::setProxySettings ( _bstr_t bstrProtocol, long lProxySetting );
__declspec(implementation_key(124)) _bstr_t IWMPNetwork::getProxyName ( _bstr_t bstrProtocol );
__declspec(implementation_key(125)) HRESULT IWMPNetwork::setProxyName ( _bstr_t bstrProtocol, _bstr_t bstrProxyName );
__declspec(implementation_key(126)) long IWMPNetwork::getProxyPort ( _bstr_t bstrProtocol );
__declspec(implementation_key(127)) HRESULT IWMPNetwork::setProxyPort ( _bstr_t bstrProtocol, long lProxyPort );
__declspec(implementation_key(128)) _bstr_t IWMPNetwork::getProxyExceptionList ( _bstr_t bstrProtocol );
__declspec(implementation_key(129)) HRESULT IWMPNetwork::setProxyExceptionList ( _bstr_t bstrProtocol, _bstr_t pbstrExceptionList );
__declspec(implementation_key(130)) VARIANT_BOOL IWMPNetwork::getProxyBypassForLocal ( _bstr_t bstrProtocol );
__declspec(implementation_key(131)) HRESULT IWMPNetwork::setProxyBypassForLocal ( _bstr_t bstrProtocol, VARIANT_BOOL fBypassForLocal );
__declspec(implementation_key(132)) long IWMPNetwork::GetmaxBandwidth ( );
__declspec(implementation_key(133)) void IWMPNetwork::PutmaxBandwidth ( long lMaxBandwidth );
__declspec(implementation_key(134)) long IWMPNetwork::GetdownloadProgress ( );
__declspec(implementation_key(135)) long IWMPNetwork::GetencodedFrameRate ( );
__declspec(implementation_key(136)) long IWMPNetwork::GetframesSkipped ( );
__declspec(implementation_key(137)) _bstr_t IWMPClosedCaption::GetSAMIStyle ( );
__declspec(implementation_key(138)) void IWMPClosedCaption::PutSAMIStyle ( _bstr_t pbstrSAMIStyle );
__declspec(implementation_key(139)) _bstr_t IWMPClosedCaption::GetSAMILang ( );
__declspec(implementation_key(140)) void IWMPClosedCaption::PutSAMILang ( _bstr_t pbstrSAMILang );
__declspec(implementation_key(141)) _bstr_t IWMPClosedCaption::GetSAMIFileName ( );
__declspec(implementation_key(142)) void IWMPClosedCaption::PutSAMIFileName ( _bstr_t pbstrSAMIFileName );
__declspec(implementation_key(143)) _bstr_t IWMPClosedCaption::GetcaptioningId ( );
__declspec(implementation_key(144)) void IWMPClosedCaption::PutcaptioningId ( _bstr_t pbstrCaptioningID );
__declspec(implementation_key(145)) long IWMPErrorItem::GeterrorCode ( );
__declspec(implementation_key(146)) _bstr_t IWMPErrorItem::GeterrorDescription ( );
__declspec(implementation_key(147)) _variant_t IWMPErrorItem::GeterrorContext ( );
__declspec(implementation_key(148)) long IWMPErrorItem::Getremedy ( );
__declspec(implementation_key(149)) _bstr_t IWMPErrorItem::GetcustomUrl ( );
__declspec(implementation_key(150)) HRESULT IWMPError::clearErrorQueue ( );
__declspec(implementation_key(151)) long IWMPError::GeterrorCount ( );
__declspec(implementation_key(152)) IWMPErrorItemPtr IWMPError::GetItem ( long dwIndex );
__declspec(implementation_key(153)) HRESULT IWMPError::webHelp ( );
__declspec(implementation_key(154)) VARIANT_BOOL IWMPDVD::GetisAvailable ( _bstr_t bstrItem );
__declspec(implementation_key(155)) _bstr_t IWMPDVD::Getdomain ( );
__declspec(implementation_key(156)) HRESULT IWMPDVD::topMenu ( );
__declspec(implementation_key(157)) HRESULT IWMPDVD::titleMenu ( );
__declspec(implementation_key(158)) HRESULT IWMPDVD::back ( );
__declspec(implementation_key(159)) HRESULT IWMPDVD::resume ( );
__declspec(implementation_key(160)) HRESULT IWMPPlayerApplication::switchToPlayerApplication ( );
__declspec(implementation_key(161)) HRESULT IWMPPlayerApplication::switchToControl ( );
__declspec(implementation_key(162)) VARIANT_BOOL IWMPPlayerApplication::GetplayerDocked ( );
__declspec(implementation_key(163)) VARIANT_BOOL IWMPPlayerApplication::GethasDisplay ( );
__declspec(implementation_key(164)) long IWMPErrorItem2::Getcondition ( );
__declspec(implementation_key(165)) _bstr_t IWMPMetadataPicture::GetmimeType ( );
__declspec(implementation_key(166)) _bstr_t IWMPMetadataPicture::GetpictureType ( );
__declspec(implementation_key(167)) _bstr_t IWMPMetadataPicture::GetDescription ( );
__declspec(implementation_key(168)) _bstr_t IWMPMetadataPicture::GetURL ( );
__declspec(implementation_key(169)) _bstr_t IWMPMetadataText::GetDescription ( );
__declspec(implementation_key(170)) _bstr_t IWMPMetadataText::Gettext ( );
__declspec(implementation_key(171)) long IWMPSettings2::GetdefaultAudioLanguage ( );
__declspec(implementation_key(172)) _bstr_t IWMPSettings2::GetmediaAccessRights ( );
__declspec(implementation_key(173)) VARIANT_BOOL IWMPSettings2::requestMediaAccessRights ( _bstr_t bstrDesiredAccess );
__declspec(implementation_key(174)) long IWMPClosedCaption2::GetSAMILangCount ( );
__declspec(implementation_key(175)) _bstr_t IWMPClosedCaption2::getSAMILangName ( long nIndex );
__declspec(implementation_key(176)) long IWMPClosedCaption2::getSAMILangID ( long nIndex );
__declspec(implementation_key(177)) long IWMPClosedCaption2::GetSAMIStyleCount ( );
__declspec(implementation_key(178)) _bstr_t IWMPClosedCaption2::getSAMIStyleName ( long nIndex );
__declspec(implementation_key(179)) HRESULT IWMPQuery::addCondition ( _bstr_t bstrAttribute, _bstr_t bstrOperator, _bstr_t bstrValue );
__declspec(implementation_key(180)) HRESULT IWMPQuery::beginNextGroup ( );
__declspec(implementation_key(181)) VARIANT_BOOL IWMPStringCollection2::isIdentical ( struct IWMPStringCollection2 * pIWMPStringCollection2 );
__declspec(implementation_key(182)) _bstr_t IWMPStringCollection2::getItemInfo ( long lCollectionIndex, _bstr_t bstrItemName );
__declspec(implementation_key(183)) long IWMPStringCollection2::getAttributeCountByType ( long lCollectionIndex, _bstr_t bstrType, _bstr_t bstrLanguage );
__declspec(implementation_key(184)) _variant_t IWMPStringCollection2::getItemInfoByType ( long lCollectionIndex, _bstr_t bstrType, _bstr_t bstrLanguage, long lAttributeIndex );
__declspec(implementation_key(185)) HRESULT IWMPPlayerServices::activateUIPlugin ( _bstr_t bstrPlugin );
__declspec(implementation_key(186)) HRESULT IWMPPlayerServices::setTaskPane ( _bstr_t bstrTaskPane );
__declspec(implementation_key(187)) HRESULT IWMPPlayerServices::setTaskPaneURL ( _bstr_t bstrTaskPane, _bstr_t bstrURL, _bstr_t bstrFriendlyName );
__declspec(implementation_key(188)) HRESULT IWMPPlayerServices2::setBackgroundProcessingPriority ( _bstr_t bstrPriority );
__declspec(implementation_key(189)) HRESULT IWMPRemoteMediaServices::GetServiceType ( BSTR * pbstrType );
__declspec(implementation_key(190)) HRESULT IWMPRemoteMediaServices::GetApplicationName ( BSTR * pbstrName );
__declspec(implementation_key(191)) HRESULT IWMPRemoteMediaServices::GetScriptableObject ( BSTR * pbstrName, IDispatch * * ppDispatch );
__declspec(implementation_key(192)) HRESULT IWMPRemoteMediaServices::GetCustomUIMode ( BSTR * pbstrFile );
__declspec(implementation_key(193)) long IWMPSyncServices::GetdeviceCount ( );
__declspec(implementation_key(194)) IWMPSyncDevicePtr IWMPSyncServices::getDevice ( long lIndex );
__declspec(implementation_key(195)) VARIANT_BOOL IWMPLibrarySharingServices::isLibraryShared ( );
__declspec(implementation_key(196)) VARIANT_BOOL IWMPLibrarySharingServices::isLibrarySharingEnabled ( );
__declspec(implementation_key(197)) HRESULT IWMPLibrarySharingServices::showLibrarySharing ( );
__declspec(implementation_key(198)) long IWMPFolderMonitorServices::Getcount ( );
__declspec(implementation_key(199)) _bstr_t IWMPFolderMonitorServices::Item ( long lIndex );
__declspec(implementation_key(200)) HRESULT IWMPFolderMonitorServices::add ( _bstr_t bstrFolder );
__declspec(implementation_key(201)) HRESULT IWMPFolderMonitorServices::remove ( long lIndex );
__declspec(implementation_key(202)) enum WMPFolderScanState IWMPFolderMonitorServices::GetscanState ( );
__declspec(implementation_key(203)) _bstr_t IWMPFolderMonitorServices::GetcurrentFolder ( );
__declspec(implementation_key(204)) long IWMPFolderMonitorServices::GetscannedFilesCount ( );
__declspec(implementation_key(205)) long IWMPFolderMonitorServices::GetaddedFilesCount ( );
__declspec(implementation_key(206)) long IWMPFolderMonitorServices::GetupdateProgress ( );
__declspec(implementation_key(207)) HRESULT IWMPFolderMonitorServices::startScan ( );
__declspec(implementation_key(208)) HRESULT IWMPFolderMonitorServices::stopScan ( );
__declspec(implementation_key(209)) HRESULT IWMPSyncDevice2::setItemInfo ( _bstr_t bstrItemName, _bstr_t bstrVal );
__declspec(implementation_key(210)) VARIANT_BOOL IAppDispatch::GettitlebarVisible ( );
__declspec(implementation_key(211)) void IAppDispatch::PuttitlebarVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(212)) VARIANT_BOOL IAppDispatch::GettitlebarAutoHide ( );
__declspec(implementation_key(213)) void IAppDispatch::PuttitlebarAutoHide ( VARIANT_BOOL pVal );
__declspec(implementation_key(214)) _bstr_t IAppDispatch::GetcurrentTask ( );
__declspec(implementation_key(215)) void IAppDispatch::PutcurrentTask ( _bstr_t pVal );
__declspec(implementation_key(216)) long IAppDispatch::GetlibraryBasketMode ( );
__declspec(implementation_key(217)) void IAppDispatch::PutlibraryBasketMode ( long pVal );
__declspec(implementation_key(218)) long IAppDispatch::GetlibraryBasketWidth ( );
__declspec(implementation_key(219)) long IAppDispatch::GetbreadcrumbItemCount ( );
__declspec(implementation_key(220)) _bstr_t IAppDispatch::GetbreadcrumbItemName ( long lIndex );
__declspec(implementation_key(221)) VARIANT_BOOL IAppDispatch::GetbreadcrumbItemHasMenu ( long lIndex );
__declspec(implementation_key(222)) HRESULT IAppDispatch::breadcrumbItemClick ( long lIndex );
__declspec(implementation_key(223)) VARIANT_BOOL IAppDispatch::GetsettingsVisible ( );
__declspec(implementation_key(224)) void IAppDispatch::PutsettingsVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(225)) VARIANT_BOOL IAppDispatch::GetplaylistVisible ( );
__declspec(implementation_key(226)) void IAppDispatch::PutplaylistVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(227)) HRESULT IAppDispatch::gotoSkinMode ( );
__declspec(implementation_key(228)) HRESULT IAppDispatch::gotoPlayerMode ( );
__declspec(implementation_key(229)) HRESULT IAppDispatch::gotoLibraryMode ( long lButton );
__declspec(implementation_key(230)) HRESULT IAppDispatch::navigatePrevious ( );
__declspec(implementation_key(231)) HRESULT IAppDispatch::navigateNext ( );
__declspec(implementation_key(232)) HRESULT IAppDispatch::goFullScreen ( );
__declspec(implementation_key(233)) VARIANT_BOOL IAppDispatch::GetfullScreenEnabled ( );
__declspec(implementation_key(234)) VARIANT_BOOL IAppDispatch::GetserviceLoginVisible ( );
__declspec(implementation_key(235)) VARIANT_BOOL IAppDispatch::GetserviceLoginSignedIn ( );
__declspec(implementation_key(236)) HRESULT IAppDispatch::serviceLogin ( );
__declspec(implementation_key(237)) HRESULT IAppDispatch::serviceLogout ( );
__declspec(implementation_key(238)) _variant_t IAppDispatch::GetserviceGetInfo ( _bstr_t bstrItem );
__declspec(implementation_key(239)) VARIANT_BOOL IAppDispatch::GetnavigatePreviousEnabled ( );
__declspec(implementation_key(240)) VARIANT_BOOL IAppDispatch::GetnavigateNextEnabled ( );
__declspec(implementation_key(241)) HRESULT IAppDispatch::navigateToAddress ( _bstr_t address );
__declspec(implementation_key(242)) VARIANT_BOOL IAppDispatch::GetglassEnabled ( );
__declspec(implementation_key(243)) VARIANT_BOOL IAppDispatch::GetinVistaPlus ( );
__declspec(implementation_key(244)) HRESULT IAppDispatch::adjustLeft ( long nDistance );
__declspec(implementation_key(245)) VARIANT_BOOL IAppDispatch::GettaskbarVisible ( );
__declspec(implementation_key(246)) void IAppDispatch::PuttaskbarVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(247)) long IAppDispatch::GetDPI ( );
__declspec(implementation_key(248)) VARIANT_BOOL IAppDispatch::GetpreviousEnabled ( );
__declspec(implementation_key(249)) VARIANT_BOOL IAppDispatch::GetplayLibraryItemEnabled ( );
__declspec(implementation_key(250)) HRESULT IAppDispatch::previous ( );
__declspec(implementation_key(251)) VARIANT_BOOL IAppDispatch::GettitlebarCurrentlyVisible ( );
__declspec(implementation_key(252)) VARIANT_BOOL IAppDispatch::GetmenubarCurrentlyVisible ( );
__declspec(implementation_key(253)) VARIANT_BOOL IAppDispatch::GetbgPluginRunning ( );
__declspec(implementation_key(254)) HRESULT IAppDispatch::configurePlugins ( long nType );
__declspec(implementation_key(255)) _bstr_t IAppDispatch::getTimeString ( double dTime );
__declspec(implementation_key(256)) VARIANT_BOOL IAppDispatch::Getmaximized ( );
__declspec(implementation_key(257)) long IAppDispatch::Gettop ( );
__declspec(implementation_key(258)) void IAppDispatch::Puttop ( long pVal );
__declspec(implementation_key(259)) long IAppDispatch::Getleft ( );
__declspec(implementation_key(260)) void IAppDispatch::Putleft ( long pVal );
__declspec(implementation_key(261)) long IAppDispatch::Getwidth ( );
__declspec(implementation_key(262)) void IAppDispatch::Putwidth ( long pVal );
__declspec(implementation_key(263)) long IAppDispatch::Getheight ( );
__declspec(implementation_key(264)) void IAppDispatch::Putheight ( long pVal );
__declspec(implementation_key(265)) HRESULT IAppDispatch::setWindowPos ( long lTop, long lLeft, long lWidth, long lHeight );
__declspec(implementation_key(266)) HRESULT IAppDispatch::logData ( _bstr_t ID, _bstr_t data );
__declspec(implementation_key(267)) _bstr_t IAppDispatch::GetpowerPersonality ( );
__declspec(implementation_key(268)) HRESULT IAppDispatch::navigateNamespace ( _bstr_t address );
__declspec(implementation_key(269)) _bstr_t IAppDispatch::GetexclusiveService ( );
__declspec(implementation_key(270)) void IAppDispatch::PutwindowText ( _bstr_t _arg1 );
__declspec(implementation_key(271)) _bstr_t IWMPSafeBrowser::GetURL ( );
__declspec(implementation_key(272)) void IWMPSafeBrowser::PutURL ( _bstr_t pVal );
__declspec(implementation_key(273)) long IWMPSafeBrowser::Getstatus ( );
__declspec(implementation_key(274)) long IWMPSafeBrowser::GetpendingDownloads ( );
__declspec(implementation_key(275)) HRESULT IWMPSafeBrowser::showSAMIText ( _bstr_t samiText );
__declspec(implementation_key(276)) HRESULT IWMPSafeBrowser::showLyrics ( _bstr_t lyrics );
__declspec(implementation_key(277)) HRESULT IWMPSafeBrowser::loadSpecialPage ( _bstr_t pageName );
__declspec(implementation_key(278)) HRESULT IWMPSafeBrowser::goBack ( );
__declspec(implementation_key(279)) HRESULT IWMPSafeBrowser::goForward ( );
__declspec(implementation_key(280)) HRESULT IWMPSafeBrowser::stop ( );
__declspec(implementation_key(281)) HRESULT IWMPSafeBrowser::refresh ( );
__declspec(implementation_key(282)) _bstr_t IWMPSafeBrowser::GetbaseURL ( );
__declspec(implementation_key(283)) _bstr_t IWMPSafeBrowser::GetfullURL ( );
__declspec(implementation_key(284)) long IWMPSafeBrowser::GetsecureLock ( );
__declspec(implementation_key(285)) VARIANT_BOOL IWMPSafeBrowser::Getbusy ( );
__declspec(implementation_key(286)) HRESULT IWMPSafeBrowser::showCert ( );
__declspec(implementation_key(287)) _bstr_t IWMPObjectExtendedProps::GetID ( );
__declspec(implementation_key(288)) _bstr_t IWMPObjectExtendedProps::GetelementType ( );
__declspec(implementation_key(289)) long IWMPObjectExtendedProps::Getleft ( );
__declspec(implementation_key(290)) void IWMPObjectExtendedProps::Putleft ( long pVal );
__declspec(implementation_key(291)) long IWMPObjectExtendedProps::Gettop ( );
__declspec(implementation_key(292)) void IWMPObjectExtendedProps::Puttop ( long pVal );
__declspec(implementation_key(293)) long IWMPObjectExtendedProps::Getright ( );
__declspec(implementation_key(294)) void IWMPObjectExtendedProps::Putright ( long pVal );
__declspec(implementation_key(295)) long IWMPObjectExtendedProps::Getbottom ( );
__declspec(implementation_key(296)) void IWMPObjectExtendedProps::Putbottom ( long pVal );
__declspec(implementation_key(297)) long IWMPObjectExtendedProps::Getwidth ( );
__declspec(implementation_key(298)) void IWMPObjectExtendedProps::Putwidth ( long pVal );
__declspec(implementation_key(299)) long IWMPObjectExtendedProps::Getheight ( );
__declspec(implementation_key(300)) void IWMPObjectExtendedProps::Putheight ( long pVal );
__declspec(implementation_key(301)) long IWMPObjectExtendedProps::GetzIndex ( );
__declspec(implementation_key(302)) void IWMPObjectExtendedProps::PutzIndex ( long pVal );
__declspec(implementation_key(303)) _bstr_t IWMPObjectExtendedProps::GetclippingImage ( );
__declspec(implementation_key(304)) void IWMPObjectExtendedProps::PutclippingImage ( _bstr_t pVal );
__declspec(implementation_key(305)) _bstr_t IWMPObjectExtendedProps::GetclippingColor ( );
__declspec(implementation_key(306)) void IWMPObjectExtendedProps::PutclippingColor ( _bstr_t pVal );
__declspec(implementation_key(307)) VARIANT_BOOL IWMPObjectExtendedProps::Getvisible ( );
__declspec(implementation_key(308)) void IWMPObjectExtendedProps::Putvisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(309)) VARIANT_BOOL IWMPObjectExtendedProps::Getenabled ( );
__declspec(implementation_key(310)) void IWMPObjectExtendedProps::Putenabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(311)) VARIANT_BOOL IWMPObjectExtendedProps::GettabStop ( );
__declspec(implementation_key(312)) void IWMPObjectExtendedProps::PuttabStop ( VARIANT_BOOL pVal );
__declspec(implementation_key(313)) VARIANT_BOOL IWMPObjectExtendedProps::GetpassThrough ( );
__declspec(implementation_key(314)) void IWMPObjectExtendedProps::PutpassThrough ( VARIANT_BOOL pVal );
__declspec(implementation_key(315)) _bstr_t IWMPObjectExtendedProps::GethorizontalAlignment ( );
__declspec(implementation_key(316)) void IWMPObjectExtendedProps::PuthorizontalAlignment ( _bstr_t pVal );
__declspec(implementation_key(317)) _bstr_t IWMPObjectExtendedProps::GetverticalAlignment ( );
__declspec(implementation_key(318)) void IWMPObjectExtendedProps::PutverticalAlignment ( _bstr_t pVal );
__declspec(implementation_key(319)) HRESULT IWMPObjectExtendedProps::moveTo ( long newX, long newY, long moveTime );
__declspec(implementation_key(320)) HRESULT IWMPObjectExtendedProps::slideTo ( long newX, long newY, long moveTime );
__declspec(implementation_key(321)) HRESULT IWMPObjectExtendedProps::moveSizeTo ( long newX, long newY, long newWidth, long newHeight, long moveTime, VARIANT_BOOL fSlide );
__declspec(implementation_key(322)) long IWMPObjectExtendedProps::GetalphaBlend ( );
__declspec(implementation_key(323)) void IWMPObjectExtendedProps::PutalphaBlend ( long pVal );
__declspec(implementation_key(324)) HRESULT IWMPObjectExtendedProps::alphaBlendTo ( long newVal, long alphaTime );
__declspec(implementation_key(325)) _bstr_t IWMPObjectExtendedProps::GetaccName ( );
__declspec(implementation_key(326)) void IWMPObjectExtendedProps::PutaccName ( _bstr_t pszName );
__declspec(implementation_key(327)) _bstr_t IWMPObjectExtendedProps::GetaccDescription ( );
__declspec(implementation_key(328)) void IWMPObjectExtendedProps::PutaccDescription ( _bstr_t pszDesc );
__declspec(implementation_key(329)) _bstr_t IWMPObjectExtendedProps::GetaccKeyboardShortcut ( );
__declspec(implementation_key(330)) void IWMPObjectExtendedProps::PutaccKeyboardShortcut ( _bstr_t pszShortcut );
__declspec(implementation_key(331)) VARIANT_BOOL IWMPObjectExtendedProps::GetresizeImages ( );
__declspec(implementation_key(332)) void IWMPObjectExtendedProps::PutresizeImages ( VARIANT_BOOL pVal );
__declspec(implementation_key(333)) _bstr_t IWMPObjectExtendedProps::GetnineGridMargins ( );
__declspec(implementation_key(334)) void IWMPObjectExtendedProps::PutnineGridMargins ( _bstr_t pszMargins );
__declspec(implementation_key(335)) _bstr_t IWMPObjectExtendedProps::GetresizeOptimize ( );
__declspec(implementation_key(336)) void IWMPObjectExtendedProps::PutresizeOptimize ( _bstr_t ppszResizeOptimize );
__declspec(implementation_key(337)) float IWMPObjectExtendedProps::Getrotation ( );
__declspec(implementation_key(338)) void IWMPObjectExtendedProps::Putrotation ( float pfVal );
__declspec(implementation_key(339)) _bstr_t IWMPLayoutSubView::GettransparencyColor ( );
__declspec(implementation_key(340)) void IWMPLayoutSubView::PuttransparencyColor ( _bstr_t pVal );
__declspec(implementation_key(341)) _bstr_t IWMPLayoutSubView::GetbackgroundColor ( );
__declspec(implementation_key(342)) void IWMPLayoutSubView::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(343)) _bstr_t IWMPLayoutSubView::GetbackgroundImage ( );
__declspec(implementation_key(344)) void IWMPLayoutSubView::PutbackgroundImage ( _bstr_t pVal );
__declspec(implementation_key(345)) VARIANT_BOOL IWMPLayoutSubView::GetbackgroundTiled ( );
__declspec(implementation_key(346)) void IWMPLayoutSubView::PutbackgroundTiled ( VARIANT_BOOL pVal );
__declspec(implementation_key(347)) float IWMPLayoutSubView::GetbackgroundImageHueShift ( );
__declspec(implementation_key(348)) void IWMPLayoutSubView::PutbackgroundImageHueShift ( float pVal );
__declspec(implementation_key(349)) float IWMPLayoutSubView::GetbackgroundImageSaturation ( );
__declspec(implementation_key(350)) void IWMPLayoutSubView::PutbackgroundImageSaturation ( float pVal );
__declspec(implementation_key(351)) VARIANT_BOOL IWMPLayoutSubView::GetresizeBackgroundImage ( );
__declspec(implementation_key(352)) void IWMPLayoutSubView::PutresizeBackgroundImage ( VARIANT_BOOL pVal );
__declspec(implementation_key(353)) _bstr_t IWMPLayoutView::Gettitle ( );
__declspec(implementation_key(354)) void IWMPLayoutView::Puttitle ( _bstr_t pVal );
__declspec(implementation_key(355)) _bstr_t IWMPLayoutView::Getcategory ( );
__declspec(implementation_key(356)) void IWMPLayoutView::Putcategory ( _bstr_t pVal );
__declspec(implementation_key(357)) _bstr_t IWMPLayoutView::GetfocusObjectID ( );
__declspec(implementation_key(358)) void IWMPLayoutView::PutfocusObjectID ( _bstr_t pVal );
__declspec(implementation_key(359)) VARIANT_BOOL IWMPLayoutView::GettitleBar ( );
__declspec(implementation_key(360)) VARIANT_BOOL IWMPLayoutView::Getresizable ( );
__declspec(implementation_key(361)) long IWMPLayoutView::GettimerInterval ( );
__declspec(implementation_key(362)) void IWMPLayoutView::PuttimerInterval ( long pVal );
__declspec(implementation_key(363)) long IWMPLayoutView::GetminWidth ( );
__declspec(implementation_key(364)) void IWMPLayoutView::PutminWidth ( long pVal );
__declspec(implementation_key(365)) long IWMPLayoutView::GetmaxWidth ( );
__declspec(implementation_key(366)) void IWMPLayoutView::PutmaxWidth ( long pVal );
__declspec(implementation_key(367)) long IWMPLayoutView::GetminHeight ( );
__declspec(implementation_key(368)) void IWMPLayoutView::PutminHeight ( long pVal );
__declspec(implementation_key(369)) long IWMPLayoutView::GetmaxHeight ( );
__declspec(implementation_key(370)) void IWMPLayoutView::PutmaxHeight ( long pVal );
__declspec(implementation_key(371)) HRESULT IWMPLayoutView::close ( );
__declspec(implementation_key(372)) HRESULT IWMPLayoutView::minimize ( );
__declspec(implementation_key(373)) HRESULT IWMPLayoutView::maximize ( );
__declspec(implementation_key(374)) HRESULT IWMPLayoutView::restore ( );
__declspec(implementation_key(375)) HRESULT IWMPLayoutView::size ( _bstr_t bstrDirection );
__declspec(implementation_key(376)) HRESULT IWMPLayoutView::returnToMediaCenter ( );
__declspec(implementation_key(377)) HRESULT IWMPLayoutView::updateWindow ( );
__declspec(implementation_key(378)) VARIANT_BOOL IWMPLayoutView::Getmaximized ( );
__declspec(implementation_key(379)) VARIANT_BOOL IWMPLayoutView::Getminimized ( );
__declspec(implementation_key(380)) IDispatchPtr IWMPEventObject::GetsrcElement ( );
__declspec(implementation_key(381)) VARIANT_BOOL IWMPEventObject::GetaltKey ( );
__declspec(implementation_key(382)) VARIANT_BOOL IWMPEventObject::GetctrlKey ( );
__declspec(implementation_key(383)) VARIANT_BOOL IWMPEventObject::GetshiftKey ( );
__declspec(implementation_key(384)) IDispatchPtr IWMPEventObject::GetfromElement ( );
__declspec(implementation_key(385)) IDispatchPtr IWMPEventObject::GettoElement ( );
__declspec(implementation_key(386)) void IWMPEventObject::PutkeyCode ( long p );
__declspec(implementation_key(387)) long IWMPEventObject::GetkeyCode ( );
__declspec(implementation_key(388)) long IWMPEventObject::Getbutton ( );
__declspec(implementation_key(389)) long IWMPEventObject::Getx ( );
__declspec(implementation_key(390)) long IWMPEventObject::Gety ( );
__declspec(implementation_key(391)) long IWMPEventObject::GetclientX ( );
__declspec(implementation_key(392)) long IWMPEventObject::GetclientY ( );
__declspec(implementation_key(393)) long IWMPEventObject::GetoffsetX ( );
__declspec(implementation_key(394)) long IWMPEventObject::GetoffsetY ( );
__declspec(implementation_key(395)) long IWMPEventObject::GetscreenX ( );
__declspec(implementation_key(396)) long IWMPEventObject::GetscreenY ( );
__declspec(implementation_key(397)) long IWMPEventObject::GetscreenWidth ( );
__declspec(implementation_key(398)) long IWMPEventObject::GetscreenHeight ( );
__declspec(implementation_key(399)) VARIANT_BOOL IWMPEventObject::GetpenOrTouch ( );
__declspec(implementation_key(400)) _bstr_t IWMPTheme::Gettitle ( );
__declspec(implementation_key(401)) float IWMPTheme::Getversion ( );
__declspec(implementation_key(402)) _bstr_t IWMPTheme::GetauthorVersion ( );
__declspec(implementation_key(403)) _bstr_t IWMPTheme::Getauthor ( );
__declspec(implementation_key(404)) _bstr_t IWMPTheme::Getcopyright ( );
__declspec(implementation_key(405)) _bstr_t IWMPTheme::GetcurrentViewID ( );
__declspec(implementation_key(406)) void IWMPTheme::PutcurrentViewID ( _bstr_t pVal );
__declspec(implementation_key(407)) HRESULT IWMPTheme::showErrorDialog ( );
__declspec(implementation_key(408)) HRESULT IWMPTheme::logString ( _bstr_t stringVal );
__declspec(implementation_key(409)) HRESULT IWMPTheme::openView ( _bstr_t viewID );
__declspec(implementation_key(410)) IDispatchPtr IWMPTheme::openViewRelative ( _bstr_t viewID, long x, long y );
__declspec(implementation_key(411)) HRESULT IWMPTheme::closeView ( _bstr_t viewID );
__declspec(implementation_key(412)) _bstr_t IWMPTheme::openDialog ( _bstr_t dialogType, _bstr_t parameters );
__declspec(implementation_key(413)) _bstr_t IWMPTheme::loadString ( _bstr_t bstrString );
__declspec(implementation_key(414)) _bstr_t IWMPTheme::loadPreference ( _bstr_t bstrName );
__declspec(implementation_key(415)) HRESULT IWMPTheme::savePreference ( _bstr_t bstrName, _bstr_t bstrValue );
__declspec(implementation_key(416)) HRESULT IWMPTheme::playSound ( _bstr_t bstrFilename );
__declspec(implementation_key(417)) IDispatchPtr IWMPTheme::openViewRelativeInternal ( _bstr_t viewID, long nIndex, long x, long y, long nWidth, long nHeight, _bstr_t bstrHorizontalAlignment, _bstr_t bstrVerticalAlignment );
__declspec(implementation_key(418)) HRESULT IWMPTheme::setViewPosition ( _bstr_t viewID, long nIndex, long x, long y, long nWidth, long nHeight, _bstr_t bstrHorizontalAlignment, _bstr_t bstrVerticalAlignment );
__declspec(implementation_key(419)) _bstr_t IWMPLayoutSettingsDispatch::GeteffectType ( );
__declspec(implementation_key(420)) void IWMPLayoutSettingsDispatch::PuteffectType ( _bstr_t pVal );
__declspec(implementation_key(421)) long IWMPLayoutSettingsDispatch::GeteffectPreset ( );
__declspec(implementation_key(422)) void IWMPLayoutSettingsDispatch::PuteffectPreset ( long pVal );
__declspec(implementation_key(423)) _bstr_t IWMPLayoutSettingsDispatch::GetsettingsView ( );
__declspec(implementation_key(424)) void IWMPLayoutSettingsDispatch::PutsettingsView ( _bstr_t pVal );
__declspec(implementation_key(425)) long IWMPLayoutSettingsDispatch::GetvideoZoom ( );
__declspec(implementation_key(426)) void IWMPLayoutSettingsDispatch::PutvideoZoom ( long pVal );
__declspec(implementation_key(427)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetvideoShrinkToFit ( );
__declspec(implementation_key(428)) void IWMPLayoutSettingsDispatch::PutvideoShrinkToFit ( VARIANT_BOOL pVal );
__declspec(implementation_key(429)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetvideoStretchToFit ( );
__declspec(implementation_key(430)) void IWMPLayoutSettingsDispatch::PutvideoStretchToFit ( VARIANT_BOOL pVal );
__declspec(implementation_key(431)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetuserVideoStretchToFit ( );
__declspec(implementation_key(432)) void IWMPLayoutSettingsDispatch::PutuserVideoStretchToFit ( VARIANT_BOOL pVal );
__declspec(implementation_key(433)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowCaptions ( );
__declspec(implementation_key(434)) void IWMPLayoutSettingsDispatch::PutshowCaptions ( VARIANT_BOOL pVal );
__declspec(implementation_key(435)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowTitles ( );
__declspec(implementation_key(436)) void IWMPLayoutSettingsDispatch::PutshowTitles ( VARIANT_BOOL pVal );
__declspec(implementation_key(437)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowEffects ( );
__declspec(implementation_key(438)) void IWMPLayoutSettingsDispatch::PutshowEffects ( VARIANT_BOOL pVal );
__declspec(implementation_key(439)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowFullScreenPlaylist ( );
__declspec(implementation_key(440)) void IWMPLayoutSettingsDispatch::PutshowFullScreenPlaylist ( VARIANT_BOOL pVal );
__declspec(implementation_key(441)) _bstr_t IWMPLayoutSettingsDispatch::GetcontrastMode ( );
__declspec(implementation_key(442)) _bstr_t IWMPLayoutSettingsDispatch::getNamedString ( _bstr_t bstrName );
__declspec(implementation_key(443)) _bstr_t IWMPLayoutSettingsDispatch::getDurationStringFromSeconds ( long lDurationVal );
__declspec(implementation_key(444)) _bstr_t IWMPLayoutSettingsDispatch::GetdisplayView ( );
__declspec(implementation_key(445)) void IWMPLayoutSettingsDispatch::PutdisplayView ( _bstr_t pVal );
__declspec(implementation_key(446)) _bstr_t IWMPLayoutSettingsDispatch::GetmetadataView ( );
__declspec(implementation_key(447)) void IWMPLayoutSettingsDispatch::PutmetadataView ( _bstr_t pVal );
__declspec(implementation_key(448)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowSettings ( );
__declspec(implementation_key(449)) void IWMPLayoutSettingsDispatch::PutshowSettings ( VARIANT_BOOL pVal );
__declspec(implementation_key(450)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowResizeBars ( );
__declspec(implementation_key(451)) void IWMPLayoutSettingsDispatch::PutshowResizeBars ( VARIANT_BOOL pVal );
__declspec(implementation_key(452)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowPlaylist ( );
__declspec(implementation_key(453)) void IWMPLayoutSettingsDispatch::PutshowPlaylist ( VARIANT_BOOL pVal );
__declspec(implementation_key(454)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetshowMetadata ( );
__declspec(implementation_key(455)) void IWMPLayoutSettingsDispatch::PutshowMetadata ( VARIANT_BOOL pVal );
__declspec(implementation_key(456)) long IWMPLayoutSettingsDispatch::GetsettingsWidth ( );
__declspec(implementation_key(457)) void IWMPLayoutSettingsDispatch::PutsettingsWidth ( long pVal );
__declspec(implementation_key(458)) long IWMPLayoutSettingsDispatch::GetsettingsHeight ( );
__declspec(implementation_key(459)) void IWMPLayoutSettingsDispatch::PutsettingsHeight ( long pVal );
__declspec(implementation_key(460)) long IWMPLayoutSettingsDispatch::GetplaylistWidth ( );
__declspec(implementation_key(461)) void IWMPLayoutSettingsDispatch::PutplaylistWidth ( long pVal );
__declspec(implementation_key(462)) long IWMPLayoutSettingsDispatch::GetplaylistHeight ( );
__declspec(implementation_key(463)) void IWMPLayoutSettingsDispatch::PutplaylistHeight ( long pVal );
__declspec(implementation_key(464)) long IWMPLayoutSettingsDispatch::GetmetadataWidth ( );
__declspec(implementation_key(465)) void IWMPLayoutSettingsDispatch::PutmetadataWidth ( long pVal );
__declspec(implementation_key(466)) long IWMPLayoutSettingsDispatch::GetmetadataHeight ( );
__declspec(implementation_key(467)) void IWMPLayoutSettingsDispatch::PutmetadataHeight ( long pVal );
__declspec(implementation_key(468)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetfullScreenAvailable ( );
__declspec(implementation_key(469)) void IWMPLayoutSettingsDispatch::PutfullScreenAvailable ( VARIANT_BOOL pVal );
__declspec(implementation_key(470)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetfullScreenRequest ( );
__declspec(implementation_key(471)) void IWMPLayoutSettingsDispatch::PutfullScreenRequest ( VARIANT_BOOL pVal );
__declspec(implementation_key(472)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetquickHide ( );
__declspec(implementation_key(473)) void IWMPLayoutSettingsDispatch::PutquickHide ( VARIANT_BOOL pVal );
__declspec(implementation_key(474)) long IWMPLayoutSettingsDispatch::GetdisplayPreset ( );
__declspec(implementation_key(475)) void IWMPLayoutSettingsDispatch::PutdisplayPreset ( long pVal );
__declspec(implementation_key(476)) long IWMPLayoutSettingsDispatch::GetsettingsPreset ( );
__declspec(implementation_key(477)) void IWMPLayoutSettingsDispatch::PutsettingsPreset ( long pVal );
__declspec(implementation_key(478)) long IWMPLayoutSettingsDispatch::GetmetadataPreset ( );
__declspec(implementation_key(479)) void IWMPLayoutSettingsDispatch::PutmetadataPreset ( long pVal );
__declspec(implementation_key(480)) _bstr_t IWMPLayoutSettingsDispatch::GetuserDisplayView ( );
__declspec(implementation_key(481)) _bstr_t IWMPLayoutSettingsDispatch::GetuserWMPDisplayView ( );
__declspec(implementation_key(482)) long IWMPLayoutSettingsDispatch::GetuserDisplayPreset ( );
__declspec(implementation_key(483)) long IWMPLayoutSettingsDispatch::GetuserWMPDisplayPreset ( );
__declspec(implementation_key(484)) long IWMPLayoutSettingsDispatch::GetdynamicRangeControl ( );
__declspec(implementation_key(485)) void IWMPLayoutSettingsDispatch::PutdynamicRangeControl ( long pVal );
__declspec(implementation_key(486)) float IWMPLayoutSettingsDispatch::GetslowRate ( );
__declspec(implementation_key(487)) void IWMPLayoutSettingsDispatch::PutslowRate ( float pVal );
__declspec(implementation_key(488)) float IWMPLayoutSettingsDispatch::GetfastRate ( );
__declspec(implementation_key(489)) void IWMPLayoutSettingsDispatch::PutfastRate ( float pVal );
__declspec(implementation_key(490)) float IWMPLayoutSettingsDispatch::GetbuttonHueShift ( );
__declspec(implementation_key(491)) void IWMPLayoutSettingsDispatch::PutbuttonHueShift ( float pVal );
__declspec(implementation_key(492)) float IWMPLayoutSettingsDispatch::GetbuttonSaturation ( );
__declspec(implementation_key(493)) void IWMPLayoutSettingsDispatch::PutbuttonSaturation ( float pVal );
__declspec(implementation_key(494)) float IWMPLayoutSettingsDispatch::GetbackHueShift ( );
__declspec(implementation_key(495)) void IWMPLayoutSettingsDispatch::PutbackHueShift ( float pVal );
__declspec(implementation_key(496)) float IWMPLayoutSettingsDispatch::GetbackSaturation ( );
__declspec(implementation_key(497)) void IWMPLayoutSettingsDispatch::PutbackSaturation ( float pVal );
__declspec(implementation_key(498)) long IWMPLayoutSettingsDispatch::GetvizRequest ( );
__declspec(implementation_key(499)) void IWMPLayoutSettingsDispatch::PutvizRequest ( long pVal );
__declspec(implementation_key(500)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorLight ( );
__declspec(implementation_key(501)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorMedium ( );
__declspec(implementation_key(502)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorDark ( );
__declspec(implementation_key(503)) _bstr_t IWMPLayoutSettingsDispatch::GettoolbarButtonHighlight ( );
__declspec(implementation_key(504)) _bstr_t IWMPLayoutSettingsDispatch::GettoolbarButtonShadow ( );
__declspec(implementation_key(505)) _bstr_t IWMPLayoutSettingsDispatch::GettoolbarButtonFace ( );
__declspec(implementation_key(506)) _bstr_t IWMPLayoutSettingsDispatch::GetitemPlayingColor ( );
__declspec(implementation_key(507)) _bstr_t IWMPLayoutSettingsDispatch::GetitemPlayingBackgroundColor ( );
__declspec(implementation_key(508)) _bstr_t IWMPLayoutSettingsDispatch::GetitemErrorColor ( );
__declspec(implementation_key(509)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetappColorLimited ( );
__declspec(implementation_key(510)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetappColorBlackBackground ( );
__declspec(implementation_key(511)) void IWMPLayoutSettingsDispatch::PutappColorBlackBackground ( VARIANT_BOOL pVal );
__declspec(implementation_key(512)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorVideoBorder ( );
__declspec(implementation_key(513)) void IWMPLayoutSettingsDispatch::PutappColorVideoBorder ( _bstr_t pVal );
__declspec(implementation_key(514)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux1 ( );
__declspec(implementation_key(515)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux2 ( );
__declspec(implementation_key(516)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux3 ( );
__declspec(implementation_key(517)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux4 ( );
__declspec(implementation_key(518)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux5 ( );
__declspec(implementation_key(519)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux6 ( );
__declspec(implementation_key(520)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux7 ( );
__declspec(implementation_key(521)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux8 ( );
__declspec(implementation_key(522)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux9 ( );
__declspec(implementation_key(523)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux10 ( );
__declspec(implementation_key(524)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux11 ( );
__declspec(implementation_key(525)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux12 ( );
__declspec(implementation_key(526)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux13 ( );
__declspec(implementation_key(527)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux14 ( );
__declspec(implementation_key(528)) _bstr_t IWMPLayoutSettingsDispatch::GetappColorAux15 ( );
__declspec(implementation_key(529)) _bstr_t IWMPLayoutSettingsDispatch::Getstatus ( );
__declspec(implementation_key(530)) void IWMPLayoutSettingsDispatch::Putstatus ( _bstr_t pVal );
__declspec(implementation_key(531)) _bstr_t IWMPLayoutSettingsDispatch::GetuserWMPSettingsView ( );
__declspec(implementation_key(532)) long IWMPLayoutSettingsDispatch::GetuserWMPSettingsPreset ( );
__declspec(implementation_key(533)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetuserWMPShowSettings ( );
__declspec(implementation_key(534)) _bstr_t IWMPLayoutSettingsDispatch::GetuserWMPMetadataView ( );
__declspec(implementation_key(535)) long IWMPLayoutSettingsDispatch::GetuserWMPMetadataPreset ( );
__declspec(implementation_key(536)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetuserWMPShowMetadata ( );
__declspec(implementation_key(537)) long IWMPLayoutSettingsDispatch::GetcaptionsHeight ( );
__declspec(implementation_key(538)) void IWMPLayoutSettingsDispatch::PutcaptionsHeight ( long pVal );
__declspec(implementation_key(539)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetsnapToVideo ( );
__declspec(implementation_key(540)) void IWMPLayoutSettingsDispatch::PutsnapToVideo ( VARIANT_BOOL pVal );
__declspec(implementation_key(541)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetpinFullScreenControls ( );
__declspec(implementation_key(542)) void IWMPLayoutSettingsDispatch::PutpinFullScreenControls ( VARIANT_BOOL pVal );
__declspec(implementation_key(543)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetisMultiMon ( );
__declspec(implementation_key(544)) float IWMPLayoutSettingsDispatch::GetexclusiveHueShift ( );
__declspec(implementation_key(545)) void IWMPLayoutSettingsDispatch::PutexclusiveHueShift ( float pVal );
__declspec(implementation_key(546)) float IWMPLayoutSettingsDispatch::GetexclusiveSaturation ( );
__declspec(implementation_key(547)) void IWMPLayoutSettingsDispatch::PutexclusiveSaturation ( float pVal );
__declspec(implementation_key(548)) VARIANT_BOOL IWMPLayoutSettingsDispatch::GetthemeBkgColorIsActive ( );
__declspec(implementation_key(549)) void IWMPLayoutSettingsDispatch::PutthemeBkgColorIsActive ( VARIANT_BOOL pVal );
__declspec(implementation_key(550)) _bstr_t IWMPLayoutSettingsDispatch::GetthemeBkgColorActive ( );
__declspec(implementation_key(551)) _bstr_t IWMPLayoutSettingsDispatch::GetthemeBkgColorInactive ( );
__declspec(implementation_key(552)) HRESULT IWMPWindow::setWindowPos ( long x, long y, long height, long width );
__declspec(implementation_key(553)) long IWMPWindow::GetframeRate ( );
__declspec(implementation_key(554)) void IWMPWindow::PutframeRate ( long pVal );
__declspec(implementation_key(555)) long IWMPWindow::GetmouseX ( );
__declspec(implementation_key(556)) long IWMPWindow::GetmouseY ( );
__declspec(implementation_key(557)) void IWMPWindow::Putonsizing ( IDispatch * _arg1 );
__declspec(implementation_key(558)) HRESULT IWMPWindow::openViewAlwaysOnTop ( _bstr_t bstrViewID );
__declspec(implementation_key(559)) _bstr_t IWMPBrandDispatch::GetfullServiceName ( );
__declspec(implementation_key(560)) _bstr_t IWMPBrandDispatch::GetfriendlyName ( );
__declspec(implementation_key(561)) _bstr_t IWMPBrandDispatch::GetguideButtonText ( );
__declspec(implementation_key(562)) _bstr_t IWMPBrandDispatch::GetguideButtonTip ( );
__declspec(implementation_key(563)) _bstr_t IWMPBrandDispatch::GetguideMenuText ( );
__declspec(implementation_key(564)) _bstr_t IWMPBrandDispatch::GetguideAccText ( );
__declspec(implementation_key(565)) _bstr_t IWMPBrandDispatch::Gettask1ButtonText ( );
__declspec(implementation_key(566)) _bstr_t IWMPBrandDispatch::Gettask1ButtonTip ( );
__declspec(implementation_key(567)) _bstr_t IWMPBrandDispatch::Gettask1MenuText ( );
__declspec(implementation_key(568)) _bstr_t IWMPBrandDispatch::Gettask1AccText ( );
__declspec(implementation_key(569)) _bstr_t IWMPBrandDispatch::GetguideUrl ( );
__declspec(implementation_key(570)) _bstr_t IWMPBrandDispatch::Gettask1Url ( );
__declspec(implementation_key(571)) _bstr_t IWMPBrandDispatch::GetimageLargeUrl ( );
__declspec(implementation_key(572)) _bstr_t IWMPBrandDispatch::GetimageSmallUrl ( );
__declspec(implementation_key(573)) _bstr_t IWMPBrandDispatch::GetimageMenuUrl ( );
__declspec(implementation_key(574)) _bstr_t IWMPBrandDispatch::GetinfoCenterUrl ( );
__declspec(implementation_key(575)) _bstr_t IWMPBrandDispatch::GetalbumInfoUrl ( );
__declspec(implementation_key(576)) _bstr_t IWMPBrandDispatch::GetbuyCDUrl ( );
__declspec(implementation_key(577)) _bstr_t IWMPBrandDispatch::GethtmlViewUrl ( );
__declspec(implementation_key(578)) _bstr_t IWMPBrandDispatch::GetnavigateUrl ( );
__declspec(implementation_key(579)) _bstr_t IWMPBrandDispatch::GetcookieUrl ( );
__declspec(implementation_key(580)) _bstr_t IWMPBrandDispatch::GetdownloadStatusUrl ( );
__declspec(implementation_key(581)) _bstr_t IWMPBrandDispatch::GetcolorPlayer ( );
__declspec(implementation_key(582)) _bstr_t IWMPBrandDispatch::GetcolorPlayerText ( );
__declspec(implementation_key(583)) long IWMPBrandDispatch::GetnavigateDispid ( );
__declspec(implementation_key(584)) _bstr_t IWMPBrandDispatch::GetnavigateParams ( );
__declspec(implementation_key(585)) _bstr_t IWMPBrandDispatch::GetnavigatePane ( );
__declspec(implementation_key(586)) _bstr_t IWMPBrandDispatch::GetselectedPane ( );
__declspec(implementation_key(587)) void IWMPBrandDispatch::PutselectedPane ( _bstr_t pVal );
__declspec(implementation_key(588)) HRESULT IWMPBrandDispatch::setNavigateProps ( _bstr_t bstrPane, long lDispid, _bstr_t bstrParams );
__declspec(implementation_key(589)) _bstr_t IWMPBrandDispatch::getMediaParams ( IUnknown * pObject, _bstr_t bstrURL );
__declspec(implementation_key(590)) void IWMPBrandDispatch::PutselectedTask ( long _arg1 );
__declspec(implementation_key(591)) VARIANT_BOOL IWMPBrandDispatch::GetcontentPartnerSelected ( );
__declspec(implementation_key(592)) _bstr_t IWMPNowPlayingHelperDispatch::GetviewFriendlyName ( _bstr_t bstrView );
__declspec(implementation_key(593)) long IWMPNowPlayingHelperDispatch::GetviewPresetCount ( _bstr_t bstrView );
__declspec(implementation_key(594)) _bstr_t IWMPNowPlayingHelperDispatch::GetviewPresetName ( _bstr_t bstrView, long nPresetIndex );
__declspec(implementation_key(595)) _bstr_t IWMPNowPlayingHelperDispatch::GeteffectFriendlyName ( _bstr_t bstrEffect );
__declspec(implementation_key(596)) _bstr_t IWMPNowPlayingHelperDispatch::GeteffectPresetName ( _bstr_t bstrEffect, long nPresetIndex );
__declspec(implementation_key(597)) _bstr_t IWMPNowPlayingHelperDispatch::resolveDisplayView ( VARIANT_BOOL fSafe );
__declspec(implementation_key(598)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::isValidDisplayView ( _bstr_t bstrView );
__declspec(implementation_key(599)) _bstr_t IWMPNowPlayingHelperDispatch::getSkinFile ( );
__declspec(implementation_key(600)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetcaptionsAvailable ( );
__declspec(implementation_key(601)) long IWMPNowPlayingHelperDispatch::GetlinkAvailable ( );
__declspec(implementation_key(602)) long IWMPNowPlayingHelperDispatch::GetlinkRequest ( );
__declspec(implementation_key(603)) void IWMPNowPlayingHelperDispatch::PutlinkRequest ( long pVal );
__declspec(implementation_key(604)) _bstr_t IWMPNowPlayingHelperDispatch::GetlinkRequestParams ( );
__declspec(implementation_key(605)) void IWMPNowPlayingHelperDispatch::PutlinkRequestParams ( _bstr_t pVal );
__declspec(implementation_key(606)) long IWMPNowPlayingHelperDispatch::getCurrentArtID ( VARIANT_BOOL fLargeArt );
__declspec(implementation_key(607)) _bstr_t IWMPNowPlayingHelperDispatch::getTimeString ( double dTime );
__declspec(implementation_key(608)) _bstr_t IWMPNowPlayingHelperDispatch::getCurrentScriptCommand ( _bstr_t bstrType );
__declspec(implementation_key(609)) HRESULT IWMPNowPlayingHelperDispatch::calcLayout ( long lWidth, long lHeight, VARIANT_BOOL vbCaptions, VARIANT_BOOL vbBanner );
__declspec(implementation_key(610)) long IWMPNowPlayingHelperDispatch::getLayoutSize ( long nProp );
__declspec(implementation_key(611)) IDispatchPtr IWMPNowPlayingHelperDispatch::getRootPlaylist ( IDispatch * pPlaylist );
__declspec(implementation_key(612)) _bstr_t IWMPNowPlayingHelperDispatch::getHTMLViewURL ( );
__declspec(implementation_key(613)) IUnknownPtr IWMPNowPlayingHelperDispatch::GeteditObj ( );
__declspec(implementation_key(614)) void IWMPNowPlayingHelperDispatch::PuteditObj ( IUnknown * ppVal );
__declspec(implementation_key(615)) _bstr_t IWMPNowPlayingHelperDispatch::getStatusString ( _bstr_t bstrStatusId );
__declspec(implementation_key(616)) long IWMPNowPlayingHelperDispatch::getStatusPct ( _bstr_t bstrStatusId );
__declspec(implementation_key(617)) long IWMPNowPlayingHelperDispatch::getStatusResult ( _bstr_t bstrStatusId );
__declspec(implementation_key(618)) long IWMPNowPlayingHelperDispatch::getStatusIcon ( _bstr_t bstrStatusId );
__declspec(implementation_key(619)) _bstr_t IWMPNowPlayingHelperDispatch::getStatusIdList ( );
__declspec(implementation_key(620)) _bstr_t IWMPNowPlayingHelperDispatch::GetnotificationString ( );
__declspec(implementation_key(621)) _bstr_t IWMPNowPlayingHelperDispatch::GethtmlViewBaseURL ( );
__declspec(implementation_key(622)) void IWMPNowPlayingHelperDispatch::PuthtmlViewBaseURL ( _bstr_t pVal );
__declspec(implementation_key(623)) _bstr_t IWMPNowPlayingHelperDispatch::GethtmlViewFullURL ( );
__declspec(implementation_key(624)) void IWMPNowPlayingHelperDispatch::PuthtmlViewFullURL ( _bstr_t pVal );
__declspec(implementation_key(625)) long IWMPNowPlayingHelperDispatch::GethtmlViewSecureLock ( );
__declspec(implementation_key(626)) void IWMPNowPlayingHelperDispatch::PuthtmlViewSecureLock ( long pVal );
__declspec(implementation_key(627)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GethtmlViewBusy ( );
__declspec(implementation_key(628)) void IWMPNowPlayingHelperDispatch::PuthtmlViewBusy ( VARIANT_BOOL pVal );
__declspec(implementation_key(629)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GethtmlViewShowCert ( );
__declspec(implementation_key(630)) void IWMPNowPlayingHelperDispatch::PuthtmlViewShowCert ( VARIANT_BOOL pVal );
__declspec(implementation_key(631)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetpreviousEnabled ( );
__declspec(implementation_key(632)) void IWMPNowPlayingHelperDispatch::PutpreviousEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(633)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetdoPreviousNow ( );
__declspec(implementation_key(634)) void IWMPNowPlayingHelperDispatch::PutdoPreviousNow ( VARIANT_BOOL pVal );
__declspec(implementation_key(635)) long IWMPNowPlayingHelperDispatch::GetDPI ( );
__declspec(implementation_key(636)) HRESULT IWMPNowPlayingHelperDispatch::clearColors ( );
__declspec(implementation_key(637)) _bstr_t IWMPNowPlayingHelperDispatch::GetlastMessage ( );
__declspec(implementation_key(638)) void IWMPNowPlayingHelperDispatch::PutlastMessage ( _bstr_t pVal );
__declspec(implementation_key(639)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetinVistaPlus ( );
__declspec(implementation_key(640)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetisBidi ( );
__declspec(implementation_key(641)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetisOCX ( );
__declspec(implementation_key(642)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GethoverTransportsEnabled ( );
__declspec(implementation_key(643)) HRESULT IWMPNowPlayingHelperDispatch::initRipHelper ( );
__declspec(implementation_key(644)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetisAudioCD ( );
__declspec(implementation_key(645)) void IWMPNowPlayingHelperDispatch::PutisAudioCD ( VARIANT_BOOL pVal );
__declspec(implementation_key(646)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetcanRip ( );
__declspec(implementation_key(647)) void IWMPNowPlayingHelperDispatch::PutcanRip ( VARIANT_BOOL pVal );
__declspec(implementation_key(648)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetisRipping ( );
__declspec(implementation_key(649)) void IWMPNowPlayingHelperDispatch::PutisRipping ( VARIANT_BOOL pVal );
__declspec(implementation_key(650)) _bstr_t IWMPNowPlayingHelperDispatch::GetcurrentDrive ( );
__declspec(implementation_key(651)) void IWMPNowPlayingHelperDispatch::PutcurrentDrive ( _bstr_t pVal );
__declspec(implementation_key(652)) HRESULT IWMPNowPlayingHelperDispatch::startRip ( );
__declspec(implementation_key(653)) HRESULT IWMPNowPlayingHelperDispatch::stopRip ( );
__declspec(implementation_key(654)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetshowMMO ( );
__declspec(implementation_key(655)) void IWMPNowPlayingHelperDispatch::PutshowMMO ( VARIANT_BOOL pVal );
__declspec(implementation_key(656)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetMMOVisible ( );
__declspec(implementation_key(657)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetsuggestionsVisible ( );
__declspec(implementation_key(658)) _bstr_t IWMPNowPlayingHelperDispatch::GetsuggestionsTextColor ( );
__declspec(implementation_key(659)) _bstr_t IWMPNowPlayingHelperDispatch::GetfontFace ( );
__declspec(implementation_key(660)) long IWMPNowPlayingHelperDispatch::GetfontSize ( );
__declspec(implementation_key(661)) _bstr_t IWMPNowPlayingHelperDispatch::GetbackgroundColor ( );
__declspec(implementation_key(662)) long IWMPNowPlayingHelperDispatch::GetdoubleClickTime ( );
__declspec(implementation_key(663)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetplayAgain ( );
__declspec(implementation_key(664)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetpreviousPlaylistAvailable ( );
__declspec(implementation_key(665)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetnextPlaylistAvailable ( );
__declspec(implementation_key(666)) HRESULT IWMPNowPlayingHelperDispatch::nextPlaylist ( );
__declspec(implementation_key(667)) HRESULT IWMPNowPlayingHelperDispatch::previousPlaylist ( );
__declspec(implementation_key(668)) HRESULT IWMPNowPlayingHelperDispatch::playOffsetMedia ( long iOffset );
__declspec(implementation_key(669)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetbasketVisible ( );
__declspec(implementation_key(670)) void IWMPNowPlayingHelperDispatch::PutbasketVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(671)) _bstr_t IWMPNowPlayingHelperDispatch::GetmmoTextColor ( );
__declspec(implementation_key(672)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetbackgroundVisible ( );
__declspec(implementation_key(673)) void IWMPNowPlayingHelperDispatch::PutbackgroundEnabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(674)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetbackgroundEnabled ( );
__declspec(implementation_key(675)) void IWMPNowPlayingHelperDispatch::PutbackgroundIndex ( long pVal );
__declspec(implementation_key(676)) long IWMPNowPlayingHelperDispatch::GetbackgroundIndex ( );
__declspec(implementation_key(677)) _bstr_t IWMPNowPlayingHelperDispatch::GetupNext ( );
__declspec(implementation_key(678)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetplaybackOverlayVisible ( );
__declspec(implementation_key(679)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::Getremoted ( );
__declspec(implementation_key(680)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetglassEnabled ( );
__declspec(implementation_key(681)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GethighContrast ( );
__declspec(implementation_key(682)) void IWMPNowPlayingHelperDispatch::PuttestHighContrast ( _bstr_t _arg1 );
__declspec(implementation_key(683)) void IWMPNowPlayingHelperDispatch::GetsessionPlaylistCount ( long * pVal );
__declspec(implementation_key(684)) HRESULT IWMPNowPlayingHelperDispatch::setGestureStatus ( IDispatch * pObject, long newVal );
__declspec(implementation_key(685)) _bstr_t IWMPNowPlayingHelperDispatch::GetmetadataString ( );
__declspec(implementation_key(686)) void IWMPNowPlayingHelperDispatch::PutmetadataString ( _bstr_t pVal );
__declspec(implementation_key(687)) long IWMPNowPlayingHelperDispatch::GetalbumArtAlpha ( );
__declspec(implementation_key(688)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetplayerModeAlbumArtSelected ( );
__declspec(implementation_key(689)) VARIANT_BOOL IWMPNowPlayingHelperDispatch::GetinFullScreen ( );
__declspec(implementation_key(690)) HRESULT IWMPNowPlayingHelperDispatch::syncToAlbumArt ( IDispatch * pObject, long iOffsetFromCurrentMedia, _bstr_t bstrFallbackImage );
__declspec(implementation_key(691)) HRESULT IWMPNowDoingDispatch::buyContent ( );
__declspec(implementation_key(692)) HRESULT IWMPNowDoingDispatch::hideBasket ( );
__declspec(implementation_key(693)) HRESULT IWMPNowDoingDispatch::burnNavigateToStatus ( );
__declspec(implementation_key(694)) HRESULT IWMPNowDoingDispatch::syncNavigateToStatus ( );
__declspec(implementation_key(695)) long IWMPNowDoingDispatch::GetDPI ( );
__declspec(implementation_key(696)) _bstr_t IWMPNowDoingDispatch::Getmode ( );
__declspec(implementation_key(697)) void IWMPNowDoingDispatch::Putburn_selectedDrive ( long pVal );
__declspec(implementation_key(698)) long IWMPNowDoingDispatch::Getburn_selectedDrive ( );
__declspec(implementation_key(699)) long IWMPNowDoingDispatch::Getsync_selectedDevice ( );
__declspec(implementation_key(700)) void IWMPNowDoingDispatch::Putsync_selectedDevice ( long pVal );
__declspec(implementation_key(701)) long IWMPNowDoingDispatch::Getburn_numDiscsSpanned ( );
__declspec(implementation_key(702)) IDispatchPtr IWMPNowDoingDispatch::GeteditPlaylist ( );
__declspec(implementation_key(703)) _bstr_t IWMPNowDoingDispatch::GetbasketPlaylistName ( );
__declspec(implementation_key(704)) VARIANT_BOOL IWMPNowDoingDispatch::GetisHighContrastMode ( );
__declspec(implementation_key(705)) VARIANT_BOOL IWMPNowDoingDispatch::GetallowRating ( );
__declspec(implementation_key(706)) VARIANT_BOOL IWMPNowDoingDispatch::GetallowShop ( );
__declspec(implementation_key(707)) _bstr_t IWMPNowDoingDispatch::Getburn_mediaType ( );
__declspec(implementation_key(708)) _bstr_t IWMPNowDoingDispatch::Getburn_contentType ( );
__declspec(implementation_key(709)) long IWMPNowDoingDispatch::Getburn_freeSpace ( );
__declspec(implementation_key(710)) long IWMPNowDoingDispatch::Getburn_totalSpace ( );
__declspec(implementation_key(711)) _bstr_t IWMPNowDoingDispatch::Getburn_driveName ( );
__declspec(implementation_key(712)) long IWMPNowDoingDispatch::Getburn_numDevices ( );
__declspec(implementation_key(713)) long IWMPNowDoingDispatch::Getburn_spaceToUse ( );
__declspec(implementation_key(714)) long IWMPNowDoingDispatch::Getburn_percentComplete ( );
__declspec(implementation_key(715)) long IWMPNowDoingDispatch::Getsync_spaceToUse ( );
__declspec(implementation_key(716)) long IWMPNowDoingDispatch::Getsync_spaceUsed ( );
__declspec(implementation_key(717)) long IWMPNowDoingDispatch::Getsync_totalSpace ( );
__declspec(implementation_key(718)) _bstr_t IWMPNowDoingDispatch::Getsync_deviceName ( );
__declspec(implementation_key(719)) long IWMPNowDoingDispatch::Getsync_numDevices ( );
__declspec(implementation_key(720)) _bstr_t IWMPNowDoingDispatch::Getsync_oemName ( );
__declspec(implementation_key(721)) long IWMPNowDoingDispatch::Getsync_percentComplete ( );
__declspec(implementation_key(722)) HRESULT IWMPNowDoingDispatch::logData ( _bstr_t ID, _bstr_t data );
__declspec(implementation_key(723)) _bstr_t IWMPNowDoingDispatch::formatTime ( long value );
__declspec(implementation_key(724)) _bstr_t IWMPHoverPreviewDispatch::Gettitle ( );
__declspec(implementation_key(725)) _bstr_t IWMPHoverPreviewDispatch::Getalbum ( );
__declspec(implementation_key(726)) _bstr_t IWMPHoverPreviewDispatch::GetURL ( );
__declspec(implementation_key(727)) void IWMPHoverPreviewDispatch::Putimage ( IDispatch * _arg1 );
__declspec(implementation_key(728)) void IWMPHoverPreviewDispatch::PutautoClick ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(729)) void IWMPHoverPreviewDispatch::PutpreviewClick ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(730)) HRESULT IWMPHoverPreviewDispatch::dismiss ( );
__declspec(implementation_key(731)) HRESULT IWMPButtonCtrlEvents::onclick ( );
__declspec(implementation_key(732)) _bstr_t IWMPButtonCtrl::Getimage ( );
__declspec(implementation_key(733)) void IWMPButtonCtrl::Putimage ( _bstr_t pVal );
__declspec(implementation_key(734)) _bstr_t IWMPButtonCtrl::GethoverImage ( );
__declspec(implementation_key(735)) void IWMPButtonCtrl::PuthoverImage ( _bstr_t pVal );
__declspec(implementation_key(736)) _bstr_t IWMPButtonCtrl::GetdownImage ( );
__declspec(implementation_key(737)) void IWMPButtonCtrl::PutdownImage ( _bstr_t pVal );
__declspec(implementation_key(738)) _bstr_t IWMPButtonCtrl::GetdisabledImage ( );
__declspec(implementation_key(739)) void IWMPButtonCtrl::PutdisabledImage ( _bstr_t pVal );
__declspec(implementation_key(740)) _bstr_t IWMPButtonCtrl::GethoverDownImage ( );
__declspec(implementation_key(741)) void IWMPButtonCtrl::PuthoverDownImage ( _bstr_t pVal );
__declspec(implementation_key(742)) VARIANT_BOOL IWMPButtonCtrl::Gettiled ( );
__declspec(implementation_key(743)) void IWMPButtonCtrl::Puttiled ( VARIANT_BOOL pVal );
__declspec(implementation_key(744)) _bstr_t IWMPButtonCtrl::GettransparencyColor ( );
__declspec(implementation_key(745)) void IWMPButtonCtrl::PuttransparencyColor ( _bstr_t pVal );
__declspec(implementation_key(746)) VARIANT_BOOL IWMPButtonCtrl::Getdown ( );
__declspec(implementation_key(747)) void IWMPButtonCtrl::Putdown ( VARIANT_BOOL pVal );
__declspec(implementation_key(748)) VARIANT_BOOL IWMPButtonCtrl::Getsticky ( );
__declspec(implementation_key(749)) void IWMPButtonCtrl::Putsticky ( VARIANT_BOOL pVal );
__declspec(implementation_key(750)) _bstr_t IWMPButtonCtrl::GetupToolTip ( );
__declspec(implementation_key(751)) void IWMPButtonCtrl::PutupToolTip ( _bstr_t pVal );
__declspec(implementation_key(752)) _bstr_t IWMPButtonCtrl::GetdownToolTip ( );
__declspec(implementation_key(753)) void IWMPButtonCtrl::PutdownToolTip ( _bstr_t pVal );
__declspec(implementation_key(754)) _bstr_t IWMPButtonCtrl::Getcursor ( );
__declspec(implementation_key(755)) void IWMPButtonCtrl::Putcursor ( _bstr_t pVal );
__declspec(implementation_key(756)) long IWMPListBoxCtrl::GetselectedItem ( );
__declspec(implementation_key(757)) void IWMPListBoxCtrl::PutselectedItem ( long pnPos );
__declspec(implementation_key(758)) VARIANT_BOOL IWMPListBoxCtrl::Getsorted ( );
__declspec(implementation_key(759)) void IWMPListBoxCtrl::Putsorted ( VARIANT_BOOL pVal );
__declspec(implementation_key(760)) VARIANT_BOOL IWMPListBoxCtrl::Getmultiselect ( );
__declspec(implementation_key(761)) void IWMPListBoxCtrl::Putmultiselect ( VARIANT_BOOL pVal );
__declspec(implementation_key(762)) VARIANT_BOOL IWMPListBoxCtrl::GetreadOnly ( );
__declspec(implementation_key(763)) void IWMPListBoxCtrl::PutreadOnly ( VARIANT_BOOL pVal );
__declspec(implementation_key(764)) _bstr_t IWMPListBoxCtrl::GetforegroundColor ( );
__declspec(implementation_key(765)) void IWMPListBoxCtrl::PutforegroundColor ( _bstr_t pVal );
__declspec(implementation_key(766)) _bstr_t IWMPListBoxCtrl::GetbackgroundColor ( );
__declspec(implementation_key(767)) void IWMPListBoxCtrl::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(768)) long IWMPListBoxCtrl::GetfontSize ( );
__declspec(implementation_key(769)) void IWMPListBoxCtrl::PutfontSize ( long pVal );
__declspec(implementation_key(770)) _bstr_t IWMPListBoxCtrl::GetfontStyle ( );
__declspec(implementation_key(771)) void IWMPListBoxCtrl::PutfontStyle ( _bstr_t pVal );
__declspec(implementation_key(772)) _bstr_t IWMPListBoxCtrl::GetfontFace ( );
__declspec(implementation_key(773)) void IWMPListBoxCtrl::PutfontFace ( _bstr_t pVal );
__declspec(implementation_key(774)) long IWMPListBoxCtrl::GetitemCount ( );
__declspec(implementation_key(775)) long IWMPListBoxCtrl::GetfirstVisibleItem ( );
__declspec(implementation_key(776)) void IWMPListBoxCtrl::PutfirstVisibleItem ( long pVal );
__declspec(implementation_key(777)) void IWMPListBoxCtrl::PutpopUp ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(778)) long IWMPListBoxCtrl::GetfocusItem ( );
__declspec(implementation_key(779)) void IWMPListBoxCtrl::PutfocusItem ( long pVal );
__declspec(implementation_key(780)) VARIANT_BOOL IWMPListBoxCtrl::Getborder ( );
__declspec(implementation_key(781)) void IWMPListBoxCtrl::Putborder ( VARIANT_BOOL pVal );
__declspec(implementation_key(782)) _bstr_t IWMPListBoxCtrl::getItem ( long nPos );
__declspec(implementation_key(783)) HRESULT IWMPListBoxCtrl::insertItem ( long nPos, _bstr_t newVal );
__declspec(implementation_key(784)) HRESULT IWMPListBoxCtrl::appendItem ( _bstr_t newVal );
__declspec(implementation_key(785)) HRESULT IWMPListBoxCtrl::replaceItem ( long nPos, _bstr_t newVal );
__declspec(implementation_key(786)) HRESULT IWMPListBoxCtrl::deleteItem ( long nPos );
__declspec(implementation_key(787)) HRESULT IWMPListBoxCtrl::deleteAll ( );
__declspec(implementation_key(788)) long IWMPListBoxCtrl::findItem ( long nStartIndex, _bstr_t newVal );
__declspec(implementation_key(789)) long IWMPListBoxCtrl::getNextSelectedItem ( long nStartIndex );
__declspec(implementation_key(790)) HRESULT IWMPListBoxCtrl::setSelectedState ( long nPos, VARIANT_BOOL vbSelected );
__declspec(implementation_key(791)) HRESULT IWMPListBoxCtrl::show ( );
__declspec(implementation_key(792)) HRESULT IWMPListBoxCtrl::dismiss ( );
__declspec(implementation_key(793)) void IWMPListBoxItem::Putvalue ( _bstr_t _arg1 );
__declspec(implementation_key(794)) _bstr_t IWMPPlaylistCtrlColumn::GetcolumnName ( );
__declspec(implementation_key(795)) void IWMPPlaylistCtrlColumn::PutcolumnName ( _bstr_t pVal );
__declspec(implementation_key(796)) _bstr_t IWMPPlaylistCtrlColumn::GetcolumnID ( );
__declspec(implementation_key(797)) void IWMPPlaylistCtrlColumn::PutcolumnID ( _bstr_t pVal );
__declspec(implementation_key(798)) _bstr_t IWMPPlaylistCtrlColumn::GetcolumnResizeMode ( );
__declspec(implementation_key(799)) void IWMPPlaylistCtrlColumn::PutcolumnResizeMode ( _bstr_t pVal );
__declspec(implementation_key(800)) long IWMPPlaylistCtrlColumn::GetcolumnWidth ( );
__declspec(implementation_key(801)) void IWMPPlaylistCtrlColumn::PutcolumnWidth ( long pVal );
__declspec(implementation_key(802)) HRESULT IWMPSliderCtrlEvents::ondragbegin ( );
__declspec(implementation_key(803)) HRESULT IWMPSliderCtrlEvents::ondragend ( );
__declspec(implementation_key(804)) HRESULT IWMPSliderCtrlEvents::onpositionchange ( );
__declspec(implementation_key(805)) _bstr_t IWMPSliderCtrl::Getdirection ( );
__declspec(implementation_key(806)) void IWMPSliderCtrl::Putdirection ( _bstr_t pVal );
__declspec(implementation_key(807)) VARIANT_BOOL IWMPSliderCtrl::Getslide ( );
__declspec(implementation_key(808)) void IWMPSliderCtrl::Putslide ( VARIANT_BOOL pVal );
__declspec(implementation_key(809)) VARIANT_BOOL IWMPSliderCtrl::Gettiled ( );
__declspec(implementation_key(810)) void IWMPSliderCtrl::Puttiled ( VARIANT_BOOL pVal );
__declspec(implementation_key(811)) _bstr_t IWMPSliderCtrl::GetforegroundColor ( );
__declspec(implementation_key(812)) void IWMPSliderCtrl::PutforegroundColor ( _bstr_t pVal );
__declspec(implementation_key(813)) _bstr_t IWMPSliderCtrl::GetforegroundEndColor ( );
__declspec(implementation_key(814)) void IWMPSliderCtrl::PutforegroundEndColor ( _bstr_t pVal );
__declspec(implementation_key(815)) _bstr_t IWMPSliderCtrl::GetbackgroundColor ( );
__declspec(implementation_key(816)) void IWMPSliderCtrl::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(817)) _bstr_t IWMPSliderCtrl::GetbackgroundEndColor ( );
__declspec(implementation_key(818)) void IWMPSliderCtrl::PutbackgroundEndColor ( _bstr_t pVal );
__declspec(implementation_key(819)) _bstr_t IWMPSliderCtrl::GetdisabledColor ( );
__declspec(implementation_key(820)) void IWMPSliderCtrl::PutdisabledColor ( _bstr_t pVal );
__declspec(implementation_key(821)) _bstr_t IWMPSliderCtrl::GettransparencyColor ( );
__declspec(implementation_key(822)) void IWMPSliderCtrl::PuttransparencyColor ( _bstr_t pVal );
__declspec(implementation_key(823)) _bstr_t IWMPSliderCtrl::GetforegroundImage ( );
__declspec(implementation_key(824)) void IWMPSliderCtrl::PutforegroundImage ( _bstr_t pVal );
__declspec(implementation_key(825)) _bstr_t IWMPSliderCtrl::GetbackgroundImage ( );
__declspec(implementation_key(826)) void IWMPSliderCtrl::PutbackgroundImage ( _bstr_t pVal );
__declspec(implementation_key(827)) _bstr_t IWMPSliderCtrl::GetbackgroundHoverImage ( );
__declspec(implementation_key(828)) void IWMPSliderCtrl::PutbackgroundHoverImage ( _bstr_t pVal );
__declspec(implementation_key(829)) _bstr_t IWMPSliderCtrl::GetdisabledImage ( );
__declspec(implementation_key(830)) void IWMPSliderCtrl::PutdisabledImage ( _bstr_t pVal );
__declspec(implementation_key(831)) _bstr_t IWMPSliderCtrl::GetthumbImage ( );
__declspec(implementation_key(832)) void IWMPSliderCtrl::PutthumbImage ( _bstr_t pVal );
__declspec(implementation_key(833)) _bstr_t IWMPSliderCtrl::GetthumbHoverImage ( );
__declspec(implementation_key(834)) void IWMPSliderCtrl::PutthumbHoverImage ( _bstr_t pVal );
__declspec(implementation_key(835)) _bstr_t IWMPSliderCtrl::GetthumbDownImage ( );
__declspec(implementation_key(836)) void IWMPSliderCtrl::PutthumbDownImage ( _bstr_t pVal );
__declspec(implementation_key(837)) _bstr_t IWMPSliderCtrl::GetthumbDisabledImage ( );
__declspec(implementation_key(838)) void IWMPSliderCtrl::PutthumbDisabledImage ( _bstr_t pVal );
__declspec(implementation_key(839)) float IWMPSliderCtrl::Getmin ( );
__declspec(implementation_key(840)) void IWMPSliderCtrl::Putmin ( float pVal );
__declspec(implementation_key(841)) float IWMPSliderCtrl::Getmax ( );
__declspec(implementation_key(842)) void IWMPSliderCtrl::Putmax ( float pVal );
__declspec(implementation_key(843)) float IWMPSliderCtrl::Getvalue ( );
__declspec(implementation_key(844)) void IWMPSliderCtrl::Putvalue ( float pVal );
__declspec(implementation_key(845)) _bstr_t IWMPSliderCtrl::GettoolTip ( );
__declspec(implementation_key(846)) void IWMPSliderCtrl::PuttoolTip ( _bstr_t pVal );
__declspec(implementation_key(847)) _bstr_t IWMPSliderCtrl::Getcursor ( );
__declspec(implementation_key(848)) void IWMPSliderCtrl::Putcursor ( _bstr_t pVal );
__declspec(implementation_key(849)) int IWMPSliderCtrl::GetborderSize ( );
__declspec(implementation_key(850)) void IWMPSliderCtrl::PutborderSize ( int pVal );
__declspec(implementation_key(851)) _bstr_t IWMPSliderCtrl::GetforegroundHoverImage ( );
__declspec(implementation_key(852)) void IWMPSliderCtrl::PutforegroundHoverImage ( _bstr_t pVal );
__declspec(implementation_key(853)) float IWMPSliderCtrl::GetforegroundProgress ( );
__declspec(implementation_key(854)) void IWMPSliderCtrl::PutforegroundProgress ( float pVal );
__declspec(implementation_key(855)) VARIANT_BOOL IWMPSliderCtrl::GetuseForegroundProgress ( );
__declspec(implementation_key(856)) void IWMPSliderCtrl::PutuseForegroundProgress ( VARIANT_BOOL pVal );
__declspec(implementation_key(857)) HRESULT IWMPVideoCtrlEvents::onvideostart ( );
__declspec(implementation_key(858)) HRESULT IWMPVideoCtrlEvents::onvideoend ( );
__declspec(implementation_key(859)) void IWMPVideoCtrl::Putwindowless ( VARIANT_BOOL pbClipped );
__declspec(implementation_key(860)) VARIANT_BOOL IWMPVideoCtrl::Getwindowless ( );
__declspec(implementation_key(861)) void IWMPVideoCtrl::Putcursor ( _bstr_t pbstrCursor );
__declspec(implementation_key(862)) _bstr_t IWMPVideoCtrl::Getcursor ( );
__declspec(implementation_key(863)) void IWMPVideoCtrl::PutbackgroundColor ( _bstr_t pbstrColor );
__declspec(implementation_key(864)) _bstr_t IWMPVideoCtrl::GetbackgroundColor ( );
__declspec(implementation_key(865)) void IWMPVideoCtrl::PutmaintainAspectRatio ( VARIANT_BOOL pbMaintainAspectRatio );
__declspec(implementation_key(866)) VARIANT_BOOL IWMPVideoCtrl::GetmaintainAspectRatio ( );
__declspec(implementation_key(867)) void IWMPVideoCtrl::PuttoolTip ( _bstr_t bstrToolTip );
__declspec(implementation_key(868)) _bstr_t IWMPVideoCtrl::GettoolTip ( );
__declspec(implementation_key(869)) VARIANT_BOOL IWMPVideoCtrl::GetfullScreen ( );
__declspec(implementation_key(870)) void IWMPVideoCtrl::PutfullScreen ( VARIANT_BOOL pbFullScreen );
__declspec(implementation_key(871)) void IWMPVideoCtrl::PutshrinkToFit ( VARIANT_BOOL pbShrinkToFit );
__declspec(implementation_key(872)) VARIANT_BOOL IWMPVideoCtrl::GetshrinkToFit ( );
__declspec(implementation_key(873)) void IWMPVideoCtrl::PutstretchToFit ( VARIANT_BOOL pbStretchToFit );
__declspec(implementation_key(874)) VARIANT_BOOL IWMPVideoCtrl::GetstretchToFit ( );
__declspec(implementation_key(875)) void IWMPVideoCtrl::Putzoom ( long pzoom );
__declspec(implementation_key(876)) long IWMPVideoCtrl::Getzoom ( );
__declspec(implementation_key(877)) VARIANT_BOOL IWMPEffectsCtrl::Getwindowed ( );
__declspec(implementation_key(878)) void IWMPEffectsCtrl::Putwindowed ( VARIANT_BOOL pVal );
__declspec(implementation_key(879)) VARIANT_BOOL IWMPEffectsCtrl::GetallowAll ( );
__declspec(implementation_key(880)) void IWMPEffectsCtrl::PutallowAll ( VARIANT_BOOL pVal );
__declspec(implementation_key(881)) void IWMPEffectsCtrl::PutcurrentEffectType ( _bstr_t pVal );
__declspec(implementation_key(882)) _bstr_t IWMPEffectsCtrl::GetcurrentEffectType ( );
__declspec(implementation_key(883)) _bstr_t IWMPEffectsCtrl::GetcurrentEffectTitle ( );
__declspec(implementation_key(884)) HRESULT IWMPEffectsCtrl::next ( );
__declspec(implementation_key(885)) HRESULT IWMPEffectsCtrl::previous ( );
__declspec(implementation_key(886)) HRESULT IWMPEffectsCtrl::settings ( );
__declspec(implementation_key(887)) IDispatchPtr IWMPEffectsCtrl::GetcurrentEffect ( );
__declspec(implementation_key(888)) void IWMPEffectsCtrl::PutcurrentEffect ( IDispatch * p );
__declspec(implementation_key(889)) HRESULT IWMPEffectsCtrl::nextEffect ( );
__declspec(implementation_key(890)) HRESULT IWMPEffectsCtrl::previousEffect ( );
__declspec(implementation_key(891)) HRESULT IWMPEffectsCtrl::nextPreset ( );
__declspec(implementation_key(892)) HRESULT IWMPEffectsCtrl::previousPreset ( );
__declspec(implementation_key(893)) long IWMPEffectsCtrl::GetcurrentPreset ( );
__declspec(implementation_key(894)) void IWMPEffectsCtrl::PutcurrentPreset ( long pVal );
__declspec(implementation_key(895)) _bstr_t IWMPEffectsCtrl::GetcurrentPresetTitle ( );
__declspec(implementation_key(896)) long IWMPEffectsCtrl::GetcurrentEffectPresetCount ( );
__declspec(implementation_key(897)) VARIANT_BOOL IWMPEffectsCtrl::GetfullScreen ( );
__declspec(implementation_key(898)) void IWMPEffectsCtrl::PutfullScreen ( VARIANT_BOOL pbFullScreen );
__declspec(implementation_key(899)) VARIANT_BOOL IWMPEffectsCtrl::GeteffectCanGoFullScreen ( );
__declspec(implementation_key(900)) VARIANT_BOOL IWMPEffectsCtrl::GeteffectHasPropertyPage ( );
__declspec(implementation_key(901)) long IWMPEffectsCtrl::GeteffectCount ( );
__declspec(implementation_key(902)) _bstr_t IWMPEffectsCtrl::GeteffectTitle ( long index );
__declspec(implementation_key(903)) _bstr_t IWMPEffectsCtrl::GeteffectType ( long index );
__declspec(implementation_key(904)) VARIANT_BOOL IWMPEqualizerSettingsCtrl::Getbypass ( );
__declspec(implementation_key(905)) void IWMPEqualizerSettingsCtrl::Putbypass ( VARIANT_BOOL pVal );
__declspec(implementation_key(906)) float IWMPEqualizerSettingsCtrl::GetgainLevel1 ( );
__declspec(implementation_key(907)) void IWMPEqualizerSettingsCtrl::PutgainLevel1 ( float pflLevel );
__declspec(implementation_key(908)) float IWMPEqualizerSettingsCtrl::GetgainLevel2 ( );
__declspec(implementation_key(909)) void IWMPEqualizerSettingsCtrl::PutgainLevel2 ( float pflLevel );
__declspec(implementation_key(910)) float IWMPEqualizerSettingsCtrl::GetgainLevel3 ( );
__declspec(implementation_key(911)) void IWMPEqualizerSettingsCtrl::PutgainLevel3 ( float pflLevel );
__declspec(implementation_key(912)) float IWMPEqualizerSettingsCtrl::GetgainLevel4 ( );
__declspec(implementation_key(913)) void IWMPEqualizerSettingsCtrl::PutgainLevel4 ( float pflLevel );
__declspec(implementation_key(914)) float IWMPEqualizerSettingsCtrl::GetgainLevel5 ( );
__declspec(implementation_key(915)) void IWMPEqualizerSettingsCtrl::PutgainLevel5 ( float pflLevel );
__declspec(implementation_key(916)) float IWMPEqualizerSettingsCtrl::GetgainLevel6 ( );
__declspec(implementation_key(917)) void IWMPEqualizerSettingsCtrl::PutgainLevel6 ( float pflLevel );
__declspec(implementation_key(918)) float IWMPEqualizerSettingsCtrl::GetgainLevel7 ( );
__declspec(implementation_key(919)) void IWMPEqualizerSettingsCtrl::PutgainLevel7 ( float pflLevel );
__declspec(implementation_key(920)) float IWMPEqualizerSettingsCtrl::GetgainLevel8 ( );
__declspec(implementation_key(921)) void IWMPEqualizerSettingsCtrl::PutgainLevel8 ( float pflLevel );
__declspec(implementation_key(922)) float IWMPEqualizerSettingsCtrl::GetgainLevel9 ( );
__declspec(implementation_key(923)) void IWMPEqualizerSettingsCtrl::PutgainLevel9 ( float pflLevel );
__declspec(implementation_key(924)) float IWMPEqualizerSettingsCtrl::GetgainLevel10 ( );
__declspec(implementation_key(925)) void IWMPEqualizerSettingsCtrl::PutgainLevel10 ( float pflLevel );
__declspec(implementation_key(926)) float IWMPEqualizerSettingsCtrl::GetgainLevels ( long iIndex );
__declspec(implementation_key(927)) void IWMPEqualizerSettingsCtrl::PutgainLevels ( long iIndex, float pflLevel );
__declspec(implementation_key(928)) HRESULT IWMPEqualizerSettingsCtrl::reset ( );
__declspec(implementation_key(929)) long IWMPEqualizerSettingsCtrl::Getbands ( );
__declspec(implementation_key(930)) HRESULT IWMPEqualizerSettingsCtrl::nextPreset ( );
__declspec(implementation_key(931)) HRESULT IWMPEqualizerSettingsCtrl::previousPreset ( );
__declspec(implementation_key(932)) long IWMPEqualizerSettingsCtrl::GetcurrentPreset ( );
__declspec(implementation_key(933)) void IWMPEqualizerSettingsCtrl::PutcurrentPreset ( long pVal );
__declspec(implementation_key(934)) _bstr_t IWMPEqualizerSettingsCtrl::GetcurrentPresetTitle ( );
__declspec(implementation_key(935)) long IWMPEqualizerSettingsCtrl::GetpresetCount ( );
__declspec(implementation_key(936)) VARIANT_BOOL IWMPEqualizerSettingsCtrl::GetenhancedAudio ( );
__declspec(implementation_key(937)) void IWMPEqualizerSettingsCtrl::PutenhancedAudio ( VARIANT_BOOL pfVal );
__declspec(implementation_key(938)) long IWMPEqualizerSettingsCtrl::GetspeakerSize ( );
__declspec(implementation_key(939)) void IWMPEqualizerSettingsCtrl::PutspeakerSize ( long plVal );
__declspec(implementation_key(940)) _bstr_t IWMPEqualizerSettingsCtrl::GetcurrentSpeakerName ( );
__declspec(implementation_key(941)) long IWMPEqualizerSettingsCtrl::GettruBassLevel ( );
__declspec(implementation_key(942)) void IWMPEqualizerSettingsCtrl::PuttruBassLevel ( long plTruBassLevel );
__declspec(implementation_key(943)) long IWMPEqualizerSettingsCtrl::GetwowLevel ( );
__declspec(implementation_key(944)) void IWMPEqualizerSettingsCtrl::PutwowLevel ( long plWowLevel );
__declspec(implementation_key(945)) float IWMPEqualizerSettingsCtrl::GetsplineTension ( );
__declspec(implementation_key(946)) void IWMPEqualizerSettingsCtrl::PutsplineTension ( float pflSplineTension );
__declspec(implementation_key(947)) VARIANT_BOOL IWMPEqualizerSettingsCtrl::GetenableSplineTension ( );
__declspec(implementation_key(948)) void IWMPEqualizerSettingsCtrl::PutenableSplineTension ( VARIANT_BOOL pfEnableSplineTension );
__declspec(implementation_key(949)) _bstr_t IWMPEqualizerSettingsCtrl::GetpresetTitle ( long iIndex );
__declspec(implementation_key(950)) VARIANT_BOOL IWMPEqualizerSettingsCtrl::Getnormalization ( );
__declspec(implementation_key(951)) void IWMPEqualizerSettingsCtrl::Putnormalization ( VARIANT_BOOL pfVal );
__declspec(implementation_key(952)) float IWMPEqualizerSettingsCtrl::GetnormalizationAverage ( );
__declspec(implementation_key(953)) float IWMPEqualizerSettingsCtrl::GetnormalizationPeak ( );
__declspec(implementation_key(954)) VARIANT_BOOL IWMPEqualizerSettingsCtrl::GetcrossFade ( );
__declspec(implementation_key(955)) void IWMPEqualizerSettingsCtrl::PutcrossFade ( VARIANT_BOOL pfVal );
__declspec(implementation_key(956)) long IWMPEqualizerSettingsCtrl::GetcrossFadeWindow ( );
__declspec(implementation_key(957)) void IWMPEqualizerSettingsCtrl::PutcrossFadeWindow ( long plWindow );
__declspec(implementation_key(958)) long IWMPVideoSettingsCtrl::Getbrightness ( );
__declspec(implementation_key(959)) void IWMPVideoSettingsCtrl::Putbrightness ( long pVal );
__declspec(implementation_key(960)) long IWMPVideoSettingsCtrl::Getcontrast ( );
__declspec(implementation_key(961)) void IWMPVideoSettingsCtrl::Putcontrast ( long pVal );
__declspec(implementation_key(962)) long IWMPVideoSettingsCtrl::Gethue ( );
__declspec(implementation_key(963)) void IWMPVideoSettingsCtrl::Puthue ( long pVal );
__declspec(implementation_key(964)) long IWMPVideoSettingsCtrl::Getsaturation ( );
__declspec(implementation_key(965)) void IWMPVideoSettingsCtrl::Putsaturation ( long pVal );
__declspec(implementation_key(966)) HRESULT IWMPVideoSettingsCtrl::reset ( );
__declspec(implementation_key(967)) HRESULT IWMPDolbyDigitalSettingsCtrl::reset ( );
__declspec(implementation_key(968)) long IWMPDolbyDigitalSettingsCtrl::GetcurrentPreset ( );
__declspec(implementation_key(969)) void IWMPDolbyDigitalSettingsCtrl::PutcurrentPreset ( long plCurrentPreset );
__declspec(implementation_key(970)) _bstr_t IWMPEditCtrl::Getvalue ( );
__declspec(implementation_key(971)) void IWMPEditCtrl::Putvalue ( _bstr_t pVal );
__declspec(implementation_key(972)) VARIANT_BOOL IWMPEditCtrl::Getborder ( );
__declspec(implementation_key(973)) void IWMPEditCtrl::Putborder ( VARIANT_BOOL pVal );
__declspec(implementation_key(974)) _bstr_t IWMPEditCtrl::Getjustification ( );
__declspec(implementation_key(975)) void IWMPEditCtrl::Putjustification ( _bstr_t pVal );
__declspec(implementation_key(976)) _bstr_t IWMPEditCtrl::GeteditStyle ( );
__declspec(implementation_key(977)) void IWMPEditCtrl::PuteditStyle ( _bstr_t pVal );
__declspec(implementation_key(978)) VARIANT_BOOL IWMPEditCtrl::GetwordWrap ( );
__declspec(implementation_key(979)) void IWMPEditCtrl::PutwordWrap ( VARIANT_BOOL pVal );
__declspec(implementation_key(980)) VARIANT_BOOL IWMPEditCtrl::GetreadOnly ( );
__declspec(implementation_key(981)) void IWMPEditCtrl::PutreadOnly ( VARIANT_BOOL pVal );
__declspec(implementation_key(982)) _bstr_t IWMPEditCtrl::GetforegroundColor ( );
__declspec(implementation_key(983)) void IWMPEditCtrl::PutforegroundColor ( _bstr_t pVal );
__declspec(implementation_key(984)) _bstr_t IWMPEditCtrl::GetbackgroundColor ( );
__declspec(implementation_key(985)) void IWMPEditCtrl::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(986)) long IWMPEditCtrl::GetfontSize ( );
__declspec(implementation_key(987)) void IWMPEditCtrl::PutfontSize ( long pVal );
__declspec(implementation_key(988)) _bstr_t IWMPEditCtrl::GetfontStyle ( );
__declspec(implementation_key(989)) void IWMPEditCtrl::PutfontStyle ( _bstr_t pVal );
__declspec(implementation_key(990)) _bstr_t IWMPEditCtrl::GetfontFace ( );
__declspec(implementation_key(991)) void IWMPEditCtrl::PutfontFace ( _bstr_t pVal );
__declspec(implementation_key(992)) long IWMPEditCtrl::GettextLimit ( );
__declspec(implementation_key(993)) void IWMPEditCtrl::PuttextLimit ( long pVal );
__declspec(implementation_key(994)) long IWMPEditCtrl::GetlineCount ( );
__declspec(implementation_key(995)) _bstr_t IWMPEditCtrl::getLine ( long nIndex );
__declspec(implementation_key(996)) long IWMPEditCtrl::getSelectionStart ( );
__declspec(implementation_key(997)) long IWMPEditCtrl::getSelectionEnd ( );
__declspec(implementation_key(998)) HRESULT IWMPEditCtrl::setSelection ( long nStart, long nEnd );
__declspec(implementation_key(999)) HRESULT IWMPEditCtrl::replaceSelection ( _bstr_t newVal );
__declspec(implementation_key(1000)) long IWMPEditCtrl::getLineIndex ( long nIndex );
__declspec(implementation_key(1001)) long IWMPEditCtrl::getLineFromChar ( long nPosition );
__declspec(implementation_key(1002)) HRESULT IWMPSkinList::updateBasketColumns ( );
__declspec(implementation_key(1003)) HRESULT IWMPSkinList::highContrastChange ( );
__declspec(implementation_key(1004)) _bstr_t IWMPPluginUIHost::GetbackgroundColor ( );
__declspec(implementation_key(1005)) void IWMPPluginUIHost::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1006)) _bstr_t IWMPPluginUIHost::GetobjectID ( );
__declspec(implementation_key(1007)) void IWMPPluginUIHost::PutobjectID ( _bstr_t pVal );
__declspec(implementation_key(1008)) _variant_t IWMPPluginUIHost::getProperty ( _bstr_t bstrName );
__declspec(implementation_key(1009)) HRESULT IWMPPluginUIHost::setProperty ( _bstr_t bstrName, const _variant_t & newVal );
__declspec(implementation_key(1010)) HRESULT IWMPMenuCtrl::deleteAllItems ( );
__declspec(implementation_key(1011)) HRESULT IWMPMenuCtrl::appendItem ( long nID, _bstr_t bstrItem );
__declspec(implementation_key(1012)) HRESULT IWMPMenuCtrl::appendSeparator ( );
__declspec(implementation_key(1013)) HRESULT IWMPMenuCtrl::enableItem ( long nID, VARIANT_BOOL newVal );
__declspec(implementation_key(1014)) HRESULT IWMPMenuCtrl::checkItem ( long nID, VARIANT_BOOL newVal );
__declspec(implementation_key(1015)) HRESULT IWMPMenuCtrl::checkRadioItem ( long nID, VARIANT_BOOL newVal );
__declspec(implementation_key(1016)) long IWMPMenuCtrl::GetshowFlags ( );
__declspec(implementation_key(1017)) void IWMPMenuCtrl::PutshowFlags ( long pVal );
__declspec(implementation_key(1018)) long IWMPMenuCtrl::show ( );
__declspec(implementation_key(1019)) HRESULT IWMPMenuCtrl::showEx ( long nID );
__declspec(implementation_key(1020)) HRESULT IWMPAutoMenuCtrl::show ( _bstr_t newVal );
__declspec(implementation_key(1021)) _bstr_t IWMPRegionalButtonCtrl::Getimage ( );
__declspec(implementation_key(1022)) void IWMPRegionalButtonCtrl::Putimage ( _bstr_t pVal );
__declspec(implementation_key(1023)) _bstr_t IWMPRegionalButtonCtrl::GethoverImage ( );
__declspec(implementation_key(1024)) void IWMPRegionalButtonCtrl::PuthoverImage ( _bstr_t pVal );
__declspec(implementation_key(1025)) _bstr_t IWMPRegionalButtonCtrl::GetdownImage ( );
__declspec(implementation_key(1026)) void IWMPRegionalButtonCtrl::PutdownImage ( _bstr_t pVal );
__declspec(implementation_key(1027)) _bstr_t IWMPRegionalButtonCtrl::GethoverDownImage ( );
__declspec(implementation_key(1028)) void IWMPRegionalButtonCtrl::PuthoverDownImage ( _bstr_t pVal );
__declspec(implementation_key(1029)) _bstr_t IWMPRegionalButtonCtrl::GethoverHoverImage ( );
__declspec(implementation_key(1030)) void IWMPRegionalButtonCtrl::PuthoverHoverImage ( _bstr_t pVal );
__declspec(implementation_key(1031)) _bstr_t IWMPRegionalButtonCtrl::GetdisabledImage ( );
__declspec(implementation_key(1032)) void IWMPRegionalButtonCtrl::PutdisabledImage ( _bstr_t pVal );
__declspec(implementation_key(1033)) _bstr_t IWMPRegionalButtonCtrl::GetmappingImage ( );
__declspec(implementation_key(1034)) void IWMPRegionalButtonCtrl::PutmappingImage ( _bstr_t pVal );
__declspec(implementation_key(1035)) _bstr_t IWMPRegionalButtonCtrl::GettransparencyColor ( );
__declspec(implementation_key(1036)) void IWMPRegionalButtonCtrl::PuttransparencyColor ( _bstr_t pVal );
__declspec(implementation_key(1037)) _bstr_t IWMPRegionalButtonCtrl::Getcursor ( );
__declspec(implementation_key(1038)) void IWMPRegionalButtonCtrl::Putcursor ( _bstr_t pVal );
__declspec(implementation_key(1039)) VARIANT_BOOL IWMPRegionalButtonCtrl::GetshowBackground ( );
__declspec(implementation_key(1040)) void IWMPRegionalButtonCtrl::PutshowBackground ( VARIANT_BOOL pVal );
__declspec(implementation_key(1041)) VARIANT_BOOL IWMPRegionalButtonCtrl::Getradio ( );
__declspec(implementation_key(1042)) void IWMPRegionalButtonCtrl::Putradio ( VARIANT_BOOL pVal );
__declspec(implementation_key(1043)) long IWMPRegionalButtonCtrl::GetbuttonCount ( );
__declspec(implementation_key(1044)) IDispatchPtr IWMPRegionalButtonCtrl::createButton ( );
__declspec(implementation_key(1045)) IDispatchPtr IWMPRegionalButtonCtrl::getButton ( long nButton );
__declspec(implementation_key(1046)) HRESULT IWMPRegionalButtonCtrl::Click ( long nButton );
__declspec(implementation_key(1047)) float IWMPRegionalButtonCtrl::GethueShift ( );
__declspec(implementation_key(1048)) void IWMPRegionalButtonCtrl::PuthueShift ( float pVal );
__declspec(implementation_key(1049)) float IWMPRegionalButtonCtrl::Getsaturation ( );
__declspec(implementation_key(1050)) void IWMPRegionalButtonCtrl::Putsaturation ( float pVal );
__declspec(implementation_key(1051)) HRESULT IWMPRegionalButtonEvents::onblur ( );
__declspec(implementation_key(1052)) HRESULT IWMPRegionalButtonEvents::onfocus ( );
__declspec(implementation_key(1053)) HRESULT IWMPRegionalButtonEvents::onclick ( );
__declspec(implementation_key(1054)) HRESULT IWMPRegionalButtonEvents::ondblclick ( );
__declspec(implementation_key(1055)) HRESULT IWMPRegionalButtonEvents::onmousedown ( );
__declspec(implementation_key(1056)) HRESULT IWMPRegionalButtonEvents::onmouseup ( );
__declspec(implementation_key(1057)) HRESULT IWMPRegionalButtonEvents::onmousemove ( );
__declspec(implementation_key(1058)) HRESULT IWMPRegionalButtonEvents::onmouseover ( );
__declspec(implementation_key(1059)) HRESULT IWMPRegionalButtonEvents::onmouseout ( );
__declspec(implementation_key(1060)) HRESULT IWMPRegionalButtonEvents::onkeypress ( );
__declspec(implementation_key(1061)) HRESULT IWMPRegionalButtonEvents::onkeydown ( );
__declspec(implementation_key(1062)) HRESULT IWMPRegionalButtonEvents::onkeyup ( );
__declspec(implementation_key(1063)) _bstr_t IWMPRegionalButton::GetupToolTip ( );
__declspec(implementation_key(1064)) void IWMPRegionalButton::PutupToolTip ( _bstr_t pVal );
__declspec(implementation_key(1065)) _bstr_t IWMPRegionalButton::GetdownToolTip ( );
__declspec(implementation_key(1066)) void IWMPRegionalButton::PutdownToolTip ( _bstr_t pVal );
__declspec(implementation_key(1067)) _bstr_t IWMPRegionalButton::GetmappingColor ( );
__declspec(implementation_key(1068)) void IWMPRegionalButton::PutmappingColor ( _bstr_t pVal );
__declspec(implementation_key(1069)) VARIANT_BOOL IWMPRegionalButton::Getenabled ( );
__declspec(implementation_key(1070)) void IWMPRegionalButton::Putenabled ( VARIANT_BOOL pVal );
__declspec(implementation_key(1071)) VARIANT_BOOL IWMPRegionalButton::Getsticky ( );
__declspec(implementation_key(1072)) void IWMPRegionalButton::Putsticky ( VARIANT_BOOL pVal );
__declspec(implementation_key(1073)) VARIANT_BOOL IWMPRegionalButton::Getdown ( );
__declspec(implementation_key(1074)) void IWMPRegionalButton::Putdown ( VARIANT_BOOL pVal );
__declspec(implementation_key(1075)) long IWMPRegionalButton::Getindex ( );
__declspec(implementation_key(1076)) VARIANT_BOOL IWMPRegionalButton::GettabStop ( );
__declspec(implementation_key(1077)) void IWMPRegionalButton::PuttabStop ( VARIANT_BOOL pVal );
__declspec(implementation_key(1078)) _bstr_t IWMPRegionalButton::Getcursor ( );
__declspec(implementation_key(1079)) void IWMPRegionalButton::Putcursor ( _bstr_t pVal );
__declspec(implementation_key(1080)) HRESULT IWMPRegionalButton::Click ( );
__declspec(implementation_key(1081)) _bstr_t IWMPRegionalButton::GetaccName ( );
__declspec(implementation_key(1082)) void IWMPRegionalButton::PutaccName ( _bstr_t pszName );
__declspec(implementation_key(1083)) _bstr_t IWMPRegionalButton::GetaccDescription ( );
__declspec(implementation_key(1084)) void IWMPRegionalButton::PutaccDescription ( _bstr_t pszDescription );
__declspec(implementation_key(1085)) _bstr_t IWMPRegionalButton::GetaccKeyboardShortcut ( );
__declspec(implementation_key(1086)) void IWMPRegionalButton::PutaccKeyboardShortcut ( _bstr_t pszShortcut );
__declspec(implementation_key(1087)) HRESULT IWMPCustomSliderCtrlEvents::ondragbegin ( );
__declspec(implementation_key(1088)) HRESULT IWMPCustomSliderCtrlEvents::ondragend ( );
__declspec(implementation_key(1089)) HRESULT IWMPCustomSliderCtrlEvents::onpositionchange ( );
__declspec(implementation_key(1090)) _bstr_t IWMPCustomSlider::Getcursor ( );
__declspec(implementation_key(1091)) void IWMPCustomSlider::Putcursor ( _bstr_t pVal );
__declspec(implementation_key(1092)) float IWMPCustomSlider::Getmin ( );
__declspec(implementation_key(1093)) void IWMPCustomSlider::Putmin ( float pVal );
__declspec(implementation_key(1094)) float IWMPCustomSlider::Getmax ( );
__declspec(implementation_key(1095)) void IWMPCustomSlider::Putmax ( float pVal );
__declspec(implementation_key(1096)) float IWMPCustomSlider::Getvalue ( );
__declspec(implementation_key(1097)) void IWMPCustomSlider::Putvalue ( float pVal );
__declspec(implementation_key(1098)) _bstr_t IWMPCustomSlider::GettoolTip ( );
__declspec(implementation_key(1099)) void IWMPCustomSlider::PuttoolTip ( _bstr_t pVal );
__declspec(implementation_key(1100)) _bstr_t IWMPCustomSlider::GetpositionImage ( );
__declspec(implementation_key(1101)) void IWMPCustomSlider::PutpositionImage ( _bstr_t pVal );
__declspec(implementation_key(1102)) _bstr_t IWMPCustomSlider::Getimage ( );
__declspec(implementation_key(1103)) void IWMPCustomSlider::Putimage ( _bstr_t pVal );
__declspec(implementation_key(1104)) _bstr_t IWMPCustomSlider::GethoverImage ( );
__declspec(implementation_key(1105)) void IWMPCustomSlider::PuthoverImage ( _bstr_t pVal );
__declspec(implementation_key(1106)) _bstr_t IWMPCustomSlider::GetdisabledImage ( );
__declspec(implementation_key(1107)) void IWMPCustomSlider::PutdisabledImage ( _bstr_t pVal );
__declspec(implementation_key(1108)) _bstr_t IWMPCustomSlider::GetdownImage ( );
__declspec(implementation_key(1109)) void IWMPCustomSlider::PutdownImage ( _bstr_t pVal );
__declspec(implementation_key(1110)) _bstr_t IWMPCustomSlider::GettransparencyColor ( );
__declspec(implementation_key(1111)) void IWMPCustomSlider::PuttransparencyColor ( _bstr_t pVal );
__declspec(implementation_key(1112)) _bstr_t IWMPTextCtrl::GetbackgroundColor ( );
__declspec(implementation_key(1113)) void IWMPTextCtrl::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1114)) _bstr_t IWMPTextCtrl::GetfontFace ( );
__declspec(implementation_key(1115)) void IWMPTextCtrl::PutfontFace ( _bstr_t pVal );
__declspec(implementation_key(1116)) _bstr_t IWMPTextCtrl::GetfontStyle ( );
__declspec(implementation_key(1117)) void IWMPTextCtrl::PutfontStyle ( _bstr_t pVal );
__declspec(implementation_key(1118)) long IWMPTextCtrl::GetfontSize ( );
__declspec(implementation_key(1119)) void IWMPTextCtrl::PutfontSize ( long pVal );
__declspec(implementation_key(1120)) _bstr_t IWMPTextCtrl::GetforegroundColor ( );
__declspec(implementation_key(1121)) void IWMPTextCtrl::PutforegroundColor ( _bstr_t pVal );
__declspec(implementation_key(1122)) _bstr_t IWMPTextCtrl::GethoverBackgroundColor ( );
__declspec(implementation_key(1123)) void IWMPTextCtrl::PuthoverBackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1124)) _bstr_t IWMPTextCtrl::GethoverForegroundColor ( );
__declspec(implementation_key(1125)) void IWMPTextCtrl::PuthoverForegroundColor ( _bstr_t pVal );
__declspec(implementation_key(1126)) _bstr_t IWMPTextCtrl::GethoverFontStyle ( );
__declspec(implementation_key(1127)) void IWMPTextCtrl::PuthoverFontStyle ( _bstr_t pVal );
__declspec(implementation_key(1128)) _bstr_t IWMPTextCtrl::Getvalue ( );
__declspec(implementation_key(1129)) void IWMPTextCtrl::Putvalue ( _bstr_t pVal );
__declspec(implementation_key(1130)) _bstr_t IWMPTextCtrl::GettoolTip ( );
__declspec(implementation_key(1131)) void IWMPTextCtrl::PuttoolTip ( _bstr_t pVal );
__declspec(implementation_key(1132)) _bstr_t IWMPTextCtrl::GetdisabledFontStyle ( );
__declspec(implementation_key(1133)) void IWMPTextCtrl::PutdisabledFontStyle ( _bstr_t pVal );
__declspec(implementation_key(1134)) _bstr_t IWMPTextCtrl::GetdisabledForegroundColor ( );
__declspec(implementation_key(1135)) void IWMPTextCtrl::PutdisabledForegroundColor ( _bstr_t pVal );
__declspec(implementation_key(1136)) _bstr_t IWMPTextCtrl::GetdisabledBackgroundColor ( );
__declspec(implementation_key(1137)) void IWMPTextCtrl::PutdisabledBackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1138)) VARIANT_BOOL IWMPTextCtrl::GetfontSmoothing ( );
__declspec(implementation_key(1139)) void IWMPTextCtrl::PutfontSmoothing ( VARIANT_BOOL pVal );
__declspec(implementation_key(1140)) _bstr_t IWMPTextCtrl::Getjustification ( );
__declspec(implementation_key(1141)) void IWMPTextCtrl::Putjustification ( _bstr_t pVal );
__declspec(implementation_key(1142)) VARIANT_BOOL IWMPTextCtrl::GetwordWrap ( );
__declspec(implementation_key(1143)) void IWMPTextCtrl::PutwordWrap ( VARIANT_BOOL pVal );
__declspec(implementation_key(1144)) _bstr_t IWMPTextCtrl::Getcursor ( );
__declspec(implementation_key(1145)) void IWMPTextCtrl::Putcursor ( _bstr_t pVal );
__declspec(implementation_key(1146)) VARIANT_BOOL IWMPTextCtrl::Getscrolling ( );
__declspec(implementation_key(1147)) void IWMPTextCtrl::Putscrolling ( VARIANT_BOOL pVal );
__declspec(implementation_key(1148)) _bstr_t IWMPTextCtrl::GetscrollingDirection ( );
__declspec(implementation_key(1149)) void IWMPTextCtrl::PutscrollingDirection ( _bstr_t pVal );
__declspec(implementation_key(1150)) int IWMPTextCtrl::GetscrollingDelay ( );
__declspec(implementation_key(1151)) void IWMPTextCtrl::PutscrollingDelay ( int pVal );
__declspec(implementation_key(1152)) int IWMPTextCtrl::GetscrollingAmount ( );
__declspec(implementation_key(1153)) void IWMPTextCtrl::PutscrollingAmount ( int pVal );
__declspec(implementation_key(1154)) int IWMPTextCtrl::GettextWidth ( );
__declspec(implementation_key(1155)) VARIANT_BOOL IWMPTextCtrl::GetonGlass ( );
__declspec(implementation_key(1156)) void IWMPTextCtrl::PutonGlass ( VARIANT_BOOL pVal );
__declspec(implementation_key(1157)) VARIANT_BOOL IWMPTextCtrl::GetdisableGlassBlurBackground ( );
__declspec(implementation_key(1158)) void IWMPTextCtrl::PutdisableGlassBlurBackground ( VARIANT_BOOL pVal );
__declspec(implementation_key(1159)) IUnknownPtr ITaskCntrCtrl::GetCurrentContainer ( );
__declspec(implementation_key(1160)) void ITaskCntrCtrl::PutCurrentContainer ( IUnknown * ppUnk );
__declspec(implementation_key(1161)) HRESULT ITaskCntrCtrl::Activate ( );
__declspec(implementation_key(1162)) HRESULT _WMPCoreEvents::OpenStateChange ( long NewState );
__declspec(implementation_key(1163)) HRESULT _WMPCoreEvents::PlayStateChange ( long NewState );
__declspec(implementation_key(1164)) HRESULT _WMPCoreEvents::AudioLanguageChange ( long LangID );
__declspec(implementation_key(1165)) HRESULT _WMPCoreEvents::StatusChange ( );
__declspec(implementation_key(1166)) HRESULT _WMPCoreEvents::ScriptCommand ( _bstr_t scType, _bstr_t Param );
__declspec(implementation_key(1167)) HRESULT _WMPCoreEvents::NewStream ( );
__declspec(implementation_key(1168)) HRESULT _WMPCoreEvents::Disconnect ( long Result );
__declspec(implementation_key(1169)) HRESULT _WMPCoreEvents::Buffering ( VARIANT_BOOL Start );
__declspec(implementation_key(1170)) HRESULT _WMPCoreEvents::Error ( );
__declspec(implementation_key(1171)) HRESULT _WMPCoreEvents::Warning ( long WarningType, long Param, _bstr_t Description );
__declspec(implementation_key(1172)) HRESULT _WMPCoreEvents::EndOfStream ( long Result );
__declspec(implementation_key(1173)) HRESULT _WMPCoreEvents::PositionChange ( double oldPosition, double newPosition );
__declspec(implementation_key(1174)) HRESULT _WMPCoreEvents::MarkerHit ( long MarkerNum );
__declspec(implementation_key(1175)) HRESULT _WMPCoreEvents::DurationUnitChange ( long NewDurationUnit );
__declspec(implementation_key(1176)) HRESULT _WMPCoreEvents::CdromMediaChange ( long CdromNum );
__declspec(implementation_key(1177)) HRESULT _WMPCoreEvents::PlaylistChange ( IDispatch * Playlist, enum WMPPlaylistChangeEventType change );
__declspec(implementation_key(1178)) HRESULT _WMPCoreEvents::CurrentPlaylistChange ( enum WMPPlaylistChangeEventType change );
__declspec(implementation_key(1179)) HRESULT _WMPCoreEvents::CurrentPlaylistItemAvailable ( _bstr_t bstrItemName );
__declspec(implementation_key(1180)) HRESULT _WMPCoreEvents::MediaChange ( IDispatch * Item );
__declspec(implementation_key(1181)) HRESULT _WMPCoreEvents::CurrentMediaItemAvailable ( _bstr_t bstrItemName );
__declspec(implementation_key(1182)) HRESULT _WMPCoreEvents::CurrentItemChange ( IDispatch * pdispMedia );
__declspec(implementation_key(1183)) HRESULT _WMPCoreEvents::MediaCollectionChange ( );
__declspec(implementation_key(1184)) HRESULT _WMPCoreEvents::MediaCollectionAttributeStringAdded ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal );
__declspec(implementation_key(1185)) HRESULT _WMPCoreEvents::MediaCollectionAttributeStringRemoved ( _bstr_t bstrAttribName, _bstr_t bstrAttribVal );
__declspec(implementation_key(1186)) HRESULT _WMPCoreEvents::MediaCollectionAttributeStringChanged ( _bstr_t bstrAttribName, _bstr_t bstrOldAttribVal, _bstr_t bstrNewAttribVal );
__declspec(implementation_key(1187)) HRESULT _WMPCoreEvents::PlaylistCollectionChange ( );
__declspec(implementation_key(1188)) HRESULT _WMPCoreEvents::PlaylistCollectionPlaylistAdded ( _bstr_t bstrPlaylistName );
__declspec(implementation_key(1189)) HRESULT _WMPCoreEvents::PlaylistCollectionPlaylistRemoved ( _bstr_t bstrPlaylistName );
__declspec(implementation_key(1190)) HRESULT _WMPCoreEvents::PlaylistCollectionPlaylistSetAsDeleted ( _bstr_t bstrPlaylistName, VARIANT_BOOL varfIsDeleted );
__declspec(implementation_key(1191)) HRESULT _WMPCoreEvents::ModeChange ( _bstr_t ModeName, VARIANT_BOOL NewValue );
__declspec(implementation_key(1192)) HRESULT _WMPCoreEvents::MediaError ( IDispatch * pMediaObject );
__declspec(implementation_key(1193)) HRESULT _WMPCoreEvents::OpenPlaylistSwitch ( IDispatch * pItem );
__declspec(implementation_key(1194)) HRESULT _WMPCoreEvents::DomainChange ( _bstr_t strDomain );
__declspec(implementation_key(1195)) HRESULT _WMPCoreEvents::StringCollectionChange ( IDispatch * pdispStringCollection, enum WMPStringCollectionChangeEventType change, long lCollectionIndex );
__declspec(implementation_key(1196)) HRESULT _WMPCoreEvents::MediaCollectionMediaAdded ( IDispatch * pdispMedia );
__declspec(implementation_key(1197)) HRESULT _WMPCoreEvents::MediaCollectionMediaRemoved ( IDispatch * pdispMedia );
__declspec(implementation_key(1198)) HRESULT IWMPGraphEventHandler::NotifyGraphStateChange ( ULONG_PTR punkGraph, long lGraphState );
__declspec(implementation_key(1199)) HRESULT IWMPGraphEventHandler::AsyncNotifyGraphStateChange ( ULONG_PTR punkGraph, long lGraphState );
__declspec(implementation_key(1200)) HRESULT IWMPGraphEventHandler::NotifyRateChange ( ULONG_PTR punkGraph, double dRate );
__declspec(implementation_key(1201)) HRESULT IWMPGraphEventHandler::NotifyPlaybackEnd ( ULONG_PTR punkGraph, _bstr_t bstrQueuedUrl, ULONG_PTR dwCurrentContext );
__declspec(implementation_key(1202)) HRESULT IWMPGraphEventHandler::NotifyStreamEnd ( ULONG_PTR punkGraph );
__declspec(implementation_key(1203)) HRESULT IWMPGraphEventHandler::NotifyScriptCommand ( ULONG_PTR punkGraph, _bstr_t bstrCommand, _bstr_t bstrParam );
__declspec(implementation_key(1204)) HRESULT IWMPGraphEventHandler::NotifyEarlyScriptCommand ( ULONG_PTR punkGraph, _bstr_t bstrCommand, _bstr_t bstrParam, double dTime );
__declspec(implementation_key(1205)) HRESULT IWMPGraphEventHandler::NotifyMarkerHit ( ULONG_PTR punkGraph, long lMarker );
__declspec(implementation_key(1206)) HRESULT IWMPGraphEventHandler::NotifyGraphError ( ULONG_PTR punkGraph, long lErrMajor, long lErrMinor, long lCondition, _bstr_t bstrInfo, IUnknown * punkGraphData );
__declspec(implementation_key(1207)) HRESULT IWMPGraphEventHandler::NotifyAcquireCredentials ( ULONG_PTR punkGraph, _bstr_t bstrRealm, _bstr_t bstrSite, _bstr_t bstrUser, _bstr_t bstrPassword, unsigned long * pdwFlags, VARIANT_BOOL * pfCancel );
__declspec(implementation_key(1208)) HRESULT IWMPGraphEventHandler::NotifyUntrustedLicense ( ULONG_PTR punkGraph, _bstr_t bstrURL, VARIANT_BOOL * pfCancel );
__declspec(implementation_key(1209)) HRESULT IWMPGraphEventHandler::NotifyLicenseDialog ( ULONG_PTR punkGraph, _bstr_t bstrURL, _bstr_t bstrContent, unsigned char * pPostData, unsigned long dwPostDataSize, long lResult );
__declspec(implementation_key(1210)) HRESULT IWMPGraphEventHandler::NotifyNeedsIndividualization ( ULONG_PTR punkGraph, VARIANT_BOOL * pfResult );
__declspec(implementation_key(1211)) HRESULT IWMPGraphEventHandler::NotifyNewMetadata ( ULONG_PTR punkGraph );
__declspec(implementation_key(1212)) HRESULT IWMPGraphEventHandler::NotifyNewMediaCaps ( ULONG_PTR punkGraph );
__declspec(implementation_key(1213)) HRESULT IWMPGraphEventHandler::NotifyDisconnect ( ULONG_PTR punkGraph, long lResult );
__declspec(implementation_key(1214)) HRESULT IWMPGraphEventHandler::NotifySave ( ULONG_PTR punkGraph, long fStarted, long lResult );
__declspec(implementation_key(1215)) HRESULT IWMPGraphEventHandler::NotifyDelayClose ( ULONG_PTR punkGraph, VARIANT_BOOL fDelay );
__declspec(implementation_key(1216)) HRESULT IWMPGraphEventHandler::NotifyDVD ( ULONG_PTR punkGraph, long lEventCode, long lParam1, long lParam2 );
__declspec(implementation_key(1217)) HRESULT IWMPGraphEventHandler::NotifyRequestAppThreadAction ( ULONG_PTR punkGraph, unsigned long dwAction );
__declspec(implementation_key(1218)) HRESULT IWMPGraphEventHandler::NotifyPrerollReady ( ULONG_PTR punkGraph );
__declspec(implementation_key(1219)) HRESULT IWMPGraphEventHandler::NotifyNewIcons ( ULONG_PTR punkGraph );
__declspec(implementation_key(1220)) HRESULT IWMPGraphEventHandler::NotifyStepComplete ( ULONG_PTR punkGraph );
__declspec(implementation_key(1221)) HRESULT IWMPGraphEventHandler::NotifyNewBitrate ( ULONG_PTR punkGraph, unsigned long dwBitrate );
__declspec(implementation_key(1222)) HRESULT IWMPGraphEventHandler::NotifyGraphCreationPreRender ( ULONG_PTR punkGraph, ULONG_PTR punkFilterGraph, ULONG_PTR punkCardeaEncConfig, ULONG_PTR phrContinue, ULONG_PTR hEventToSet );
__declspec(implementation_key(1223)) HRESULT IWMPGraphEventHandler::NotifyGraphCreationPostRender ( ULONG_PTR punkGraph, ULONG_PTR punkFilterGraph, ULONG_PTR phrContinue, ULONG_PTR hEventToSet );
__declspec(implementation_key(1224)) HRESULT IWMPGraphEventHandler::NotifyGraphUserEvent ( ULONG_PTR punkGraph, long EventCode );
__declspec(implementation_key(1225)) HRESULT IWMPGraphEventHandler::NotifyRevocation ( ULONG_PTR punkGraph, VARIANT_BOOL * pfResult );
__declspec(implementation_key(1226)) HRESULT IWMPGraphEventHandler::NotifyNeedsWMGraphIndividualization ( ULONG_PTR punkGraph, ULONG_PTR phWnd, ULONG_PTR hIndivEvent, VARIANT_BOOL * pfCancel, VARIANT_BOOL * pfResult );
__declspec(implementation_key(1227)) HRESULT IWMPGraphEventHandler::NotifyNeedsFullscreen ( ULONG_PTR punkGraph );
__declspec(implementation_key(1228)) long IBattery::GetpresetCount ( );
__declspec(implementation_key(1229)) IDispatchPtr IBattery::Getpreset ( long nIndex );
__declspec(implementation_key(1230)) _bstr_t IBatteryPreset::Gettitle ( );
__declspec(implementation_key(1231)) void IBatteryPreset::Puttitle ( _bstr_t pVal );
__declspec(implementation_key(1232)) long IBarsEffect::GetdisplayMode ( );
__declspec(implementation_key(1233)) void IBarsEffect::PutdisplayMode ( long pVal );
__declspec(implementation_key(1234)) VARIANT_BOOL IBarsEffect::GetshowPeaks ( );
__declspec(implementation_key(1235)) void IBarsEffect::PutshowPeaks ( VARIANT_BOOL pVal );
__declspec(implementation_key(1236)) long IBarsEffect::GetpeakHangTime ( );
__declspec(implementation_key(1237)) void IBarsEffect::PutpeakHangTime ( long pVal );
__declspec(implementation_key(1238)) float IBarsEffect::GetpeakFallbackAcceleration ( );
__declspec(implementation_key(1239)) void IBarsEffect::PutpeakFallbackAcceleration ( float pVal );
__declspec(implementation_key(1240)) float IBarsEffect::GetpeakFallbackSpeed ( );
__declspec(implementation_key(1241)) void IBarsEffect::PutpeakFallbackSpeed ( float pVal );
__declspec(implementation_key(1242)) float IBarsEffect::GetlevelFallbackAcceleration ( );
__declspec(implementation_key(1243)) void IBarsEffect::PutlevelFallbackAcceleration ( float pVal );
__declspec(implementation_key(1244)) float IBarsEffect::GetlevelFallbackSpeed ( );
__declspec(implementation_key(1245)) void IBarsEffect::PutlevelFallbackSpeed ( float pVal );
__declspec(implementation_key(1246)) _bstr_t IBarsEffect::GetbackgroundColor ( );
__declspec(implementation_key(1247)) void IBarsEffect::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1248)) _bstr_t IBarsEffect::GetlevelColor ( );
__declspec(implementation_key(1249)) void IBarsEffect::PutlevelColor ( _bstr_t pVal );
__declspec(implementation_key(1250)) _bstr_t IBarsEffect::GetpeakColor ( );
__declspec(implementation_key(1251)) void IBarsEffect::PutpeakColor ( _bstr_t pVal );
__declspec(implementation_key(1252)) long IBarsEffect::GethorizontalSpacing ( );
__declspec(implementation_key(1253)) void IBarsEffect::PuthorizontalSpacing ( long pVal );
__declspec(implementation_key(1254)) long IBarsEffect::GetlevelWidth ( );
__declspec(implementation_key(1255)) void IBarsEffect::PutlevelWidth ( long pVal );
__declspec(implementation_key(1256)) float IBarsEffect::GetlevelScale ( );
__declspec(implementation_key(1257)) void IBarsEffect::PutlevelScale ( float pVal );
__declspec(implementation_key(1258)) long IBarsEffect::GetfadeRate ( );
__declspec(implementation_key(1259)) void IBarsEffect::PutfadeRate ( long pVal );
__declspec(implementation_key(1260)) long IBarsEffect::GetfadeMode ( );
__declspec(implementation_key(1261)) void IBarsEffect::PutfadeMode ( long pVal );
__declspec(implementation_key(1262)) VARIANT_BOOL IBarsEffect::Gettransparent ( );
__declspec(implementation_key(1263)) void IBarsEffect::Puttransparent ( VARIANT_BOOL pVal );
__declspec(implementation_key(1264)) _bstr_t IWMPExternal::Getversion ( );
__declspec(implementation_key(1265)) _bstr_t IWMPExternal::GetappColorLight ( );
__declspec(implementation_key(1266)) void IWMPExternal::PutOnColorChange ( IDispatch * _arg1 );
__declspec(implementation_key(1267)) _bstr_t IWMPExternalColors::GetappColorMedium ( );
__declspec(implementation_key(1268)) _bstr_t IWMPExternalColors::GetappColorDark ( );
__declspec(implementation_key(1269)) _bstr_t IWMPExternalColors::GetappColorButtonHighlight ( );
__declspec(implementation_key(1270)) _bstr_t IWMPExternalColors::GetappColorButtonShadow ( );
__declspec(implementation_key(1271)) _bstr_t IWMPExternalColors::GetappColorButtonHoverFace ( );
__declspec(implementation_key(1272)) HRESULT IWMPSubscriptionServiceLimited::NavigateTaskPaneURL ( _bstr_t bstrKeyName, _bstr_t bstrTaskPane, _bstr_t bstrParams );
__declspec(implementation_key(1273)) void IWMPSubscriptionServiceLimited::PutSelectedTaskPane ( _bstr_t bstrTaskPane );
__declspec(implementation_key(1274)) _bstr_t IWMPSubscriptionServiceLimited::GetSelectedTaskPane ( );
__declspec(implementation_key(1275)) _bstr_t IWMPDownloadItem::GetsourceURL ( );
__declspec(implementation_key(1276)) long IWMPDownloadItem::Getsize ( );
__declspec(implementation_key(1277)) _bstr_t IWMPDownloadItem::Gettype ( );
__declspec(implementation_key(1278)) long IWMPDownloadItem::Getprogress ( );
__declspec(implementation_key(1279)) enum WMPSubscriptionDownloadState IWMPDownloadItem::GetdownloadState ( );
__declspec(implementation_key(1280)) HRESULT IWMPDownloadItem::pause ( );
__declspec(implementation_key(1281)) HRESULT IWMPDownloadItem::resume ( );
__declspec(implementation_key(1282)) HRESULT IWMPDownloadItem::cancel ( );
__declspec(implementation_key(1283)) _bstr_t IWMPDownloadItem2::getItemInfo ( _bstr_t bstrItemName );
__declspec(implementation_key(1284)) long IWMPDownloadCollection::GetID ( );
__declspec(implementation_key(1285)) long IWMPDownloadCollection::Getcount ( );
__declspec(implementation_key(1286)) IWMPDownloadItem2Ptr IWMPDownloadCollection::Item ( long lItem );
__declspec(implementation_key(1287)) IWMPDownloadItem2Ptr IWMPDownloadCollection::startDownload ( _bstr_t bstrSourceURL, _bstr_t bstrType );
__declspec(implementation_key(1288)) HRESULT IWMPDownloadCollection::removeItem ( long lItem );
__declspec(implementation_key(1289)) HRESULT IWMPDownloadCollection::clear ( );
__declspec(implementation_key(1290)) IWMPDownloadCollectionPtr IWMPDownloadManager::getDownloadCollection ( long lCollectionId );
__declspec(implementation_key(1291)) IWMPDownloadCollectionPtr IWMPDownloadManager::createDownloadCollection ( );
__declspec(implementation_key(1292)) IWMPDownloadManagerPtr IWMPSubscriptionServiceExternal::GetDownloadManager ( );
__declspec(implementation_key(1293)) HRESULT IWMPSubscriptionServicePlayMedia::playMedia ( _bstr_t bstrURL );
__declspec(implementation_key(1294)) void IWMPDiscoExternal::PutOnLoginChange ( IDispatch * _arg1 );
__declspec(implementation_key(1295)) VARIANT_BOOL IWMPDiscoExternal::GetuserLoggedIn ( );
__declspec(implementation_key(1296)) HRESULT IWMPDiscoExternal::attemptLogin ( );
__declspec(implementation_key(1297)) _bstr_t IWMPDiscoExternal::GetaccountType ( );
__declspec(implementation_key(1298)) void IWMPDiscoExternal::PutOnViewChange ( IDispatch * _arg1 );
__declspec(implementation_key(1299)) HRESULT IWMPDiscoExternal::changeView ( _bstr_t bstrLibraryLocationType, _bstr_t bstrLibraryLocationID, _bstr_t bstrFilter, _bstr_t bstrViewParams );
__declspec(implementation_key(1300)) HRESULT IWMPDiscoExternal::changeViewOnlineList ( _bstr_t bstrLibraryLocationType, _bstr_t bstrLibraryLocationID, _bstr_t bstrParams, _bstr_t bstrFriendlyName, _bstr_t bstrListType, _bstr_t bstrViewMode );
__declspec(implementation_key(1301)) _bstr_t IWMPDiscoExternal::GetlibraryLocationType ( );
__declspec(implementation_key(1302)) _bstr_t IWMPDiscoExternal::GetlibraryLocationID ( );
__declspec(implementation_key(1303)) _bstr_t IWMPDiscoExternal::GetselectedItemType ( );
__declspec(implementation_key(1304)) _bstr_t IWMPDiscoExternal::GetselectedItemID ( );
__declspec(implementation_key(1305)) _bstr_t IWMPDiscoExternal::Getfilter ( );
__declspec(implementation_key(1306)) _bstr_t IWMPDiscoExternal::Gettask ( );
__declspec(implementation_key(1307)) _bstr_t IWMPDiscoExternal::GetviewParameters ( );
__declspec(implementation_key(1308)) HRESULT IWMPDiscoExternal::cancelNavigate ( );
__declspec(implementation_key(1309)) HRESULT IWMPDiscoExternal::showPopup ( long lPopupIndex, _bstr_t bstrParameters );
__declspec(implementation_key(1310)) HRESULT IWMPDiscoExternal::addToBasket ( _bstr_t bstrViewType, _bstr_t bstrViewIDs );
__declspec(implementation_key(1311)) _bstr_t IWMPDiscoExternal::GetbasketTitle ( );
__declspec(implementation_key(1312)) HRESULT IWMPDiscoExternal::play ( _bstr_t bstrLibraryLocationType, _bstr_t bstrLibraryLocationIDs );
__declspec(implementation_key(1313)) HRESULT IWMPDiscoExternal::download ( _bstr_t bstrViewType, _bstr_t bstrViewIDs );
__declspec(implementation_key(1314)) HRESULT IWMPDiscoExternal::buy ( _bstr_t bstrViewType, _bstr_t bstrViewIDs );
__declspec(implementation_key(1315)) HRESULT IWMPDiscoExternal::saveCurrentViewToLibrary ( _bstr_t bstrFriendlyListType, VARIANT_BOOL fDynamic );
__declspec(implementation_key(1316)) HRESULT IWMPDiscoExternal::authenticate ( long lAuthenticationIndex );
__declspec(implementation_key(1317)) HRESULT IWMPDiscoExternal::sendMessage ( _bstr_t bstrMsg, _bstr_t bstrParam );
__declspec(implementation_key(1318)) void IWMPDiscoExternal::PutOnSendMessageComplete ( IDispatch * _arg1 );
__declspec(implementation_key(1319)) void IWMPDiscoExternal::PutignoreIEHistory ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1320)) VARIANT_BOOL IWMPDiscoExternal::GetpluginRunning ( );
__declspec(implementation_key(1321)) VARIANT_BOOL IWMPDiscoExternal::GettemplateBeingDisplayedInLocalLibrary ( );
__declspec(implementation_key(1322)) void IWMPDiscoExternal::PutOnChangeViewError ( IDispatch * _arg1 );
__declspec(implementation_key(1323)) void IWMPDiscoExternal::PutOnChangeViewOnlineListError ( IDispatch * _arg1 );
__declspec(implementation_key(1324)) HRESULT IWMPCDDVDWizardExternal::WriteNames ( _bstr_t bstrTOC, _bstr_t bstrMetadata );
__declspec(implementation_key(1325)) HRESULT IWMPCDDVDWizardExternal::ReturnToMainTask ( );
__declspec(implementation_key(1326)) HRESULT IWMPCDDVDWizardExternal::WriteNamesEx ( enum WMP_WRITENAMESEX_TYPE type, _bstr_t bstrTypeId, _bstr_t bstrMetadata, VARIANT_BOOL fRenameRegroupFiles );
__declspec(implementation_key(1327)) _bstr_t IWMPCDDVDWizardExternal::GetMDQByRequestID ( _bstr_t bstrRequestID );
__declspec(implementation_key(1328)) HRESULT IWMPCDDVDWizardExternal::EditMetadata ( );
__declspec(implementation_key(1329)) VARIANT_BOOL IWMPCDDVDWizardExternal::IsMetadataAvailableForEdit ( );
__declspec(implementation_key(1330)) HRESULT IWMPCDDVDWizardExternal::BuyCD ( _bstr_t bstrTitle, _bstr_t bstrArtist, _bstr_t bstrAlbum, _bstr_t bstrUFID, _bstr_t bstrWMID );
__declspec(implementation_key(1331)) HRESULT IWMPOfflineExternal::forceOnline ( );
__declspec(implementation_key(1332)) _bstr_t IWMPDMRAVTransportService::GetTransportState ( );
__declspec(implementation_key(1333)) _bstr_t IWMPDMRAVTransportService::GetTransportStatus ( );
__declspec(implementation_key(1334)) _bstr_t IWMPDMRAVTransportService::GetPlaybackStorageMedium ( );
__declspec(implementation_key(1335)) _bstr_t IWMPDMRAVTransportService::GetRecordStorageMedium ( );
__declspec(implementation_key(1336)) _bstr_t IWMPDMRAVTransportService::GetPossiblePlaybackStorageMedia ( );
__declspec(implementation_key(1337)) _bstr_t IWMPDMRAVTransportService::GetPossibleRecordStorageMedia ( );
__declspec(implementation_key(1338)) _bstr_t IWMPDMRAVTransportService::GetCurrentPlayMode ( );
__declspec(implementation_key(1339)) _bstr_t IWMPDMRAVTransportService::GetTransportPlaySpeed ( );
__declspec(implementation_key(1340)) _bstr_t IWMPDMRAVTransportService::GetRecordMediumWriteStatus ( );
__declspec(implementation_key(1341)) _bstr_t IWMPDMRAVTransportService::GetCurrentRecordQualityMode ( );
__declspec(implementation_key(1342)) _bstr_t IWMPDMRAVTransportService::GetPossibleRecordQualityModes ( );
__declspec(implementation_key(1343)) unsigned long IWMPDMRAVTransportService::GetNumberOfTracks ( );
__declspec(implementation_key(1344)) unsigned long IWMPDMRAVTransportService::GetCurrentTrack ( );
__declspec(implementation_key(1345)) _bstr_t IWMPDMRAVTransportService::GetCurrentTrackDuration ( );
__declspec(implementation_key(1346)) _bstr_t IWMPDMRAVTransportService::GetCurrentMediaDuration ( );
__declspec(implementation_key(1347)) _bstr_t IWMPDMRAVTransportService::GetCurrentTrackMetaData ( );
__declspec(implementation_key(1348)) _bstr_t IWMPDMRAVTransportService::GetCurrentTrackURI ( );
__declspec(implementation_key(1349)) _bstr_t IWMPDMRAVTransportService::GetAVTransportURI ( );
__declspec(implementation_key(1350)) _bstr_t IWMPDMRAVTransportService::GetAVTransportURIMetaData ( );
__declspec(implementation_key(1351)) _bstr_t IWMPDMRAVTransportService::GetNextAVTransportURI ( );
__declspec(implementation_key(1352)) _bstr_t IWMPDMRAVTransportService::GetNextAVTransportURIMetaData ( );
__declspec(implementation_key(1353)) _bstr_t IWMPDMRAVTransportService::GetRelativeTimePosition ( );
__declspec(implementation_key(1354)) _bstr_t IWMPDMRAVTransportService::GetAbsoluteTimePosition ( );
__declspec(implementation_key(1355)) long IWMPDMRAVTransportService::GetRelativeCounterPosition ( );
__declspec(implementation_key(1356)) long IWMPDMRAVTransportService::GetAbsoluteCounterPosition ( );
__declspec(implementation_key(1357)) _bstr_t IWMPDMRAVTransportService::GetCurrentTransportActions ( );
__declspec(implementation_key(1358)) _bstr_t IWMPDMRAVTransportService::GetLastChange ( );
__declspec(implementation_key(1359)) _bstr_t IWMPDMRAVTransportService::GetA_ARG_TYPE_SeekMode ( );
__declspec(implementation_key(1360)) _bstr_t IWMPDMRAVTransportService::GetA_ARG_TYPE_SeekTarget ( );
__declspec(implementation_key(1361)) unsigned long IWMPDMRAVTransportService::GetA_ARG_TYPE_InstanceID ( );
__declspec(implementation_key(1362)) _bstr_t IWMPDMRAVTransportService::GetCurrentProtocolInfo ( );
__declspec(implementation_key(1363)) HRESULT IWMPDMRAVTransportService::SetAVTransportURI ( IUnknown * punkRemoteEndpointInfo, unsigned long ulInstanceID, _bstr_t bstrCurrentURI, _bstr_t bstrCurrentURIMetaData );
__declspec(implementation_key(1364)) HRESULT IWMPDMRAVTransportService::GetMediaInfo ( unsigned long ulInstanceID, unsigned long * pulNumTracks, BSTR * pbstrMediaDuration, BSTR * pbstrCurrentURI, BSTR * pbstrCurrentURIMetaData, BSTR * pbstrNextURI, BSTR * pNextURIMetaData, BSTR * pbstrPlayMedium, BSTR * pbstrRecordMedium, BSTR * pbstrWriteStatus );
__declspec(implementation_key(1365)) HRESULT IWMPDMRAVTransportService::GetTransportInfo ( unsigned long ulInstanceID, BSTR * pbstrCurrentTransportState, BSTR * pbstrCurrentTransportStatus, BSTR * pbstrCurrentSpeed );
__declspec(implementation_key(1366)) HRESULT IWMPDMRAVTransportService::GetPositionInfo ( unsigned long ulInstanceID, unsigned long * pTrack, BSTR * pbstrTrackDuration, BSTR * pbstrTrackMetaData, BSTR * pbstrTrackURI, BSTR * pbstrRelTime, BSTR * pbstrAbsTime, long * plRelCount, long * plAbsCount );
__declspec(implementation_key(1367)) HRESULT IWMPDMRAVTransportService::GetDeviceCapabilities ( unsigned long ulInstanceID, BSTR * pbstrPlayMedia, BSTR * pbstrRecMedia, BSTR * pbstrRecQualityModes );
__declspec(implementation_key(1368)) HRESULT IWMPDMRAVTransportService::GetTransportSettings ( unsigned long ulInstanceID, BSTR * pbstrPlayMode, BSTR * pbstrRecQualityMode );
__declspec(implementation_key(1369)) HRESULT IWMPDMRAVTransportService::stop ( unsigned long ulInstanceID );
__declspec(implementation_key(1370)) HRESULT IWMPDMRAVTransportService::play ( unsigned long ulInstanceID, _bstr_t bstrSpeed );
__declspec(implementation_key(1371)) HRESULT IWMPDMRAVTransportService::pause ( unsigned long ulInstanceID );
__declspec(implementation_key(1372)) HRESULT IWMPDMRAVTransportService::Seek ( unsigned long ulInstanceID, _bstr_t bstrUnit, _bstr_t bstrTarget );
__declspec(implementation_key(1373)) HRESULT IWMPDMRAVTransportService::next ( unsigned long ulInstanceID );
__declspec(implementation_key(1374)) HRESULT IWMPDMRAVTransportService::previous ( unsigned long ulInstanceID );
__declspec(implementation_key(1375)) HRESULT IWMPDMRAVTransportService::GetCurrentTransportActions ( unsigned long ulInstanceID, BSTR * pbstrActions );
__declspec(implementation_key(1376)) _bstr_t IWMPDMRConnectionManagerService::GetSourceProtocolInfo ( );
__declspec(implementation_key(1377)) _bstr_t IWMPDMRConnectionManagerService::GetSinkProtocolInfo ( );
__declspec(implementation_key(1378)) _bstr_t IWMPDMRConnectionManagerService::GetCurrentConnectionIDs ( );
__declspec(implementation_key(1379)) _bstr_t IWMPDMRConnectionManagerService::GetA_ARG_TYPE_ConnectionStatus ( );
__declspec(implementation_key(1380)) _bstr_t IWMPDMRConnectionManagerService::GetA_ARG_TYPE_ConnectionManager ( );
__declspec(implementation_key(1381)) _bstr_t IWMPDMRConnectionManagerService::GetA_ARG_TYPE_Direction ( );
__declspec(implementation_key(1382)) _bstr_t IWMPDMRConnectionManagerService::GetA_ARG_TYPE_ProtocolInfo ( );
__declspec(implementation_key(1383)) long IWMPDMRConnectionManagerService::GetA_ARG_TYPE_ConnectionID ( );
__declspec(implementation_key(1384)) long IWMPDMRConnectionManagerService::GetA_ARG_TYPE_AVTransportID ( );
__declspec(implementation_key(1385)) long IWMPDMRConnectionManagerService::GetA_ARG_TYPE_RcsID ( );
__declspec(implementation_key(1386)) HRESULT IWMPDMRConnectionManagerService::GetProtocolInfo ( BSTR * pbstrSource, BSTR * pbstrSink );
__declspec(implementation_key(1387)) HRESULT IWMPDMRConnectionManagerService::GetCurrentConnectionIDs ( BSTR * pbstrConnectionIDs );
__declspec(implementation_key(1388)) HRESULT IWMPDMRConnectionManagerService::GetCurrentConnectionInfo ( long lConnectionID, long * plResID, long * plAVTransportID, BSTR * pbstrProtocolInfo, BSTR * pbstrPeerConnectionManager, long * plPeerConnectionID, BSTR * pbstrDirection, BSTR * pbstrStatus );
__declspec(implementation_key(1389)) _bstr_t IWMPDMRRenderingControlService::GetLastChange ( );
__declspec(implementation_key(1390)) _bstr_t IWMPDMRRenderingControlService::GetPresetNameList ( );
__declspec(implementation_key(1391)) VARIANT_BOOL IWMPDMRRenderingControlService::Getmute ( );
__declspec(implementation_key(1392)) unsigned short IWMPDMRRenderingControlService::Getvolume ( );
__declspec(implementation_key(1393)) _bstr_t IWMPDMRRenderingControlService::GetA_ARG_TYPE_Channel ( );
__declspec(implementation_key(1394)) unsigned long IWMPDMRRenderingControlService::GetA_ARG_TYPE_InstanceID ( );
__declspec(implementation_key(1395)) _bstr_t IWMPDMRRenderingControlService::GetA_ARG_TYPE_PresetName ( );
__declspec(implementation_key(1396)) HRESULT IWMPDMRRenderingControlService::ListPresets ( unsigned long ulInstanceID, BSTR * pbstrCurrentPresetList );
__declspec(implementation_key(1397)) HRESULT IWMPDMRRenderingControlService::SelectPreset ( unsigned long ulInstanceID, _bstr_t bstrPresetName );
__declspec(implementation_key(1398)) HRESULT IWMPDMRRenderingControlService::GetMute ( unsigned long ulInstanceID, _bstr_t bstrChannel, VARIANT_BOOL * pbCurrentMute );
__declspec(implementation_key(1399)) HRESULT IWMPDMRRenderingControlService::SetMute ( unsigned long ulInstanceID, _bstr_t bstrChannel, VARIANT_BOOL bDesiredMute );
__declspec(implementation_key(1400)) HRESULT IWMPDMRRenderingControlService::GetVolume ( unsigned long ulInstanceID, _bstr_t bstrChannel, unsigned short * puiCurrentVolume );
__declspec(implementation_key(1401)) HRESULT IWMPDMRRenderingControlService::SetVolume ( unsigned long ulInstanceID, _bstr_t bstrChannel, unsigned short uiDesiredVolume );
__declspec(implementation_key(1402)) VARIANT_BOOL IWMPCdromBurn::isAvailable ( _bstr_t bstrItem );
__declspec(implementation_key(1403)) _bstr_t IWMPCdromBurn::getItemInfo ( _bstr_t bstrItem );
__declspec(implementation_key(1404)) _bstr_t IWMPCdromBurn::Getlabel ( );
__declspec(implementation_key(1405)) void IWMPCdromBurn::Putlabel ( _bstr_t pbstrLabel );
__declspec(implementation_key(1406)) enum WMPBurnFormat IWMPCdromBurn::GetburnFormat ( );
__declspec(implementation_key(1407)) void IWMPCdromBurn::PutburnFormat ( enum WMPBurnFormat pwmpbf );
__declspec(implementation_key(1408)) IWMPPlaylistPtr IWMPCdromBurn::GetburnPlaylist ( );
__declspec(implementation_key(1409)) void IWMPCdromBurn::PutburnPlaylist ( struct IWMPPlaylist * ppPlaylist );
__declspec(implementation_key(1410)) HRESULT IWMPCdromBurn::refreshStatus ( );
__declspec(implementation_key(1411)) enum WMPBurnState IWMPCdromBurn::GetburnState ( );
__declspec(implementation_key(1412)) long IWMPCdromBurn::GetburnProgress ( );
__declspec(implementation_key(1413)) HRESULT IWMPCdromBurn::startBurn ( );
__declspec(implementation_key(1414)) HRESULT IWMPCdromBurn::stopBurn ( );
__declspec(implementation_key(1415)) HRESULT IWMPCdromBurn::erase ( );
__declspec(implementation_key(1416)) long IWMPPlaylist::Getcount ( );
__declspec(implementation_key(1417)) _bstr_t IWMPPlaylist::Getname ( );
__declspec(implementation_key(1418)) void IWMPPlaylist::Putname ( _bstr_t pbstrName );
__declspec(implementation_key(1419)) long IWMPPlaylist::GetattributeCount ( );
__declspec(implementation_key(1420)) _bstr_t IWMPPlaylist::GetattributeName ( long lIndex );
__declspec(implementation_key(1421)) IWMPMediaPtr IWMPPlaylist::GetItem ( long lIndex );
__declspec(implementation_key(1422)) _bstr_t IWMPPlaylist::getItemInfo ( _bstr_t bstrName );
__declspec(implementation_key(1423)) HRESULT IWMPPlaylist::setItemInfo ( _bstr_t bstrName, _bstr_t bstrValue );
__declspec(implementation_key(1424)) VARIANT_BOOL IWMPPlaylist::GetisIdentical ( struct IWMPPlaylist * pIWMPPlaylist );
__declspec(implementation_key(1425)) HRESULT IWMPPlaylist::clear ( );
__declspec(implementation_key(1426)) HRESULT IWMPPlaylist::insertItem ( long lIndex, struct IWMPMedia * pIWMPMedia );
__declspec(implementation_key(1427)) HRESULT IWMPPlaylist::appendItem ( struct IWMPMedia * pIWMPMedia );
__declspec(implementation_key(1428)) HRESULT IWMPPlaylist::removeItem ( struct IWMPMedia * pIWMPMedia );
__declspec(implementation_key(1429)) HRESULT IWMPPlaylist::moveItem ( long lIndexOld, long lIndexNew );
__declspec(implementation_key(1430)) VARIANT_BOOL IWMPMedia::GetisIdentical ( struct IWMPMedia * pIWMPMedia );
__declspec(implementation_key(1431)) _bstr_t IWMPMedia::GetsourceURL ( );
__declspec(implementation_key(1432)) _bstr_t IWMPMedia::Getname ( );
__declspec(implementation_key(1433)) void IWMPMedia::Putname ( _bstr_t pbstrName );
__declspec(implementation_key(1434)) long IWMPMedia::GetimageSourceWidth ( );
__declspec(implementation_key(1435)) long IWMPMedia::GetimageSourceHeight ( );
__declspec(implementation_key(1436)) long IWMPMedia::GetmarkerCount ( );
__declspec(implementation_key(1437)) double IWMPMedia::getMarkerTime ( long MarkerNum );
__declspec(implementation_key(1438)) _bstr_t IWMPMedia::getMarkerName ( long MarkerNum );
__declspec(implementation_key(1439)) double IWMPMedia::Getduration ( );
__declspec(implementation_key(1440)) _bstr_t IWMPMedia::GetdurationString ( );
__declspec(implementation_key(1441)) long IWMPMedia::GetattributeCount ( );
__declspec(implementation_key(1442)) _bstr_t IWMPMedia::getAttributeName ( long lIndex );
__declspec(implementation_key(1443)) _bstr_t IWMPMedia::getItemInfo ( _bstr_t bstrItemName );
__declspec(implementation_key(1444)) HRESULT IWMPMedia::setItemInfo ( _bstr_t bstrItemName, _bstr_t bstrVal );
__declspec(implementation_key(1445)) _bstr_t IWMPMedia::getItemInfoByAtom ( long lAtom );
__declspec(implementation_key(1446)) VARIANT_BOOL IWMPMedia::isMemberOf ( struct IWMPPlaylist * pPlaylist );
__declspec(implementation_key(1447)) VARIANT_BOOL IWMPMedia::isReadOnlyItem ( _bstr_t bstrItemName );
__declspec(implementation_key(1448)) IWMPMediaPtr IWMPMediaCollection::add ( _bstr_t bstrURL );
__declspec(implementation_key(1449)) IWMPPlaylistPtr IWMPMediaCollection::getAll ( );
__declspec(implementation_key(1450)) IWMPPlaylistPtr IWMPMediaCollection::getByName ( _bstr_t bstrName );
__declspec(implementation_key(1451)) IWMPPlaylistPtr IWMPMediaCollection::getByGenre ( _bstr_t bstrGenre );
__declspec(implementation_key(1452)) IWMPPlaylistPtr IWMPMediaCollection::getByAuthor ( _bstr_t bstrAuthor );
__declspec(implementation_key(1453)) IWMPPlaylistPtr IWMPMediaCollection::getByAlbum ( _bstr_t bstrAlbum );
__declspec(implementation_key(1454)) IWMPPlaylistPtr IWMPMediaCollection::getByAttribute ( _bstr_t bstrAttribute, _bstr_t bstrValue );
__declspec(implementation_key(1455)) HRESULT IWMPMediaCollection::remove ( struct IWMPMedia * pItem, VARIANT_BOOL varfDeleteFile );
__declspec(implementation_key(1456)) IWMPStringCollectionPtr IWMPMediaCollection::getAttributeStringCollection ( _bstr_t bstrAttribute, _bstr_t bstrMediaType );
__declspec(implementation_key(1457)) long IWMPMediaCollection::getMediaAtom ( _bstr_t bstrItemName );
__declspec(implementation_key(1458)) HRESULT IWMPMediaCollection::setDeleted ( struct IWMPMedia * pItem, VARIANT_BOOL varfIsDeleted );
__declspec(implementation_key(1459)) VARIANT_BOOL IWMPMediaCollection::isDeleted ( struct IWMPMedia * pItem );
__declspec(implementation_key(1460)) _bstr_t IWMPLibrary::Getname ( );
__declspec(implementation_key(1461)) enum WMPLibraryType IWMPLibrary::Gettype ( );
__declspec(implementation_key(1462)) IWMPMediaCollectionPtr IWMPLibrary::GetmediaCollection ( );
__declspec(implementation_key(1463)) VARIANT_BOOL IWMPLibrary::isIdentical ( struct IWMPLibrary * pIWMPLibrary );
__declspec(implementation_key(1464)) VARIANT_BOOL IWMPControls::GetisAvailable ( _bstr_t bstrItem );
__declspec(implementation_key(1465)) HRESULT IWMPControls::play ( );
__declspec(implementation_key(1466)) HRESULT IWMPControls::stop ( );
__declspec(implementation_key(1467)) HRESULT IWMPControls::pause ( );
__declspec(implementation_key(1468)) HRESULT IWMPControls::fastForward ( );
__declspec(implementation_key(1469)) HRESULT IWMPControls::fastReverse ( );
__declspec(implementation_key(1470)) double IWMPControls::GetcurrentPosition ( );
__declspec(implementation_key(1471)) void IWMPControls::PutcurrentPosition ( double pdCurrentPosition );
__declspec(implementation_key(1472)) _bstr_t IWMPControls::GetcurrentPositionString ( );
__declspec(implementation_key(1473)) HRESULT IWMPControls::next ( );
__declspec(implementation_key(1474)) HRESULT IWMPControls::previous ( );
__declspec(implementation_key(1475)) IWMPMediaPtr IWMPControls::GetcurrentItem ( );
__declspec(implementation_key(1476)) void IWMPControls::PutcurrentItem ( struct IWMPMedia * ppIWMPMedia );
__declspec(implementation_key(1477)) long IWMPControls::GetcurrentMarker ( );
__declspec(implementation_key(1478)) void IWMPControls::PutcurrentMarker ( long plMarker );
__declspec(implementation_key(1479)) HRESULT IWMPControls::playItem ( struct IWMPMedia * pIWMPMedia );
__declspec(implementation_key(1480)) long IWMPPlaylistArray::Getcount ( );
__declspec(implementation_key(1481)) IWMPPlaylistPtr IWMPPlaylistArray::Item ( long lIndex );
__declspec(implementation_key(1482)) IWMPPlaylistPtr IWMPPlaylistCollection::newPlaylist ( _bstr_t bstrName );
__declspec(implementation_key(1483)) IWMPPlaylistArrayPtr IWMPPlaylistCollection::getAll ( );
__declspec(implementation_key(1484)) IWMPPlaylistArrayPtr IWMPPlaylistCollection::getByName ( _bstr_t bstrName );
__declspec(implementation_key(1485)) HRESULT IWMPPlaylistCollection::remove ( struct IWMPPlaylist * pItem );
__declspec(implementation_key(1486)) HRESULT IWMPPlaylistCollection::setDeleted ( struct IWMPPlaylist * pItem, VARIANT_BOOL varfIsDeleted );
__declspec(implementation_key(1487)) VARIANT_BOOL IWMPPlaylistCollection::isDeleted ( struct IWMPPlaylist * pItem );
__declspec(implementation_key(1488)) IWMPPlaylistPtr IWMPPlaylistCollection::importPlaylist ( struct IWMPPlaylist * pItem );
__declspec(implementation_key(1489)) _bstr_t IWMPCdrom::GetdriveSpecifier ( );
__declspec(implementation_key(1490)) IWMPPlaylistPtr IWMPCdrom::GetPlaylist ( );
__declspec(implementation_key(1491)) HRESULT IWMPCdrom::eject ( );
__declspec(implementation_key(1492)) long IWMPCdromCollection::Getcount ( );
__declspec(implementation_key(1493)) IWMPCdromPtr IWMPCdromCollection::Item ( long lIndex );
__declspec(implementation_key(1494)) IWMPCdromPtr IWMPCdromCollection::getByDriveSpecifier ( _bstr_t bstrDriveSpecifier );
__declspec(implementation_key(1495)) HRESULT IWMPCore::close ( );
__declspec(implementation_key(1496)) _bstr_t IWMPCore::GetURL ( );
__declspec(implementation_key(1497)) void IWMPCore::PutURL ( _bstr_t pbstrURL );
__declspec(implementation_key(1498)) enum WMPOpenState IWMPCore::GetopenState ( );
__declspec(implementation_key(1499)) enum WMPPlayState IWMPCore::GetplayState ( );
__declspec(implementation_key(1500)) IWMPControlsPtr IWMPCore::Getcontrols ( );
__declspec(implementation_key(1501)) IWMPSettingsPtr IWMPCore::Getsettings ( );
__declspec(implementation_key(1502)) IWMPMediaPtr IWMPCore::GetcurrentMedia ( );
__declspec(implementation_key(1503)) void IWMPCore::PutcurrentMedia ( struct IWMPMedia * ppMedia );
__declspec(implementation_key(1504)) IWMPMediaCollectionPtr IWMPCore::GetmediaCollection ( );
__declspec(implementation_key(1505)) IWMPPlaylistCollectionPtr IWMPCore::GetplaylistCollection ( );
__declspec(implementation_key(1506)) _bstr_t IWMPCore::GetversionInfo ( );
__declspec(implementation_key(1507)) HRESULT IWMPCore::launchURL ( _bstr_t bstrURL );
__declspec(implementation_key(1508)) IWMPNetworkPtr IWMPCore::Getnetwork ( );
__declspec(implementation_key(1509)) IWMPPlaylistPtr IWMPCore::GetcurrentPlaylist ( );
__declspec(implementation_key(1510)) void IWMPCore::PutcurrentPlaylist ( struct IWMPPlaylist * ppPL );
__declspec(implementation_key(1511)) IWMPCdromCollectionPtr IWMPCore::GetcdromCollection ( );
__declspec(implementation_key(1512)) IWMPClosedCaptionPtr IWMPCore::GetclosedCaption ( );
__declspec(implementation_key(1513)) VARIANT_BOOL IWMPCore::GetisOnline ( );
__declspec(implementation_key(1514)) IWMPErrorPtr IWMPCore::GetError ( );
__declspec(implementation_key(1515)) _bstr_t IWMPCore::Getstatus ( );
__declspec(implementation_key(1516)) IWMPDVDPtr IWMPCore2::Getdvd ( );
__declspec(implementation_key(1517)) IWMPPlaylistPtr IWMPCore3::newPlaylist ( _bstr_t bstrName, _bstr_t bstrURL );
__declspec(implementation_key(1518)) IWMPMediaPtr IWMPCore3::newMedia ( _bstr_t bstrURL );
__declspec(implementation_key(1519)) VARIANT_BOOL IWMPPlayer4::Getenabled ( );
__declspec(implementation_key(1520)) void IWMPPlayer4::Putenabled ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(1521)) VARIANT_BOOL IWMPPlayer4::GetfullScreen ( );
__declspec(implementation_key(1522)) void IWMPPlayer4::PutfullScreen ( VARIANT_BOOL pbFullScreen );
__declspec(implementation_key(1523)) VARIANT_BOOL IWMPPlayer4::GetenableContextMenu ( );
__declspec(implementation_key(1524)) void IWMPPlayer4::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu );
__declspec(implementation_key(1525)) void IWMPPlayer4::PutuiMode ( _bstr_t pbstrMode );
__declspec(implementation_key(1526)) _bstr_t IWMPPlayer4::GetuiMode ( );
__declspec(implementation_key(1527)) VARIANT_BOOL IWMPPlayer4::GetstretchToFit ( );
__declspec(implementation_key(1528)) void IWMPPlayer4::PutstretchToFit ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(1529)) VARIANT_BOOL IWMPPlayer4::GetwindowlessVideo ( );
__declspec(implementation_key(1530)) void IWMPPlayer4::PutwindowlessVideo ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(1531)) VARIANT_BOOL IWMPPlayer4::GetisRemote ( );
__declspec(implementation_key(1532)) IWMPPlayerApplicationPtr IWMPPlayer4::GetplayerApplication ( );
__declspec(implementation_key(1533)) HRESULT IWMPPlayer4::openPlayer ( _bstr_t bstrURL );
__declspec(implementation_key(1534)) VARIANT_BOOL IWMPPlayer3::Getenabled ( );
__declspec(implementation_key(1535)) void IWMPPlayer3::Putenabled ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(1536)) VARIANT_BOOL IWMPPlayer3::GetfullScreen ( );
__declspec(implementation_key(1537)) void IWMPPlayer3::PutfullScreen ( VARIANT_BOOL pbFullScreen );
__declspec(implementation_key(1538)) VARIANT_BOOL IWMPPlayer3::GetenableContextMenu ( );
__declspec(implementation_key(1539)) void IWMPPlayer3::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu );
__declspec(implementation_key(1540)) void IWMPPlayer3::PutuiMode ( _bstr_t pbstrMode );
__declspec(implementation_key(1541)) _bstr_t IWMPPlayer3::GetuiMode ( );
__declspec(implementation_key(1542)) VARIANT_BOOL IWMPPlayer3::GetstretchToFit ( );
__declspec(implementation_key(1543)) void IWMPPlayer3::PutstretchToFit ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(1544)) VARIANT_BOOL IWMPPlayer3::GetwindowlessVideo ( );
__declspec(implementation_key(1545)) void IWMPPlayer3::PutwindowlessVideo ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(1546)) VARIANT_BOOL IWMPPlayer2::Getenabled ( );
__declspec(implementation_key(1547)) void IWMPPlayer2::Putenabled ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(1548)) VARIANT_BOOL IWMPPlayer2::GetfullScreen ( );
__declspec(implementation_key(1549)) void IWMPPlayer2::PutfullScreen ( VARIANT_BOOL pbFullScreen );
__declspec(implementation_key(1550)) VARIANT_BOOL IWMPPlayer2::GetenableContextMenu ( );
__declspec(implementation_key(1551)) void IWMPPlayer2::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu );
__declspec(implementation_key(1552)) void IWMPPlayer2::PutuiMode ( _bstr_t pbstrMode );
__declspec(implementation_key(1553)) _bstr_t IWMPPlayer2::GetuiMode ( );
__declspec(implementation_key(1554)) VARIANT_BOOL IWMPPlayer2::GetstretchToFit ( );
__declspec(implementation_key(1555)) void IWMPPlayer2::PutstretchToFit ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(1556)) VARIANT_BOOL IWMPPlayer2::GetwindowlessVideo ( );
__declspec(implementation_key(1557)) void IWMPPlayer2::PutwindowlessVideo ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(1558)) VARIANT_BOOL IWMPPlayer::Getenabled ( );
__declspec(implementation_key(1559)) void IWMPPlayer::Putenabled ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(1560)) VARIANT_BOOL IWMPPlayer::GetfullScreen ( );
__declspec(implementation_key(1561)) void IWMPPlayer::PutfullScreen ( VARIANT_BOOL pbFullScreen );
__declspec(implementation_key(1562)) VARIANT_BOOL IWMPPlayer::GetenableContextMenu ( );
__declspec(implementation_key(1563)) void IWMPPlayer::PutenableContextMenu ( VARIANT_BOOL pbEnableContextMenu );
__declspec(implementation_key(1564)) void IWMPPlayer::PutuiMode ( _bstr_t pbstrMode );
__declspec(implementation_key(1565)) _bstr_t IWMPPlayer::GetuiMode ( );
__declspec(implementation_key(1566)) HRESULT IWMPControls2::step ( long lStep );
__declspec(implementation_key(1567)) IWMPErrorItemPtr IWMPMedia2::GetError ( );
__declspec(implementation_key(1568)) long IWMPMedia3::getAttributeCountByType ( _bstr_t bstrType, _bstr_t bstrLanguage );
__declspec(implementation_key(1569)) _variant_t IWMPMedia3::getItemInfoByType ( _bstr_t bstrType, _bstr_t bstrLanguage, long lIndex );
__declspec(implementation_key(1570)) long IWMPControls3::GetaudioLanguageCount ( );
__declspec(implementation_key(1571)) long IWMPControls3::getAudioLanguageID ( long lIndex );
__declspec(implementation_key(1572)) _bstr_t IWMPControls3::getAudioLanguageDescription ( long lIndex );
__declspec(implementation_key(1573)) long IWMPControls3::GetcurrentAudioLanguage ( );
__declspec(implementation_key(1574)) void IWMPControls3::PutcurrentAudioLanguage ( long plLangID );
__declspec(implementation_key(1575)) long IWMPControls3::GetcurrentAudioLanguageIndex ( );
__declspec(implementation_key(1576)) void IWMPControls3::PutcurrentAudioLanguageIndex ( long plIndex );
__declspec(implementation_key(1577)) _bstr_t IWMPControls3::getLanguageName ( long lLangID );
__declspec(implementation_key(1578)) _bstr_t IWMPControls3::GetcurrentPositionTimecode ( );
__declspec(implementation_key(1579)) void IWMPControls3::PutcurrentPositionTimecode ( _bstr_t bstrTimecode );
__declspec(implementation_key(1580)) IWMPQueryPtr IWMPMediaCollection2::createQuery ( );
__declspec(implementation_key(1581)) IWMPPlaylistPtr IWMPMediaCollection2::getPlaylistByQuery ( struct IWMPQuery * pQuery, _bstr_t bstrMediaType, _bstr_t bstrSortAttribute, VARIANT_BOOL fSortAscending );
__declspec(implementation_key(1582)) IWMPStringCollectionPtr IWMPMediaCollection2::getStringCollectionByQuery ( _bstr_t bstrAttribute, struct IWMPQuery * pQuery, _bstr_t bstrMediaType, _bstr_t bstrSortAttribute, VARIANT_BOOL fSortAscending );
__declspec(implementation_key(1583)) IWMPPlaylistPtr IWMPMediaCollection2::getByAttributeAndMediaType ( _bstr_t bstrAttribute, _bstr_t bstrValue, _bstr_t bstrMediaType );
__declspec(implementation_key(1584)) long IWMPLibraryServices::getCountByType ( enum WMPLibraryType wmplt );
__declspec(implementation_key(1585)) IWMPLibraryPtr IWMPLibraryServices::getLibraryByType ( enum WMPLibraryType wmplt, long lIndex );
__declspec(implementation_key(1586)) _bstr_t IWMPLibrary2::getItemInfo ( _bstr_t bstrItemName );
__declspec(implementation_key(1587)) HRESULT IWMPSyncDevice3::estimateSyncSize ( struct IWMPPlaylist * pNonRulePlaylist, struct IWMPPlaylist * pRulesPlaylist );
__declspec(implementation_key(1588)) HRESULT IWMPSyncDevice3::cancelEstimation ( );
__declspec(implementation_key(1589)) IWMPPlaylistPtr IWMPPlaylistCtrl::GetPlaylist ( );
__declspec(implementation_key(1590)) void IWMPPlaylistCtrl::PutPlaylist ( struct IWMPPlaylist * ppdispPlaylist );
__declspec(implementation_key(1591)) _bstr_t IWMPPlaylistCtrl::Getcolumns ( );
__declspec(implementation_key(1592)) void IWMPPlaylistCtrl::Putcolumns ( _bstr_t pbstrColumns );
__declspec(implementation_key(1593)) long IWMPPlaylistCtrl::GetcolumnCount ( );
__declspec(implementation_key(1594)) _bstr_t IWMPPlaylistCtrl::GetcolumnOrder ( );
__declspec(implementation_key(1595)) void IWMPPlaylistCtrl::PutcolumnOrder ( _bstr_t pbstrColumnOrder );
__declspec(implementation_key(1596)) VARIANT_BOOL IWMPPlaylistCtrl::GetcolumnsVisible ( );
__declspec(implementation_key(1597)) void IWMPPlaylistCtrl::PutcolumnsVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1598)) VARIANT_BOOL IWMPPlaylistCtrl::GetdropDownVisible ( );
__declspec(implementation_key(1599)) void IWMPPlaylistCtrl::PutdropDownVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1600)) VARIANT_BOOL IWMPPlaylistCtrl::GetplaylistItemsVisible ( );
__declspec(implementation_key(1601)) void IWMPPlaylistCtrl::PutplaylistItemsVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1602)) VARIANT_BOOL IWMPPlaylistCtrl::GetcheckboxesVisible ( );
__declspec(implementation_key(1603)) void IWMPPlaylistCtrl::PutcheckboxesVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1604)) _bstr_t IWMPPlaylistCtrl::GetbackgroundColor ( );
__declspec(implementation_key(1605)) void IWMPPlaylistCtrl::PutbackgroundColor ( _bstr_t pbstrColor );
__declspec(implementation_key(1606)) _bstr_t IWMPPlaylistCtrl::GetforegroundColor ( );
__declspec(implementation_key(1607)) void IWMPPlaylistCtrl::PutforegroundColor ( _bstr_t pbstrColor );
__declspec(implementation_key(1608)) _bstr_t IWMPPlaylistCtrl::GetdisabledItemColor ( );
__declspec(implementation_key(1609)) void IWMPPlaylistCtrl::PutdisabledItemColor ( _bstr_t pbstrColor );
__declspec(implementation_key(1610)) _bstr_t IWMPPlaylistCtrl::GetitemPlayingColor ( );
__declspec(implementation_key(1611)) void IWMPPlaylistCtrl::PutitemPlayingColor ( _bstr_t pbstrColor );
__declspec(implementation_key(1612)) _bstr_t IWMPPlaylistCtrl::GetitemPlayingBackgroundColor ( );
__declspec(implementation_key(1613)) void IWMPPlaylistCtrl::PutitemPlayingBackgroundColor ( _bstr_t pbstrBackgroundColor );
__declspec(implementation_key(1614)) _bstr_t IWMPPlaylistCtrl::GetbackgroundImage ( );
__declspec(implementation_key(1615)) void IWMPPlaylistCtrl::PutbackgroundImage ( _bstr_t pbstrImage );
__declspec(implementation_key(1616)) VARIANT_BOOL IWMPPlaylistCtrl::GetallowItemEditing ( );
__declspec(implementation_key(1617)) void IWMPPlaylistCtrl::PutallowItemEditing ( VARIANT_BOOL pVal );
__declspec(implementation_key(1618)) VARIANT_BOOL IWMPPlaylistCtrl::GetallowColumnSorting ( );
__declspec(implementation_key(1619)) void IWMPPlaylistCtrl::PutallowColumnSorting ( VARIANT_BOOL pVal );
__declspec(implementation_key(1620)) _bstr_t IWMPPlaylistCtrl::GetdropDownList ( );
__declspec(implementation_key(1621)) void IWMPPlaylistCtrl::PutdropDownList ( _bstr_t pbstrList );
__declspec(implementation_key(1622)) _bstr_t IWMPPlaylistCtrl::GetdropDownToolTip ( );
__declspec(implementation_key(1623)) void IWMPPlaylistCtrl::PutdropDownToolTip ( _bstr_t pbstrToolTip );
__declspec(implementation_key(1624)) VARIANT_BOOL IWMPPlaylistCtrl::Getcopying ( );
__declspec(implementation_key(1625)) void IWMPPlaylistCtrl::Putcopying ( VARIANT_BOOL pVal );
__declspec(implementation_key(1626)) HRESULT IWMPPlaylistCtrl::copy ( );
__declspec(implementation_key(1627)) HRESULT IWMPPlaylistCtrl::abortCopy ( );
__declspec(implementation_key(1628)) HRESULT IWMPPlaylistCtrl::deleteSelected ( );
__declspec(implementation_key(1629)) HRESULT IWMPPlaylistCtrl::deleteSelectedFromLibrary ( );
__declspec(implementation_key(1630)) HRESULT IWMPPlaylistCtrl::moveSelectedUp ( );
__declspec(implementation_key(1631)) HRESULT IWMPPlaylistCtrl::moveSelectedDown ( );
__declspec(implementation_key(1632)) HRESULT IWMPPlaylistCtrl::addSelectedToPlaylist ( struct IWMPPlaylist * pdispPlaylist );
__declspec(implementation_key(1633)) long IWMPPlaylistCtrl::getNextSelectedItem ( long nStartIndex );
__declspec(implementation_key(1634)) long IWMPPlaylistCtrl::getNextCheckedItem ( long nStartIndex );
__declspec(implementation_key(1635)) HRESULT IWMPPlaylistCtrl::setSelectedState ( long nIndex, VARIANT_BOOL vbSelected );
__declspec(implementation_key(1636)) HRESULT IWMPPlaylistCtrl::setCheckedState ( long nIndex, VARIANT_BOOL vbChecked );
__declspec(implementation_key(1637)) HRESULT IWMPPlaylistCtrl::sortColumn ( long nIndex );
__declspec(implementation_key(1638)) HRESULT IWMPPlaylistCtrl::setColumnResizeMode ( long nIndex, _bstr_t newMode );
__declspec(implementation_key(1639)) HRESULT IWMPPlaylistCtrl::setColumnWidth ( long nIndex, long nWidth );
__declspec(implementation_key(1640)) _bstr_t IWMPPlaylistCtrl::GetitemErrorColor ( );
__declspec(implementation_key(1641)) void IWMPPlaylistCtrl::PutitemErrorColor ( _bstr_t pbstrColor );
__declspec(implementation_key(1642)) long IWMPPlaylistCtrl::GetitemCount ( );
__declspec(implementation_key(1643)) IWMPMediaPtr IWMPPlaylistCtrl::GetitemMedia ( long nIndex );
__declspec(implementation_key(1644)) IWMPPlaylistPtr IWMPPlaylistCtrl::GetitemPlaylist ( long nIndex );
__declspec(implementation_key(1645)) long IWMPPlaylistCtrl::getNextSelectedItem2 ( long nStartIndex );
__declspec(implementation_key(1646)) long IWMPPlaylistCtrl::getNextCheckedItem2 ( long nStartIndex );
__declspec(implementation_key(1647)) HRESULT IWMPPlaylistCtrl::setSelectedState2 ( long nIndex, VARIANT_BOOL vbSelected );
__declspec(implementation_key(1648)) HRESULT IWMPPlaylistCtrl::setCheckedState2 ( long nIndex, VARIANT_BOOL vbChecked );
__declspec(implementation_key(1649)) _bstr_t IWMPPlaylistCtrl::GetleftStatus ( );
__declspec(implementation_key(1650)) void IWMPPlaylistCtrl::PutleftStatus ( _bstr_t pbstrStatus );
__declspec(implementation_key(1651)) _bstr_t IWMPPlaylistCtrl::GetrightStatus ( );
__declspec(implementation_key(1652)) void IWMPPlaylistCtrl::PutrightStatus ( _bstr_t pbstrStatus );
__declspec(implementation_key(1653)) VARIANT_BOOL IWMPPlaylistCtrl::GeteditButtonVisible ( );
__declspec(implementation_key(1654)) void IWMPPlaylistCtrl::PuteditButtonVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1655)) _bstr_t IWMPPlaylistCtrl::GetdropDownImage ( );
__declspec(implementation_key(1656)) void IWMPPlaylistCtrl::PutdropDownImage ( _bstr_t pbstrImage );
__declspec(implementation_key(1657)) _bstr_t IWMPPlaylistCtrl::GetdropDownBackgroundImage ( );
__declspec(implementation_key(1658)) void IWMPPlaylistCtrl::PutdropDownBackgroundImage ( _bstr_t pbstrImage );
__declspec(implementation_key(1659)) float IWMPPlaylistCtrl::GethueShift ( );
__declspec(implementation_key(1660)) void IWMPPlaylistCtrl::PuthueShift ( float pVal );
__declspec(implementation_key(1661)) float IWMPPlaylistCtrl::Getsaturation ( );
__declspec(implementation_key(1662)) void IWMPPlaylistCtrl::Putsaturation ( float pVal );
__declspec(implementation_key(1663)) _bstr_t IWMPPlaylistCtrl::GetstatusColor ( );
__declspec(implementation_key(1664)) void IWMPPlaylistCtrl::PutstatusColor ( _bstr_t pbstrColor );
__declspec(implementation_key(1665)) VARIANT_BOOL IWMPPlaylistCtrl::GettoolbarVisible ( );
__declspec(implementation_key(1666)) void IWMPPlaylistCtrl::PuttoolbarVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1667)) _bstr_t IWMPPlaylistCtrl::GetitemSelectedColor ( );
__declspec(implementation_key(1668)) void IWMPPlaylistCtrl::PutitemSelectedColor ( _bstr_t pbstrColor );
__declspec(implementation_key(1669)) _bstr_t IWMPPlaylistCtrl::GetitemSelectedFocusLostColor ( );
__declspec(implementation_key(1670)) void IWMPPlaylistCtrl::PutitemSelectedFocusLostColor ( _bstr_t pbstrFocusLostColor );
__declspec(implementation_key(1671)) _bstr_t IWMPPlaylistCtrl::GetitemSelectedBackgroundColor ( );
__declspec(implementation_key(1672)) void IWMPPlaylistCtrl::PutitemSelectedBackgroundColor ( _bstr_t pbstrColor );
__declspec(implementation_key(1673)) _bstr_t IWMPPlaylistCtrl::GetitemSelectedBackgroundFocusLostColor ( );
__declspec(implementation_key(1674)) void IWMPPlaylistCtrl::PutitemSelectedBackgroundFocusLostColor ( _bstr_t pbstrFocusLostColor );
__declspec(implementation_key(1675)) _bstr_t IWMPPlaylistCtrl::GetbackgroundSplitColor ( );
__declspec(implementation_key(1676)) void IWMPPlaylistCtrl::PutbackgroundSplitColor ( _bstr_t pbstrColor );
__declspec(implementation_key(1677)) _bstr_t IWMPPlaylistCtrl::GetstatusTextColor ( );
__declspec(implementation_key(1678)) void IWMPPlaylistCtrl::PutstatusTextColor ( _bstr_t pbstrColor );
__declspec(implementation_key(1679)) VARIANT_BOOL IWMPLibraryTreeCtrl::GetdropDownVisible ( );
__declspec(implementation_key(1680)) void IWMPLibraryTreeCtrl::PutdropDownVisible ( VARIANT_BOOL pVal );
__declspec(implementation_key(1681)) _bstr_t IWMPLibraryTreeCtrl::GetforegroundColor ( );
__declspec(implementation_key(1682)) void IWMPLibraryTreeCtrl::PutforegroundColor ( _bstr_t pVal );
__declspec(implementation_key(1683)) _bstr_t IWMPLibraryTreeCtrl::GetbackgroundColor ( );
__declspec(implementation_key(1684)) void IWMPLibraryTreeCtrl::PutbackgroundColor ( _bstr_t pVal );
__declspec(implementation_key(1685)) long IWMPLibraryTreeCtrl::GetfontSize ( );
__declspec(implementation_key(1686)) void IWMPLibraryTreeCtrl::PutfontSize ( long pVal );
__declspec(implementation_key(1687)) _bstr_t IWMPLibraryTreeCtrl::GetfontStyle ( );
__declspec(implementation_key(1688)) void IWMPLibraryTreeCtrl::PutfontStyle ( _bstr_t pVal );
__declspec(implementation_key(1689)) _bstr_t IWMPLibraryTreeCtrl::GetfontFace ( );
__declspec(implementation_key(1690)) void IWMPLibraryTreeCtrl::PutfontFace ( _bstr_t pVal );
__declspec(implementation_key(1691)) _bstr_t IWMPLibraryTreeCtrl::Getfilter ( );
__declspec(implementation_key(1692)) void IWMPLibraryTreeCtrl::Putfilter ( _bstr_t pVal );
__declspec(implementation_key(1693)) _bstr_t IWMPLibraryTreeCtrl::GetexpandState ( );
__declspec(implementation_key(1694)) void IWMPLibraryTreeCtrl::PutexpandState ( _bstr_t pVal );
__declspec(implementation_key(1695)) IWMPPlaylistPtr IWMPLibraryTreeCtrl::GetPlaylist ( );
__declspec(implementation_key(1696)) void IWMPLibraryTreeCtrl::PutPlaylist ( struct IWMPPlaylist * ppPlaylist );
__declspec(implementation_key(1697)) IWMPPlaylistPtr IWMPLibraryTreeCtrl::GetselectedPlaylist ( );
__declspec(implementation_key(1698)) IWMPMediaPtr IWMPLibraryTreeCtrl::GetselectedMedia ( );
#pragma stop_map_region

} // namespace WMPLib

#pragma pack(pop)
